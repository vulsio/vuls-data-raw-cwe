{
  "id": "1116",
  "name": "Inaccurate Comments",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The source code contains comments that do not accurately\n\t\t\t\t\tdescribe or explain aspects of the portion of the code with which the comment is\n\t\t\t\t\tassociated.",
  "extended_description": "<xhtml:p>When a comment does not accurately reflect the associated code elements, this can introduce confusion to a reviewer (due to inconsistencies) or make it more difficult and less efficient to validate that the code is implementing the intended behavior correctly.</xhtml:p>\n<xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p>",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "1078",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Not Language-Specific",
        "prevalence": "Undetermined"
      }
    ]
  },
  "common_consequences": [
    {
      "scope": [
        "Other"
      ],
      "impact": [
        "Reduce Maintainability"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Verify that each comment accurately reflects what is intended to happen during execution of the code."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n               <Intro_Text>In the following Java example the code performs a calculation to determine how much medicine to administer. A comment is provided to give insight into what the calculation shoud be doing. Unfortunately the comment does not match the actual code and thus leaves the reader to wonder which is correct.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                 public class Main {<xhtml:br/>\n                 <xhtml:div style=\"margin-left:1em;\">\n\t\t   public static void main(String[] args) {\n                   <xhtml:div style=\"margin-left:1em;\">\n\t\t     int pt_weight = 83;<xhtml:br/>\n\t\t     int mg_per_kg = 3;<xhtml:br/>\n\t\t     int daily_dose = 0;<xhtml:br/>\n\t\t     <xhtml:br/>\n\t\t     // Add the patient weight and Mg/Kg to calculate the correct daily dose<xhtml:br/>\n\t\t     daily_dose = pt_weight * mg_per_kg;<xhtml:br/>\n                     return dosage;\n\t\t   </xhtml:div>\n                   }\n\t\t </xhtml:div>\n                 }\n               </Example_Code>\n               <Body_Text>In the correction below, the code functionality has been verified, and the comment has been corrected to reflect the proper calculation.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"Java\">\n                 public class Main {<xhtml:br/>\n                 <xhtml:div style=\"margin-left:1em;\">\n\t\t   public static void main(String[] args) {\n                   <xhtml:div style=\"margin-left:1em;\">\n\t\t     int pt_weight = 83;<xhtml:br/>\n\t\t     int mg_per_kg = 3;<xhtml:br/>\n\t\t     int daily_dose = 0;<xhtml:br/>\n\t\t     <xhtml:br/>\n\t\t     // Multiply the patient weight and Mg/Kg to calculate the correct daily dose<xhtml:br/>\n\t\t     daily_dose = pt_weight * mg_per_kg;<xhtml:br/>\n                     return dosage;\n\t\t   </xhtml:div>\n                   }\n\t\t </xhtml:div>\n                 }\n               </Example_Code>\n               <Body_Text>Note that in real-world code, these values should be validated to disallow negative numbers, prevent integer overflow, etc.</Body_Text>\n            "
    }
  ],
  "references": [
    {
      "reference_id": "REF-963",
      "author": [
        "Robert A. Martin",
        "Lawrence H. Shafer"
      ],
      "title": "Providing a Framework for Effective Software Quality Assessment",
      "url": "https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT",
      "publication_year": "1996",
      "publication_month": "--07",
      "url_date": "2023-04-07"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CWE Content Team",
      "submission_organization": "MITRE",
      "submission_date": "2018-07-02",
      "submission_comment": "Entry derived from Common Quality Enumeration (CQE) Draft 0.9."
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-10-13",
        "modification_comment": "updated Applicable_Platforms, Demonstrative_Examples, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-01-31",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      }
    ],
    "contribution": [
      {
        "type": "Content",
        "contribution_name": "Drew Buttner",
        "contribution_date": "2022-08-15",
        "contribution_comment": "Suggested new demonstrative examples, mitigations, and applicable platforms."
      }
    ]
  },
  "weakness_ordinalities": [
    {
      "ordinality": "Indirect"
    }
  ]
}
