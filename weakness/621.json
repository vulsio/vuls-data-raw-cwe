{
  "id": "621",
  "name": "Variable Extraction Error",
  "abstraction": "Variant",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables.",
  "extended_description": "\n            <xhtml:p>For example, in PHP, extraction can be used to provide functionality similar to register_globals, a dangerous functionality that is frequently disabled in production systems. Calling extract() or import_request_variables() without the proper arguments could allow arbitrary global variables to be overwritten, including superglobals.</xhtml:p>\n            <xhtml:p>Similar functionality is possible in other interpreted languages, including custom languages.</xhtml:p>\n         ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "914",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "CanPrecede",
      "cweid": "471",
      "view_id": "1000"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "prevalence": "Undetermined",
        "name": "PHP"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Integrity"
      ],
      "impact": [
        "Modify Application Data"
      ],
      "note": "An attacker could modify sensitive data or program variables."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Use allowlists of variable names that can be extracted."
      ],
      "strategy": "Input Validation"
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Consider refactoring your code to avoid extraction routines altogether."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-107",
      "text": "\n               <Intro_Text>This code uses the credentials sent in a POST request to login a user.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"PHP\">\n                  <xhtml:div>\n                     <xhtml:i>//Log user in, and set $isAdmin to true if user is an administrator</xhtml:i>\n                     <xhtml:br/>\n                     <xhtml:br/>function login($user,$pass){<xhtml:div style=\"margin-left:1em;\">$query = buildQuery($user,$pass);<xhtml:br/>mysql_query($query);<xhtml:br/>if(getUserRole($user) == \"Admin\"){<xhtml:div style=\"margin-left:1em;\">$isAdmin = true;</xhtml:div>}</xhtml:div>}<xhtml:br/>\n                     <xhtml:br/>$isAdmin = false;<xhtml:br/>extract($_POST);<xhtml:br/>login(mysql_real_escape_string($user),mysql_real_escape_string($pass));</xhtml:div>\n               </Example_Code>\n               <Body_Text>The call to extract() will overwrite the existing values of any variables defined previously, in this case $isAdmin. An attacker can send a POST request with an unexpected third value \"isAdmin\" equal to \"true\", thus gaining Admin privileges.</Body_Text>\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2006-7135",
      "description": "extract issue enables file inclusion",
      "link": "https://www.cve.org/CVERecord?id=CVE-2006-7135"
    },
    {
      "reference": "CVE-2006-7079",
      "description": "Chain: PHP app uses extract for register_globals compatibility layer (CWE-621), enabling path traversal (CWE-22)",
      "link": "https://www.cve.org/CVERecord?id=CVE-2006-7079"
    },
    {
      "reference": "CVE-2007-0649",
      "description": "extract() buried in include files makes post-disclosure analysis confusing; original report had seemed incorrect.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2007-0649"
    },
    {
      "reference": "CVE-2006-6661",
      "description": "extract() enables static code injection",
      "link": "https://www.cve.org/CVERecord?id=CVE-2006-6661"
    },
    {
      "reference": "CVE-2006-2828",
      "description": "import_request_variables() buried in include files makes post-disclosure analysis confusing",
      "link": "https://www.cve.org/CVERecord?id=CVE-2006-2828"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CWE Content Team",
      "submission_organization": "MITRE",
      "submission_date": "2007-05-07"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01",
        "modification_comment": "updated Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08",
        "modification_comment": "updated Description, Relationships, Observed_Example, Other_Notes, Weakness_Ordinalities"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-10-14",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11",
        "modification_comment": "updated Common_Consequences, Demonstrative_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-10-30",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2013-02-21",
        "modification_comment": "updated Demonstrative_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-06-23",
        "modification_comment": "updated Description, Other_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-04-28",
        "modification_comment": "updated Research_Gaps"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Relationships, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-10-26",
        "modification_comment": "updated Observed_Examples"
      }
    ]
  },
  "weakness_ordinalities": [
    {
      "ordinality": "Primary"
    }
  ],
  "alternate_terms": [
    {
      "term": "Variable overwrite"
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Tainted input to command",
      "entry_id": "SFP24"
    }
  ],
  "notes": [
    {
      "type": "Research Gap",
      "text": "Probably under-reported for PHP. Seems under-studied for other interpreted languages."
    }
  ]
}
