{
	"id": "1290",
	"name": "Incorrect Decoding of Security Identifiers ",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The product implements a decoding mechanism to decode certain bus-transaction signals to security identifiers. If the decoding is implemented incorrectly, then untrusted agents can now gain unauthorized access to the asset.",
	"extended_description": "\n\t\t\t\t<xhtml:p>In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. The security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes). A decoder decodes the bus transactions to map security identifiers into necessary access-controls/protections.</xhtml:p>\n\t\t\t\t<xhtml:p>A common weakness that can exist in this scenario is incorrect decoding because an untrusted agent's security identifier is decoded into a trusted agent's security identifier. Thus, an untrusted agent previously without access to an asset can now gain access to the asset.</xhtml:p>\n\t\t\t",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "284",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "1294",
			"view_id": "1194",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"prevalence": "Undetermined",
				"name": "Bus/Interface Hardware"
			},
			{
				"class": "Not Technology-Specific",
				"prevalence": "Undetermined"
			}
		],
		"operating_system": [
			{
				"class": "Not OS-Specific",
				"prevalence": "Undetermined"
			}
		],
		"architecture": [
			{
				"class": "Not Architecture-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		},
		{
			"phase": "Architecture and Design"
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Confidentiality",
				"Integrity",
				"Availability",
				"Access Control"
			],
			"impact": [
				"Modify Memory",
				"Read Memory",
				"DoS: Resource Consumption (Other)",
				"Execute Unauthorized Code or Commands",
				"Gain Privileges or Assume Identity",
				"Quality Degradation"
			],
			"likelihood": "High"
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Security identifier decoders must be reviewed for design consistency and common weaknesses."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Access and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness."
			]
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n                    <Intro_Text>\n                        <xhtml:p>\n                            Consider a system that has four bus masters and a decoder. The decoder is supposed to decode every bus transaction and assign a corresponding security identifier. The security identifier is used to determine accesses to the assets. The bus transaction that contains the security information is Bus_transaction [15:14], and the bits 15 through 14 contain the security identifier information. The table below provides bus masters as well as their security identifiers and trust assumptions:\n                        </xhtml:p>\n                        <xhtml:table>\n                            <xhtml:tr><xhtml:th>Bus Master</xhtml:th><xhtml:th>Security Identifier Decoding</xhtml:th><xhtml:th>Trust Assumptions</xhtml:th></xhtml:tr>\n                            <xhtml:tr><xhtml:td>Master_0</xhtml:td><xhtml:td>\"00\"</xhtml:td><xhtml:td>Untrusted</xhtml:td></xhtml:tr>\n                            <xhtml:tr><xhtml:td>Master_1</xhtml:td><xhtml:td>\"01\"</xhtml:td><xhtml:td>Trusted</xhtml:td></xhtml:tr>\n                            <xhtml:tr><xhtml:td>Master_2</xhtml:td><xhtml:td>\"10\"</xhtml:td><xhtml:td>Untrusted</xhtml:td></xhtml:tr>\n                            <xhtml:tr><xhtml:td>Master_3</xhtml:td><xhtml:td>\"11\"</xhtml:td><xhtml:td>Untrusted</xhtml:td></xhtml:tr>\n                        </xhtml:table>\n                        <xhtml:p>\n                            The assets are the AES-Key registers for encryption or decryption. The key is 128 bits implemented as a set of four 32-bit registers. The AES_KEY_ACCESS_POLICY is used to define which agents with a security identifier in the transaction can access the AES-key registers. The size of the security identifier is 4 bits (i.e., bit 3 through 0). Each bit in these 4 bits defines a security identifier. There are only 4 security identifiers that are allowed accesses to the AES-key registers. The number of the bit when set (i.e., \"1\") allows respective action from an agent whose identity matches the number of the bit. If clear (i.e., \"0\"), disallows the respective action to that corresponding agent.\n                        </xhtml:p>\n                        <xhtml:table>\n                            <xhtml:tr><xhtml:th>Register</xhtml:th><xhtml:th>Field description</xhtml:th></xhtml:tr>\n                            <xhtml:tr><xhtml:td>AES_ENC_DEC_KEY_0</xhtml:td><xhtml:td>AES key [0:31] for encryption or decryption<xhtml:br/>Default 0x00000000</xhtml:td></xhtml:tr>\n                            <xhtml:tr><xhtml:td>AES_ENC_DEC_KEY_1</xhtml:td><xhtml:td>AES key [32:63] for encryption or decryption<xhtml:br/>Default 0x00000000</xhtml:td></xhtml:tr>\n                            <xhtml:tr><xhtml:td>AES_ENC_DEC_KEY_2</xhtml:td><xhtml:td>AES key [64:95] for encryption or decryption<xhtml:br/>Default 0x00000000</xhtml:td></xhtml:tr>\n                            <xhtml:tr><xhtml:td>AES_ENC_DEC_KEY_3</xhtml:td><xhtml:td>AES key [96:127] for encryption or decryption<xhtml:br/>Default 0x00000000</xhtml:td></xhtml:tr>\n                            <xhtml:tr><xhtml:td>AES_KEY_ACCESS_POLCY</xhtml:td><xhtml:td>[31:4] Default 0x00000000<xhtml:br/>[3:0]-0x01 agent with Security Identified \"1\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers</xhtml:td></xhtml:tr>\n\t\t\t\t\t    </xhtml:table>\n                        <xhtml:br/>\n                    </Intro_Text>\n                    <Body_Text>\n                        The following Pseudo code outlines the process of checking the value of the Security Identifier within the AES_KEY_ACCESS_POLICY register:\n                    </Body_Text>\n                    <Example_Code Nature=\"Informative\" Language=\"Other\">\n                        <xhtml:div>\n                            <xhtml:br/>\n                                If (AES_KEY_ACCESS_POLICY[Security_Identifier] == \"1\")\n                            <xhtml:br/>\n                            <xhtml:div style=\"margin-left:1em;\">\n                                Allow access to AES-Key registers\n                            </xhtml:div>\n                            <xhtml:br/>\n                                Else\n                            <xhtml:br/>\n                            <xhtml:div style=\"margin-left:1em;\">\n                                Deny access to AES-Key registers\n                            </xhtml:div>\n                        </xhtml:div>\n                    </Example_Code>\n                    <Body_Text>\n                        Below is a decoder's Pseudo code that only checks for bit [14] of the bus transaction to determine what Security Identifier it must assign.\n                    </Body_Text>\n                    <Example_Code Nature=\"Bad\" Language=\"Other\">\n                        <xhtml:div>\n                            <xhtml:br/>\n                            If (Bus_transaction[14] == \"1\") \n                            <xhtml:br/>\n                            <xhtml:div style=\"margin-left:1em;\">\n                                Security_Identifier == \"1\"\n                            </xhtml:div>\n                            <xhtml:br/>\n                                Else\n                            <xhtml:br/>\n                            <xhtml:div style=\"margin-left:1em;\">\n                                Security_Identifier == \"0\"\n                            </xhtml:div>\n                        </xhtml:div>\n                    </Example_Code>\n\t\t\t\t\t<Body_Text>\n                        The security identifier is two bits, but the decoder code above only checks the value of one bit. Two Masters have their bit 0 set to \"1\" - Master_1 and Master_3. Master_1 is trusted, while Master_3 is not. The code above would therefore allow an untrusted agent, Master_3, access to the AES-Key registers in addition to intended trusted Master_1.\n                        <xhtml:br/>\n                        The decoder should check for the entire size of the security identifier in the bus-transaction signal to assign a corresponding security identifier. The following is good Pseudo code:\n                        <xhtml:br/>\n                    </Body_Text>\n                    <Example_Code Nature=\"Good\" Language=\"Other\">\n                        <xhtml:div>\n                            <xhtml:br/>\n                            If (Bus_transaction[15:14] == \"00\") \n                            <xhtml:br/>\n                            <xhtml:div style=\"margin-left:1em;\">\n                                Security_Identifier == \"0\"\n                            </xhtml:div>\n                            <xhtml:br/>\n                            If (Bus_transaction[15:14] == \"01\") \n                            <xhtml:br/>\n                            <xhtml:div style=\"margin-left:1em;\">\n                                Security_Identifier == \"1\"\n                            </xhtml:div>\n                            <xhtml:br/>\n                            If (Bus_transaction[15:14] == \"10\") \n                            <xhtml:br/>\n                            <xhtml:div style=\"margin-left:1em;\">\n                                Security_Identifier == \"2\"\n                            </xhtml:div>\n                            <xhtml:br/>\n                            If (Bus_transaction[15:14] == \"11\") \n                            <xhtml:br/>\n                            <xhtml:div style=\"margin-left:1em;\">\n                                Security_Identifier == \"3\"\n                            </xhtml:div>\n                        </xhtml:div>\n                    </Example_Code>\n\t\t\t\t"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna",
			"submission_organization": "Intel Corporation",
			"submission_date": "2020-04-29"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-07-20",
				"modification_comment": "updated Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-04-28",
				"modification_comment": "updated Applicable_Platforms"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-06-28",
				"modification_comment": "updated Applicable_Platforms"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-10-13",
				"modification_comment": "updated Demonstrative_Examples, Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		]
	}
}
