{
	"id": "834",
	"name": "Excessive Iteration",
	"abstraction": "Class",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.",
	"extended_description": "If the iteration can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory. In many cases, a loop does not need to be infinite in order to cause enough resource consumption to adversely affect the product or its host system; it depends on the amount of resources consumed per iteration.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "691",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {},
	"common_consequences": [
		{
			"scope": [
				"Availability"
			],
			"impact": [
				"DoS: Resource Consumption (CPU)",
				"DoS: Resource Consumption (Memory)",
				"DoS: Amplification",
				"DoS: Crash, Exit, or Restart"
			],
			"note": "Excessive looping will cause unexpected consumption of resources, such as CPU cycles or memory. The product's operation may slow down, or cause a long time to respond. If limited resources such as memory are consumed for each iteration, the loop may eventually cause a crash or program exit due to exhaustion of resources, such as an out-of-memory error."
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-204",
			"text": "\n             <Intro_Text>In this example a mistake exists in the code where the exit condition contained in flg is never called. This results in the function calling itself over and over again until the stack is exhausted.\n             </Intro_Text>\n             <Example_Code Nature=\"Bad\" Language=\"C\">\n\t       void do_something_recursive (int flg)<xhtml:br/>\n\t       {<xhtml:br/>\n\t       <xhtml:div style=\"margin-left:1em;\">\n\t\t ... // Do some real work here, but the value of flg is unmodified<xhtml:br/>\n\t\t if (flg) { do_something_recursive (flg); }    // flg is never modified so it is always TRUE - this call will continue until the stack explodes<xhtml:br/>\n\t       </xhtml:div>\n\t       }<xhtml:br/>\n\t       int flag = 1; // Set to TRUE<xhtml:br/>\n\t       do_something_recursive (flag);\n             </Example_Code>\n             <Body_Text>Note that the only difference between the Good and Bad examples is that the recursion flag will change value and cause the recursive call to return.</Body_Text>\n             <Example_Code Nature=\"Good\" Language=\"C\">\n\t       void do_something_recursive (int flg)<xhtml:br/>\n\t       {<xhtml:br/>\n\t       <xhtml:div style=\"margin-left:1em;\">\n\t\t ... // Do some real work here<xhtml:br/>\n\t\t // Modify value of flg on done condition<xhtml:br/>\n\t\t if (flg) { do_something_recursive (flg); }    // returns when flg changes to 0<xhtml:br/>\n\t       </xhtml:div>\n\t       }<xhtml:br/>\n\t       int flag = 1; // Set to TRUE<xhtml:br/>\n\t       do_something_recursive (flag);<xhtml:br/>\n             </Example_Code>\n           "
		},
		{
			"demonstrative_example_id": "DX-205",
			"text": "\n             <Intro_Text>For this example, the method isReorderNeeded is part of a bookstore application that determines if a particular book needs to be reordered based on the current inventory count and the rate at which the book is being sold.</Intro_Text>\n             <Example_Code Nature=\"Bad\" Language=\"Java\">\n               <xhtml:div>public boolean isReorderNeeded(String bookISBN, int rateSold) {<xhtml:div style=\"margin-left:1em;\">\n               <xhtml:div>\n                 <xhtml:br/>boolean isReorder = false;<xhtml:br/>\n                 <xhtml:br/>int minimumCount = 10;<xhtml:br/>int days = 0;<xhtml:br/>\n                 <xhtml:br/>\n                 <xhtml:i>// get inventory count for book</xhtml:i>\n                 <xhtml:br/>int inventoryCount = inventory.getIventoryCount(bookISBN);<xhtml:br/>\n                 <xhtml:br/>\n                 <xhtml:i>// find number of days until inventory count reaches minimum</xhtml:i>\n                 <xhtml:br/>while (inventoryCount &gt; minimumCount) {<xhtml:div style=\"margin-left:1em;\">\n                 <xhtml:div>\n                   <xhtml:br/>inventoryCount = inventoryCount - rateSold;<xhtml:br/>days++;<xhtml:br/>\n                 </xhtml:div>\n                 </xhtml:div>}<xhtml:br/>\n                 <xhtml:br/>\n                 <xhtml:i>// if number of days within reorder timeframe</xhtml:i>\n                 <xhtml:br/>\n                 <xhtml:br/>\n                 <xhtml:i>// set reorder return boolean to true</xhtml:i>\n                 <xhtml:br/>if (days &gt; 0 &amp;&amp; days &lt; 5) {<xhtml:div style=\"margin-left:1em;\">isReorder = true;</xhtml:div>}<xhtml:br/>\n               <xhtml:br/>return isReorder;</xhtml:div>\n               </xhtml:div>}</xhtml:div>\n             </Example_Code>\n             <Body_Text>However, the while loop will become an infinite loop if the rateSold input parameter has a value of zero since the inventoryCount will never fall below the minimumCount. In this case the input parameter should be validated to ensure that a value of zero does not cause an infinite loop, as in the following code.</Body_Text>\n             <Example_Code Nature=\"Good\" Language=\"Java\">\n               <xhtml:div>public boolean isReorderNeeded(String bookISBN, int rateSold) {<xhtml:div style=\"margin-left:1em;\">\n               <xhtml:div>...<xhtml:br/>\n               <xhtml:br/>\n               <xhtml:i>// validate rateSold variable</xhtml:i>\n               <xhtml:br/>if (rateSold &lt; 1) {<xhtml:div style=\"margin-left:1em;\">return isReorder;</xhtml:div>}<xhtml:br/>\n               <xhtml:br/>...</xhtml:div>\n               </xhtml:div>}</xhtml:div>\n             </Example_Code>\n           "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2011-1027",
			"description": "Chain: off-by-one error (CWE-193) leads to infinite loop (CWE-835) using invalid hex-encoded characters.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2011-1027"
		},
		{
			"reference": "CVE-2006-6499",
			"description": "Chain: web browser crashes due to infinite loop - \"bad\n\t      looping logic [that relies on] floating point math [CWE-1339] to exit\n\t      the loop [CWE-835]\"",
			"link": "https://www.cve.org/CVERecord?id=CVE-2006-6499"
		}
	],
	"references": [
		{
			"section": "Chapter 7, \"Looping Constructs\", Page 327",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2011-03-22"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Detection_Factors"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-06-20",
				"modification_comment": "updated Relationships, Type"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-12-10",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-07-20",
				"modification_comment": "updated Observed_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Common_Consequences, Description, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-10-26",
				"modification_comment": "updated Observed_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2024-02-29",
				"modification_comment": "updated Demonstrative_Examples, Mapping_Notes"
			}
		]
	},
	"detection_methods": [
		{
			"method": "Dynamic Analysis with Manual Results Interpretation",
			"description": "\n                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>\n                  <xhtml:div style=\"margin-left:1em;\">\n                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>\n                        <xhtml:ul>\n                           <xhtml:li>Fuzz Tester</xhtml:li>\n                           <xhtml:li>Framework-based Fuzzer</xhtml:li>\n                           <xhtml:li>Forced Path Execution</xhtml:li>\n                        </xhtml:ul>\n                  </xhtml:div>\n               ",
			"effectiveness": "SOAR Partial"
		},
		{
			"method": "Manual Static Analysis - Source Code",
			"description": "\n                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>\n                  <xhtml:div style=\"margin-left:1em;\">\n                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>\n                        <xhtml:ul>\n                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>\n                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>\n                        </xhtml:ul>\n                  </xhtml:div>\n               ",
			"effectiveness": "SOAR Partial"
		},
		{
			"method": "Automated Static Analysis - Source Code",
			"description": "\n                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>\n                  <xhtml:div style=\"margin-left:1em;\">\n                     <xhtml:div>Highly cost effective:</xhtml:div>\n                        <xhtml:ul>\n                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>\n                        </xhtml:ul>\n                  </xhtml:div>\n               ",
			"effectiveness": "High"
		},
		{
			"method": "Architecture or Design Review",
			"description": "\n                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>\n                  <xhtml:div style=\"margin-left:1em;\">\n                     <xhtml:div>Highly cost effective:</xhtml:div>\n                        <xhtml:ul>\n                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>\n                        </xhtml:ul>\n                  </xhtml:div>\n               ",
			"effectiveness": "High"
		}
	]
}
