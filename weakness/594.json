{
	"id": "594",
	"name": "J2EE Framework: Saving Unserializable Objects to Disk",
	"abstraction": "Variant",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.",
	"extended_description": "In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "710",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"prevalence": "Undetermined",
				"name": "Java"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Integrity"
			],
			"impact": [
				"Modify Application Data"
			],
			"note": "Data represented by unserializable objects can be corrupted."
		},
		{
			"scope": [
				"Availability"
			],
			"impact": [
				"DoS: Crash, Exit, or Restart"
			],
			"note": "Non-serializability of objects can lead to system crash."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design",
				"Implementation"
			],
			"description": [
				"All objects that become part of session and application scope must implement the java.io.Serializable interface to ensure serializability of containing objects."
			]
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n               <Intro_Text>In the following Java example, a Customer Entity JavaBean provides access to customer information in a database for a business application. The Customer Entity JavaBean is used as a session scoped object to return customer information to a Session EJB.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>@Entity<xhtml:br/>public class Customer {<xhtml:br/>\n                     <xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>private String id;<xhtml:br/>private String firstName;<xhtml:br/>private String lastName;<xhtml:br/>private Address address;<xhtml:br/>\n                           <xhtml:br/>public Customer() {<xhtml:br/>}<xhtml:br/>\n                           <xhtml:br/>public Customer(String id, String firstName, String lastName) {...}<xhtml:br/>\n                           <xhtml:br/>@Id<xhtml:br/>public String getCustomerId() {...}<xhtml:br/>\n                           <xhtml:br/>public void setCustomerId(String id) {...}<xhtml:br/>\n                           <xhtml:br/>public String getFirstName() {...}<xhtml:br/>\n                           <xhtml:br/>public void setFirstName(String firstName) {...}<xhtml:br/>\n                           <xhtml:br/>public String getLastName() {...}<xhtml:br/>\n                           <xhtml:br/>public void setLastName(String lastName) {...}<xhtml:br/>\n                           <xhtml:br/>@OneToOne()<xhtml:br/>public Address getAddress() {...}<xhtml:br/>\n                           <xhtml:br/>public void setAddress(Address address) {...}</xhtml:div>\n                     </xhtml:div>\n                     <xhtml:br/>\n                     <xhtml:br/>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, the Customer Entity JavaBean is an unserialized object which can cause serialization failure and crash the application when the J2EE container attempts to write the object to the system. Session scoped objects must implement the Serializable interface to ensure that the objects serialize properly.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"Java\">\n                  <xhtml:div>public class Customer implements Serializable {...}</xhtml:div>\n               </Example_Code>\n            "
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Community",
			"submission_date": "2006-12-15",
			"submission_comment": "Submitted by members of the CWE community to extend early CWE versions"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Common_Consequences, Relationships, Other_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-02-16",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-06-23",
				"modification_comment": "updated Description, Other_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Weakness_Ordinalities"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		],
		"previous_entry_name": [
			{
				"text": "Persistence in J2EE Frameworks",
				"date": "2008-04-11"
			}
		]
	},
	"weakness_ordinalities": [
		{
			"ordinality": "Indirect"
		},
		{
			"ordinality": "Primary"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "Software Fault Patterns",
			"entry_name": "Glitch in computation",
			"entry_id": "SFP1"
		}
	]
}
