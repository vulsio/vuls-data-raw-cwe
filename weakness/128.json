{
	"id": "128",
	"name": "Wrap-around Error",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore \"wraps around\" to a very small, negative, or undefined value.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "682",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "CanPrecede",
			"cweid": "119",
			"view_id": "1000"
		},
		{
			"nature": "PeerOf",
			"cweid": "190",
			"view_id": "1000"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"prevalence": "Often",
				"name": "C"
			},
			{
				"prevalence": "Often",
				"name": "C++"
			}
		]
	},
	"background_details": [
		"Due to how addition is performed by computers, if a primitive is incremented past the maximum value possible for its storage space, the system will not recognize this, and therefore increment each bit as if it still had extra space. Because of how negative numbers are represented in binary, primitives interpreted as signed may \"wrap\" to very large negative values."
	],
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"likelihood_of_exploit": "Medium",
	"common_consequences": [
		{
			"scope": [
				"Availability"
			],
			"impact": [
				"DoS: Crash, Exit, or Restart",
				"DoS: Resource Consumption (CPU)",
				"DoS: Resource Consumption (Memory)",
				"DoS: Instability"
			],
			"note": "This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high."
		},
		{
			"scope": [
				"Integrity"
			],
			"impact": [
				"Modify Memory"
			],
			"note": "If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur."
		},
		{
			"scope": [
				"Confidentiality",
				"Availability",
				"Access Control"
			],
			"impact": [
				"Execute Unauthorized Code or Commands",
				"Bypass Protection Mechanism"
			],
			"note": "This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy."
		}
	],
	"potential_mitigations": [
		{
			"description": [
				"Requirements specification: The choice could be made to use a language that is not susceptible to these issues."
			]
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Provide clear upper and lower bounds on the scale of any protocols designed."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Perform validation on all incremented variables to ensure that they remain within reasonable bounds."
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-33",
			"text": "\n               <Intro_Text>The following image processing code allocates a table for images.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>img_t table_ptr; /*struct containing img data, 10kB each*/<xhtml:br/>int num_imgs;<xhtml:br/>...<xhtml:br/>num_imgs = get_num_imgs();<xhtml:br/>table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);<xhtml:br/>...</xhtml:div>\n               </Example_Code>\n               <Body_Text>This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow (CWE-190). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems (CWE-119).</Body_Text>\n            "
		}
	],
	"references": [
		{
			"section": "\"Sin 5: Buffer Overruns.\" Page 89",
			"reference_id": "REF-44",
			"author": [
				"Michael Howard",
				"David LeBlanc",
				"John Viega"
			],
			"title": "24 Deadly Sins of Software Security",
			"publication_year": "2010",
			"publication": "McGraw-Hill"
		},
		{
			"section": "Chapter 6, \"Signed Integer Boundaries\", Page 220",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		},
		{
			"reference_id": "REF-18",
			"author": [
				"Secure Software, Inc."
			],
			"title": "The CLASP Application Security Process",
			"url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
			"publication_year": "2005",
			"url_date": "2024-11-17"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CLASP",
			"submission_date": "2006-07-19"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Applicable_Platforms, Background_Details, Common_Consequences, Relationships, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-11-24",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-10-29",
				"modification_comment": "updated Common_Consequences, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-12-13",
				"modification_comment": "updated Background_Details"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-09-13",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Common_Consequences, Demonstrative_Examples, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-01-19",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Causal_Nature, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-03-15",
				"modification_comment": "updated Potential_Mitigations, References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		]
	},
	"weakness_ordinalities": [
		{
			"ordinality": "Primary"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "CLASP",
			"entry_name": "Wrap-around error"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Ensure that the arguments to calloc(), when multiplied, can be represented as a size_t",
			"entry_id": "MEM07-C"
		},
		{
			"taxonomy_name": "Software Fault Patterns",
			"entry_name": "Glitch in computation",
			"entry_id": "SFP1"
		}
	],
	"related_attack_patterns": [
		"92"
	],
	"notes": [
		{
			"type": "Relationship",
			"text": "The relationship between overflow and wrap-around needs to be examined more closely, since several entries (including CWE-190) are closely related."
		}
	]
}
