{
  "id": "328",
  "name": "Use of Weak Hash",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).",
  "extended_description": "\n\t   <xhtml:p>A hash function is defined as an algorithm that maps arbitrarily sized data into a fixed-sized digest (output) such that the following properties hold:</xhtml:p>\n\t   <xhtml:ul>\n\t     <xhtml:li>1. The algorithm is not invertible (also called \"one-way\" or \"not reversible\")</xhtml:li>\n\t     <xhtml:li>2. The algorithm is deterministic; the same input produces the same digest every time</xhtml:li>\n\t   </xhtml:ul>\n\t   <xhtml:p>\n\t     Building on this definition, a cryptographic hash function must also ensure that a malicious actor cannot leverage the hash function to have a reasonable chance of success at determining any of the following:</xhtml:p>\n\t   <xhtml:ul>\n\t     <xhtml:li>1. the original input (preimage attack), given only the digest</xhtml:li>\n\t     <xhtml:li>2. another input that can produce the same digest (2nd preimage attack), given the original input</xhtml:li>\n\t     <xhtml:li>3. a set of two or more inputs that evaluate to the same digest (birthday attack), given the actor can arbitrarily choose the inputs to be hashed and can do so a reasonable amount of times</xhtml:li>\n\t   </xhtml:ul>\n\t   <xhtml:p>What is regarded as \"reasonable\" varies by context and threat model, but in general, \"reasonable\" could cover any attack that is more efficient than brute force (i.e., on average, attempting half of all possible combinations). Note that some attacks might be more efficient than brute force but are still not regarded as achievable in the real world.</xhtml:p>\n\t   <xhtml:p>Any algorithm does not meet the above conditions will generally be considered weak for general use in hashing.</xhtml:p>\n\t   <xhtml:p>In addition to algorithmic weaknesses, a hash function can be made weak by using the hash in a security context that breaks its security guarantees. For example, using a hash function without a salt for storing passwords (that are sufficiently short) could enable an adversary to create a \"rainbow table\" [REF-637] to recover the password under certain conditions; this attack works against such hash functions as MD5, SHA-1, and SHA-2.</xhtml:p>\n\t ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "326",
      "view_id": "1000"
    },
    {
      "nature": "ChildOf",
      "cweid": "327",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Not Language-Specific",
        "prevalence": "Undetermined"
      }
    ],
    "technology": [
      {
        "class": "ICS/OT",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design",
      "note": [
        "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."
      ]
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Access Control"
      ],
      "impact": [
        "Bypass Protection Mechanism"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "mitigation_id": "MIT-51",
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "\n                  <xhtml:p>Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.</xhtml:p>\n                  <xhtml:p>Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.</xhtml:p>\n                  <xhtml:p>Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.</xhtml:p>\n               "
      ],
      "effectiveness": "High"
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-101",
      "text": "\n               <Intro_Text>In both of these examples, a user is logged in if their given password matches a stored password:</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>unsigned char *check_passwd(char *plaintext) {<xhtml:div style=\"margin-left:1em;\">ctext = simple_digest(\"sha1\",plaintext,strlen(plaintext), ... );<xhtml:br/>\n                        <xhtml:i>//Login if hash matches stored hash</xhtml:i>\n                        <xhtml:br/>if (equal(ctext, secret_password())) {<xhtml:div style=\"margin-left:1em;\">login_user();</xhtml:div>}</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>String plainText = new String(plainTextIn);<xhtml:br/>MessageDigest encer = MessageDigest.getInstance(\"SHA\");<xhtml:br/>encer.update(plainTextIn);<xhtml:br/>byte[] digest = password.digest();<xhtml:br/>\n                     <xhtml:i>//Login if hash matches stored hash</xhtml:i>\n                     <xhtml:br/>if (equal(digest,secret_password())) {<xhtml:div style=\"margin-left:1em;\">login_user();</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>This code relies exclusively on a password mechanism (CWE-309) using only one factor of authentication (CWE-308). If an attacker can steal or guess a user's password, they are given full access to their account. Note this code also uses SHA-1, which is a weak hash (CWE-328).  It also does not use a salt (CWE-759).</Body_Text>\n            "
    },
    {
      "demonstrative_example_id": "DX-153",
      "text": "\n\t            <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were \"insecure by design\" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>\n\t            <Body_Text>At least one OT product used weak hashes.</Body_Text>\n\t         "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2022-30320",
      "description": "Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2022-30320"
    },
    {
      "reference": "CVE-2005-4900",
      "description": "SHA-1 algorithm is not collision-resistant.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2005-4900"
    },
    {
      "reference": "CVE-2020-25685",
      "description": "DNS product uses a weak hash (CRC32 or SHA-1) of the query name, allowing attacker to forge responses by computing domain names with the same hash.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2020-25685"
    },
    {
      "reference": "CVE-2012-6707",
      "description": "blogging product uses MD5-based algorithm for passwords.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2012-6707"
    },
    {
      "reference": "CVE-2019-14855",
      "description": "forging of certificate signatures using SHA-1 collisions.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2019-14855"
    },
    {
      "reference": "CVE-2017-15999",
      "description": "mobile app for backup sends SHA-1 hash of password in cleartext.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2017-15999"
    },
    {
      "reference": "CVE-2006-4068",
      "description": "Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2006-4068"
    }
  ],
  "references": [
    {
      "reference_id": "REF-289",
      "author": [
        "Alexander Sotirov et al."
      ],
      "title": "MD5 considered harmful today",
      "url": "http://www.phreedom.org/research/rogue-ca/",
      "url_date": "2023-04-07"
    },
    {
      "section": "Chapter 2, \"Common Vulnerabilities of Integrity\", Page 47",
      "reference_id": "REF-62",
      "author": [
        "Mark Dowd",
        "John McDonald",
        "Justin Schuh"
      ],
      "title": "The Art of Software Security Assessment",
      "publication_year": "2006",
      "publisher": "Addison Wesley",
      "edition": "1st Edition"
    },
    {
      "reference_id": "REF-291",
      "author": [
        "Johnny Shelley"
      ],
      "title": "bcrypt",
      "url": "http://bcrypt.sourceforge.net/"
    },
    {
      "reference_id": "REF-292",
      "author": [
        "Colin Percival"
      ],
      "title": "Tarsnap - The scrypt key derivation function and encryption utility",
      "url": "http://www.tarsnap.com/scrypt.html"
    },
    {
      "section": "5.2 PBKDF2",
      "reference_id": "REF-293",
      "author": [
        "B. Kaliski"
      ],
      "title": "RFC2898 - PKCS #5: Password-Based Cryptography Specification Version 2.0",
      "url": "https://www.rfc-editor.org/rfc/rfc2898",
      "publication_year": "2000",
      "url_date": "2023-04-07"
    },
    {
      "reference_id": "REF-294",
      "author": [
        "Coda Hale"
      ],
      "title": "How To Safely Store A Password",
      "url": "https://codahale.com/how-to-safely-store-a-password/",
      "publication_year": "2010",
      "publication_month": "--01",
      "publication_day": "---31",
      "url_date": "2023-04-07"
    },
    {
      "reference_id": "REF-295",
      "author": [
        "Brian Krebs"
      ],
      "title": "How Companies Can Beef Up Password Security (interview with Thomas H. Ptacek)",
      "url": "https://krebsonsecurity.com/2012/06/how-companies-can-beef-up-password-security/",
      "publication_year": "2012",
      "publication_month": "--06",
      "publication_day": "---11",
      "url_date": "2023-04-07"
    },
    {
      "reference_id": "REF-296",
      "author": [
        "Solar Designer"
      ],
      "title": "Password security: past, present, future",
      "url": "https://www.openwall.com/presentations/PHDays2012-Password-Security/",
      "publication_year": "2012",
      "url_date": "2023-04-07"
    },
    {
      "reference_id": "REF-297",
      "author": [
        "Troy Hunt"
      ],
      "title": "Our password hashing has no clothes",
      "url": "https://www.troyhunt.com/our-password-hashing-has-no-clothes/",
      "publication_year": "2012",
      "publication_month": "--06",
      "publication_day": "---26",
      "url_date": "2023-04-07"
    },
    {
      "reference_id": "REF-298",
      "author": [
        "Joshbw"
      ],
      "title": "Should we really use bcrypt/scrypt?",
      "url": "https://web.archive.org/web/20120629144851/http://www.analyticalengine.net/2012/06/should-we-really-use-bcryptscrypt/",
      "publication_year": "2012",
      "publication_month": "--06",
      "publication_day": "---08",
      "url_date": "2023-04-07"
    },
    {
      "reference_id": "REF-637",
      "title": "Rainbow table",
      "url": "https://en.wikipedia.org/wiki/Rainbow_table",
      "publication_year": "2009",
      "publication_month": "--03",
      "publication_day": "---03",
      "publisher": "Wikipedia",
      "url_date": "2023-04-07"
    },
    {
      "reference_id": "REF-1243",
      "author": [
        "Bruce Schneier"
      ],
      "title": "Cryptanalysis of SHA-1",
      "url": "https://www.schneier.com/blog/archives/2005/02/cryptanalysis_o.html",
      "publication_year": "2005",
      "publication_month": "--02",
      "publication_day": "---18",
      "url_date": "2021-10-25"
    },
    {
      "reference_id": "REF-1244",
      "author": [
        "Dan Goodin"
      ],
      "title": "At death's door for years, widely used SHA1 function is now dead",
      "url": "https://arstechnica.com/information-technology/2017/02/at-deaths-door-for-years-widely-used-sha1-function-is-now-dead/",
      "publication_year": "2017",
      "publication_month": "--02",
      "publication_day": "---23",
      "publisher": "Ars Technica",
      "url_date": "2021-10-25"
    },
    {
      "reference_id": "REF-1283",
      "author": [
        "Forescout Vedere Labs"
      ],
      "title": "OT:ICEFALL: The legacy of \"insecure by design\" and its implications for certifications and risk management",
      "url": "https://www.forescout.com/resources/ot-icefall-report/",
      "publication_year": "2022",
      "publication_month": "--06",
      "publication_day": "---20"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "PLOVER",
      "submission_date": "2006-07-19"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08",
        "modification_comment": "updated Relationships, Observed_Example, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-10-14",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-01-12",
        "modification_comment": "updated Description, References"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-10-29",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11",
        "modification_comment": "updated References, Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-10-30",
        "modification_comment": "updated Demonstrative_Examples, Potential_Mitigations, References"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-02-18",
        "modification_comment": "updated Potential_Mitigations, References"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-06-23",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08",
        "modification_comment": "updated Applicable_Platforms, Modes_of_Introduction, References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2018-03-27",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28",
        "modification_comment": "updated Description, Maintenance_Notes, Name, Observed_Examples, References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-10-13",
        "modification_comment": "updated Demonstrative_Examples, Observed_Examples, References"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-01-31",
        "modification_comment": "updated Applicable_Platforms"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Detection_Factors, References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes, Relationships"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Reversible One-Way Hash",
        "date": "2021-10-28"
      }
    ]
  },
  "detection_methods": [
    {
      "detection_method_id": "DM-14",
      "method": "Automated Static Analysis",
      "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "effectiveness": "High"
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "PLOVER",
      "entry_name": "Reversible One-Way Hash"
    }
  ],
  "related_attack_patterns": [
    "461",
    "68"
  ],
  "notes": [
    {
      "type": "Maintenance",
      "text": "Since CWE 4.4, various cryptography-related entries including CWE-328 have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing."
    }
  ]
}
