{
	"id": "116",
	"name": "Improper Encoding or Escaping of Output",
	"abstraction": "Class",
	"structure": "Simple",
	"status": "Draft",
	"description": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
	"extended_description": "\n            <xhtml:p>Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead.</xhtml:p>\n            <xhtml:p>Most products follow a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, \"GET /index.html HTTP/1.1\" is a structured message containing a command (\"GET\") with a single argument (\"/index.html\") and metadata about which protocol version is being used (\"HTTP/1.1\").</xhtml:p>\n            <xhtml:p>If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly.</xhtml:p>\n         ",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "707",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "CanPrecede",
			"cweid": "74",
			"view_id": "1000"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Often"
			}
		],
		"technology": [
			{
				"prevalence": "Often",
				"name": "Database Server"
			},
			{
				"prevalence": "Often",
				"name": "Web Server"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		},
		{
			"phase": "Operation"
		}
	],
	"likelihood_of_exploit": "High",
	"common_consequences": [
		{
			"scope": [
				"Integrity"
			],
			"impact": [
				"Modify Application Data"
			],
			"note": "The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted."
		},
		{
			"scope": [
				"Integrity",
				"Confidentiality",
				"Availability",
				"Access Control"
			],
			"impact": [
				"Execute Unauthorized Code or Commands"
			],
			"note": "The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted."
		},
		{
			"scope": [
				"Confidentiality"
			],
			"impact": [
				"Bypass Protection Mechanism"
			],
			"note": "The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted."
		}
	],
	"potential_mitigations": [
		{
			"mitigation_id": "MIT-4.3",
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"\n                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>\n                  <xhtml:p>For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.</xhtml:p>\n                  <xhtml:p>Alternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability.</xhtml:p>\n               "
			],
			"strategy": "Libraries or Frameworks"
		},
		{
			"mitigation_id": "MIT-27",
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"\n                  <xhtml:p>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</xhtml:p>\n                  <xhtml:p>For example, stored procedures can enforce database query structure and reduce the likelihood of SQL injection.</xhtml:p>\n               "
			],
			"strategy": "Parameterization"
		},
		{
			"phase": [
				"Architecture and Design",
				"Implementation"
			],
			"description": [
				"Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies."
			]
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"In some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict allowlist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input."
			]
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20)."
			]
		},
		{
			"phase": [
				"Requirements"
			],
			"description": [
				"Fully specify which encodings are required by components that will be communicating with each other."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so."
			]
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n               <Intro_Text>This code displays an email address that was submitted as part of a form.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"JSP\">\n                  <xhtml:div>&lt;% String email = request.getParameter(\"email\"); %&gt;<xhtml:br/>...<xhtml:br/>Email Address: &lt;%= email %&gt;</xhtml:div>\n               </Example_Code>\n               <Body_Text>The value read from the form parameter is reflected back to the client browser without having been encoded prior to output, allowing various XSS attacks (CWE-79).</Body_Text>\n            "
		},
		{
			"text": "\n               <Intro_Text>Consider a chat application in which a front-end web application communicates with a back-end server. The back-end is legacy code that does not perform authentication or authorization, so the front-end must implement it. The chat protocol supports two commands, SAY and BAN, although only administrators can use the BAN command. Each argument must be separated by a single space. The raw inputs are URL-encoded. The messaging protocol allows multiple commands to be specified on the same line if they are separated by a \"|\" character.</Intro_Text>\n               <Body_Text>First let's look at the back end command processor code</Body_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Perl\">\n                  <xhtml:div>$inputString = readLineFromFileHandle($serverFH);<xhtml:br/>\n                     <xhtml:br/>\n                     <xhtml:i># generate an array of strings separated by the \"|\" character.</xhtml:i>\n                     <xhtml:br/>@commands = split(/\\|/, $inputString);<xhtml:br/>\n                     <xhtml:br/>foreach $cmd (@commands) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:br/>\n                        <xhtml:i># separate the operator from its arguments based on a single whitespace</xhtml:i>\n                        <xhtml:br/>($operator, $args) = split(/ /, $cmd, 2);<xhtml:br/>\n                        <xhtml:br/>$args = UrlDecode($args);<xhtml:br/>if ($operator eq \"BAN\") {<xhtml:div style=\"margin-left:1em;\">ExecuteBan($args);</xhtml:div>}<xhtml:br/>elsif ($operator eq \"SAY\") {<xhtml:div style=\"margin-left:1em;\">ExecuteSay($args);</xhtml:div>}</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>The front end web application receives a command, encodes it for sending to the server, performs the authorization check, and sends the command to the server.</Body_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Perl\">\n                  <xhtml:div>$inputString = GetUntrustedArgument(\"command\");<xhtml:br/>($cmd, $argstr) = split(/\\s+/, $inputString, 2);<xhtml:br/>\n                     <xhtml:br/>\n                     <xhtml:i># removes extra whitespace and also changes CRLF's to spaces</xhtml:i>\n                     <xhtml:br/>$argstr =~ s/\\s+/ /gs;<xhtml:br/>\n                     <xhtml:br/>$argstr = UrlEncode($argstr);<xhtml:br/>if (($cmd eq \"BAN\") &amp;&amp; (! IsAdministrator($username))) {<xhtml:div style=\"margin-left:1em;\">die \"Error: you are not the admin.\\n\";</xhtml:div>}<xhtml:br/>\n                     <xhtml:br/>\n                     <xhtml:i># communicate with file server using a file handle</xhtml:i>\n                     <xhtml:br/>$fh = GetServerFileHandle(\"myserver\");<xhtml:br/>\n                     <xhtml:br/>print $fh \"$cmd $argstr\\n\";</xhtml:div>\n               </Example_Code>\n               <Body_Text>It is clear that, while the protocol and back-end allow multiple commands to be sent in a single request, the front end only intends to send a single command. However, the UrlEncode function could leave the \"|\" character intact. If an attacker provides:</Body_Text>\n               <Example_Code Nature=\"Attack\">\n                  <xhtml:div>SAY hello world|BAN user12</xhtml:div>\n               </Example_Code>\n               <Body_Text>then the front end will see this is a \"SAY\" command, and the $argstr will look like \"hello world | BAN user12\". Since the command is \"SAY\", the check for the \"BAN\" command will fail, and the front end will send the URL-encoded command to the back end:</Body_Text>\n               <Example_Code Nature=\"Result\">\n                  <xhtml:div>SAY hello%20world|BAN%20user12</xhtml:div>\n               </Example_Code>\n               <Body_Text>The back end, however, will treat these as two separate commands:</Body_Text>\n               <Example_Code Nature=\"Result\">\n                  <xhtml:div>SAY hello world<xhtml:br/>BAN user12</xhtml:div>\n               </Example_Code>\n               <Body_Text>Notice, however, that if the front end properly encodes the \"|\" with \"%7C\", then the back end will only process a single command.</Body_Text>\n            "
		},
		{
			"text": "\n               <Intro_Text>This example takes user input, passes it through an encoding scheme and then creates a directory specified by the user.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Perl\">\n                  <xhtml:div>sub GetUntrustedInput {<xhtml:div style=\"margin-left:1em;\">return($ARGV[0]);</xhtml:div>}<xhtml:br/>\n                     <xhtml:br/>sub encode {<xhtml:div style=\"margin-left:1em;\">my($str) = @_;<xhtml:br/>$str =~ s/\\&amp;/\\&amp;amp;/gs;<xhtml:br/>$str =~ s/\\\"/\\&amp;quot;/gs;<xhtml:br/>$str =~ s/\\'/\\&amp;apos;/gs;<xhtml:br/>$str =~ s/\\&lt;/\\&amp;lt;/gs;<xhtml:br/>$str =~ s/\\&gt;/\\&amp;gt;/gs;<xhtml:br/>return($str);</xhtml:div>}<xhtml:br/>\n                     <xhtml:br/>sub doit {<xhtml:div style=\"margin-left:1em;\">my $uname = encode(GetUntrustedInput(\"username\"));<xhtml:br/>print \"&lt;b&gt;Welcome, $uname!&lt;/b&gt;&lt;p&gt;\\n\";<xhtml:br/>system(\"cd /home/$uname; /bin/ls -l\");<xhtml:br/>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>The programmer attempts to encode dangerous characters, however the denylist for encoding is incomplete (CWE-184) and an attacker can still pass a semicolon, resulting in a chain with command injection (CWE-77).</Body_Text>\n               <Body_Text>Additionally, the encoding routine is used inappropriately with command execution. An attacker doesn't even need to insert their own semicolon. The attacker can instead leverage the encoding routine to provide the semicolon to separate the commands. If an attacker supplies a string of the form:</Body_Text>\n               <Example_Code Nature=\"Attack\">\n                  <xhtml:div>' pwd</xhtml:div>\n               </Example_Code>\n               <Body_Text>then the program will encode the apostrophe and insert the semicolon, which functions as a command separator when passed to the system function. This allows the attacker to complete the command injection.</Body_Text>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2021-41232",
			"description": "Chain: authentication routine in Go-based agile development product does not escape user name (CWE-116), allowing LDAP injection (CWE-90)",
			"link": "https://www.cve.org/CVERecord?id=CVE-2021-41232"
		},
		{
			"reference": "CVE-2008-4636",
			"description": "OS command injection in backup software using shell metacharacters in a filename; correct behavior would require that this filename could not be changed.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2008-4636"
		},
		{
			"reference": "CVE-2008-0769",
			"description": "Web application does not set the charset when sending a page to a browser, allowing for XSS exploitation when a browser chooses an unexpected encoding.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2008-0769"
		},
		{
			"reference": "CVE-2008-0005",
			"description": "Program does not set the charset when sending a page to a browser, allowing for XSS exploitation when a browser chooses an unexpected encoding.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2008-0005"
		},
		{
			"reference": "CVE-2008-5573",
			"description": "SQL injection via password parameter; a strong password might contain \"&\"",
			"link": "https://www.cve.org/CVERecord?id=CVE-2008-5573"
		},
		{
			"reference": "CVE-2008-3773",
			"description": "Cross-site scripting in chat application via a message subject, which normally might contain \"&\" and other XSS-related characters.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2008-3773"
		},
		{
			"reference": "CVE-2008-0757",
			"description": "Cross-site scripting in chat application via a message, which normally might be allowed to contain arbitrary content.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2008-0757"
		}
	],
	"references": [
		{
			"reference_id": "REF-45",
			"author": [
				"OWASP"
			],
			"title": "OWASP Enterprise Security API (ESAPI) Project",
			"url": "http://www.owasp.org/index.php/ESAPI"
		},
		{
			"reference_id": "REF-46",
			"author": [
				"Joshbw"
			],
			"title": "Output Sanitization",
			"url": "https://web.archive.org/web/20081208054333/http://analyticalengine.net/archives/58",
			"publication_year": "2008",
			"publication_month": "--09",
			"publication_day": "---18",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-47",
			"author": [
				"Niyaz PK"
			],
			"title": "Sanitizing user data: How and where to do it",
			"url": "https://web.archive.org/web/20090105222005/http://www.diovo.com/2008/09/sanitizing-user-data-how-and-where-to-do-it/",
			"publication_year": "2008",
			"publication_month": "--09",
			"publication_day": "---11",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-48",
			"author": [
				"Jeremiah Grossman"
			],
			"title": "Input validation or output filtering, which is better?",
			"url": "https://blog.jeremiahgrossman.com/2007/01/input-validation-or-output-filtering.html",
			"publication_year": "2007",
			"publication_month": "--01",
			"publication_day": "---30",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-49",
			"author": [
				"Jim Manico"
			],
			"title": "Input Validation - Not That Important",
			"url": "https://manicode.blogspot.com/2008/08/input-validation-not-that-important.html",
			"publication_year": "2008",
			"publication_month": "--08",
			"publication_day": "---10",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-50",
			"author": [
				"Michael Eddington"
			],
			"title": "Preventing XSS with Correct Output Encoding",
			"url": "http://phed.org/2008/05/19/preventing-xss-with-correct-output-encoding/"
		},
		{
			"section": "Chapter 11, \"Canonical Representation Issues\" Page 363",
			"reference_id": "REF-7",
			"author": [
				"Michael Howard",
				"David LeBlanc"
			],
			"title": "Writing Secure Code",
			"url": "https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223",
			"publication_year": "2002",
			"publication_month": "--12",
			"publication_day": "---04",
			"publisher": "Microsoft Press",
			"edition": "2nd Edition"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Community",
			"submission_date": "2006-07-19",
			"submission_comment": "Submitted by members of the CWE community to extend early CWE versions"
		},
		"modification": [
			{
				"modification_name": "Sean Eidemiller",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "added/updated demonstrative examples"
			},
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Name, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-01-12",
				"modification_comment": "updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships, Research_Gaps, Terminology_Notes, Theoretical_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-03-10",
				"modification_comment": "updated Description, Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-05-27",
				"modification_comment": "updated Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-07-27",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-10-29",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-12-28",
				"modification_comment": "updated Demonstrative_Examples, Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-02-16",
				"modification_comment": "updated Detection_Factors, Potential_Mitigations, References, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-04-05",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-06-21",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-03-29",
				"modification_comment": "updated Relationship_Notes, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-09-13",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-06-23",
				"modification_comment": "updated References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Demonstrative_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2015-12-07",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-01-19",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-05-03",
				"modification_comment": "updated Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Likelihood_of_Exploit, References, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2018-03-27",
				"modification_comment": "updated References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-06-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-06-25",
				"modification_comment": "updated Applicable_Platforms, Demonstrative_Examples, Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-03-15",
				"modification_comment": "updated Relationships, Terminology_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-10-13",
				"modification_comment": "updated Observed_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated References, Relationships, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		],
		"previous_entry_name": [
			{
				"text": "Output Validation",
				"date": "2008-04-11"
			},
			{
				"text": "Incorrect Output Sanitization",
				"date": "2008-09-09"
			},
			{
				"text": "Insufficient Output Sanitization",
				"date": "2009-01-12"
			}
		]
	},
	"alternate_terms": [
		{
			"term": "Output Sanitization"
		},
		{
			"term": "Output Validation"
		},
		{
			"term": "Output Encoding"
		}
	],
	"detection_methods": [
		{
			"detection_method_id": "DM-1",
			"method": "Automated Static Analysis",
			"description": "This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.",
			"effectiveness": "Moderate",
			"effectiveness_notes": "This is not a perfect solution, since 100% accuracy and coverage are not feasible."
		},
		{
			"detection_method_id": "DM-2",
			"method": "Automated Dynamic Analysis",
			"description": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results."
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "WASC",
			"entry_name": "Improper Output Handling",
			"entry_id": "22"
		},
		{
			"taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
			"entry_name": "Sanitize untrusted data passed across a trust boundary",
			"entry_id": "IDS00-J",
			"mapping_fit": "Exact"
		},
		{
			"taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
			"entry_name": "Use a subset of ASCII for file and path names",
			"entry_id": "IDS05-J"
		},
		{
			"taxonomy_name": "SEI CERT Oracle Coding Standard for Java",
			"entry_name": "Prevent SQL injection",
			"entry_id": "IDS00-J",
			"mapping_fit": "Imprecise"
		},
		{
			"taxonomy_name": "SEI CERT Perl Coding Standard",
			"entry_name": "Sanitize untrusted data passed across a trust boundary",
			"entry_id": "IDS33-PL",
			"mapping_fit": "Exact"
		}
	],
	"related_attack_patterns": [
		"104",
		"73",
		"81",
		"85"
	],
	"notes": [
		{
			"type": "Relationship",
			"text": "This weakness is primary to all weaknesses related to injection (CWE-74) since the inherent nature of injection involves the violation of structured messages."
		},
		{
			"type": "Relationship",
			"text": "\n               <xhtml:p>CWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks.</xhtml:p>\n               <xhtml:p>However, input validation is not always sufficient, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a last name is inserted into a query. The name \"O'Reilly\" would likely pass the validation step since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise neutralized. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.</xhtml:p>\n            "
		},
		{
			"type": "Terminology",
			"text": "The usage of the \"encoding\" and \"escaping\" terms varies widely. For example, in some programming languages, the terms are used interchangeably, while other languages provide APIs that use both terms for different tasks. This overlapping usage extends to the Web, such as the \"escape\" JavaScript function whose purpose is stated to be encoding. The concepts of encoding and escaping predate the Web by decades. Given such a context, it is difficult for CWE to adopt a consistent vocabulary that will not be misinterpreted by some constituency."
		},
		{
			"type": "Theoretical",
			"text": "This is a data/directive boundary error in which data boundaries are not sufficiently enforced before it is sent to a different control sphere."
		},
		{
			"type": "Research Gap",
			"text": "While many published vulnerabilities are related to insufficient output encoding, there is such an emphasis on input validation as a protection mechanism that the underlying causes are rarely described. Within CVE, the focus is primarily on well-understood issues like cross-site scripting and SQL injection. It is likely that this weakness frequently occurs in custom protocols that support multiple encodings, which are not necessarily detectable with automated techniques."
		}
	]
}
