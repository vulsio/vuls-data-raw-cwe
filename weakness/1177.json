{
	"id": "1177",
	"name": "Use of Prohibited Code",
	"abstraction": "Class",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The product uses a function, library, or third party component\n\t     that has been explicitly prohibited, whether by the developer or\n\t     the customer.",
	"extended_description": "<xhtml:p>The developer - or customers - may wish to restrict or eliminate use of a function, library, or third party component for any number of reasons, including real or suspected vulnerabilities; difficulty to use securely; export controls or license requirements; obsolete or poorly-maintained code; internal code being scheduled for deprecation; etc.</xhtml:p>\n\t <xhtml:p>To reduce risk of vulnerabilities, the developer might maintain a list of \"banned\" functions that programmers must avoid using because the functions are difficult or impossible to use securely.  This issue can also make the product more costly and difficult to maintain.</xhtml:p>\n\t ",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "710",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Other"
			],
			"impact": [
				"Reduce Maintainability"
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-5",
			"text": "\n               <Intro_Text>The code below calls the gets() function to read in data from the command line.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>\n                     <xhtml:div style=\"margin-left:1em;\">char buf[24];<xhtml:br/>printf(\"Please enter your name and press &lt;Enter&gt;\\n\");<xhtml:br/>gets(buf);<xhtml:br/>...</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, gets() is inherently unsafe, because it copies all input from STDIN to the buffer without checking size. This allows the user to provide a string that is larger than the buffer size, resulting in an overflow condition.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-6",
			"text": "\n               <Intro_Text>The following code attempts to create a local copy of a buffer to perform some manipulations to the data.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>void manipulate_string(char * string){<xhtml:div style=\"margin-left:1em;\">char buf[24];<xhtml:br/>strcpy(buf, string);<xhtml:br/>...</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, the programmer does not ensure that the size of the data pointed to by string will fit in the local buffer and copies the data with the potentially dangerous strcpy() function. This may result in a buffer overflow condition if an attacker can influence the contents of the string parameter.</Body_Text>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2007-1470",
			"description": "Library has multiple buffer overflows using sprintf() and strcpy()",
			"link": "https://www.cve.org/CVERecord?id=CVE-2007-1470"
		},
		{
			"reference": "CVE-2007-4004",
			"description": "FTP client uses inherently insecure gets() function and is setuid root on some systems, allowing buffer overflow",
			"link": "https://www.cve.org/CVERecord?id=CVE-2007-4004"
		}
	],
	"references": [
		{
			"reference_id": "REF-1009",
			"author": [
				"Tim Rains"
			],
			"title": "Microsoft's Free Security Tools - banned.h",
			"url": "https://www.microsoft.com/en-us/security/blog/2012/08/30/microsofts-free-security-tools-banned-h/",
			"publication_year": "2012",
			"publication_month": "--08",
			"publication_day": "---30",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-1010",
			"author": [
				"Michael Howard"
			],
			"title": "Microsoft's Free Security Tools - banned.h",
			"url": "https://www.microsoft.com/en-us/security/blog/2012/08/30/microsofts-free-security-tools-banned-h/",
			"publication_year": "2011",
			"publication_month": "--06",
			"url_date": "2023-04-07"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2019-01-03"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated References, Relationships, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2024-02-29",
				"modification_comment": "updated Demonstrative_Examples, Observed_Examples"
			}
		]
	},
	"weakness_ordinalities": [
		{
			"ordinality": "Indirect"
		},
		{
			"ordinality": "Primary"
		}
	]
}
