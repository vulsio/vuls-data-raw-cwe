{
	"id": "758",
	"name": "Reliance on Undefined, Unspecified, or Implementation-Defined Behavior",
	"abstraction": "Class",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The product uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity.",
	"extended_description": "This can lead to resultant weaknesses when the required properties change, such as when the product is ported to a different platform or if an interaction error (CWE-435) occurs.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "710",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {},
	"common_consequences": [
		{
			"scope": [
				"Other"
			],
			"impact": [
				"Other"
			]
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2006-1902",
			"description": "Change in C compiler behavior causes resultant buffer overflows in programs that depend on behaviors that were undefined in the C standard.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2006-1902"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2009-03-03"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-01-19",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2018-03-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Relationships, Weakness_Ordinalities"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		]
	},
	"weakness_ordinalities": [
		{
			"ordinality": "Indirect"
		},
		{
			"ordinality": "Primary"
		}
	],
	"detection_methods": [
		{
			"detection_method_id": "DM-13",
			"method": "Fuzzing",
			"description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Ensure size arguments for variable length arrays are in a valid range",
			"entry_id": "ARR32-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Detect errors when converting a string to a number",
			"entry_id": "ERR34-C",
			"mapping_fit": "Imprecise"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not depend on the order of evaluation for side effects",
			"entry_id": "EXP30-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not read uninitialized memory",
			"entry_id": "EXP33-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not access a closed file",
			"entry_id": "FIO46-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not shift an expression by a negative number of bits or by greater than or equal  to the number of bits that exist in the operand",
			"entry_id": "INT34-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Converting a pointer to integer or integer to pointer",
			"entry_id": "INT36-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not access freed memory",
			"entry_id": "MEM30-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not introduce unnecessary platform dependencies",
			"entry_id": "MSC14-C"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not depend on undefined behavior",
			"entry_id": "MSC15-C"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Ensure that control never reaches the end of a non-void function",
			"entry_id": "MSC37-C",
			"mapping_fit": "CWE More Abstract"
		}
	]
}
