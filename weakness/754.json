{
	"id": "754",
	"name": "Improper Check for Unusual or Exceptional Conditions",
	"abstraction": "Class",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.",
	"extended_description": "\n            <xhtml:p>The programmer may assume that certain events or conditions will never occur or do not need to be worried about, such as low memory conditions, lack of access to resources due to restrictive permissions, or misbehaving clients or components. However, attackers may intentionally trigger these unusual conditions, thus violating the programmer's assumptions, possibly introducing instability, incorrect behavior, or a vulnerability.</xhtml:p>\n            <xhtml:p>Note that this entry is not exclusively about the use of exceptions and exception handling, which are mechanisms for both checking and handling unusual or unexpected conditions.</xhtml:p>\n         ",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "703",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"background_details": [
		"Many functions will return some value about the success of their actions. This will alert the program whether or not to handle any errors caused by that function."
	],
	"modes_of_introduction": [
		{
			"phase": "Implementation",
			"note": [
				"REALIZATION: This weakness is caused during implementation of an architectural security tactic."
			]
		}
	],
	"likelihood_of_exploit": "Medium",
	"common_consequences": [
		{
			"scope": [
				"Integrity",
				"Availability"
			],
			"impact": [
				"DoS: Crash, Exit, or Restart",
				"Unexpected State"
			],
			"note": "The data which were produced as a result of a function call could be in a bad state upon return. If the return value is not checked, then this bad data may be used in operations, possibly leading to a crash or other unintended behaviors."
		}
	],
	"potential_mitigations": [
		{
			"mitigation_id": "MIT-3",
			"phase": [
				"Requirements"
			],
			"description": [
				"\n                  <xhtml:p>Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>\n                  <xhtml:p>Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).</xhtml:p>\n               "
			],
			"strategy": "Language Selection"
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Check the results of all functions that return a value and verify that the value is expected."
			],
			"effectiveness": "High",
			"effectiveness_notes": "Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment."
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248)."
			],
			"effectiveness": "High",
			"effectiveness_notes": "Using specific exceptions, and ensuring that exceptions are checked, helps programmers to anticipate and appropriately handle many unusual events that could occur."
		},
		{
			"mitigation_id": "MIT-39",
			"phase": [
				"Implementation"
			],
			"description": [
				"\n                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.</xhtml:p>\n                  <xhtml:p>If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.</xhtml:p>\n\t\t  <xhtml:p>Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.</xhtml:p>\n\t\t  <xhtml:p>Exposing additional information to a potential attacker in the context of an exceptional condition can help the attacker determine what attack vectors are most likely to succeed beyond DoS.</xhtml:p>\n\t       "
			]
		},
		{
			"mitigation_id": "MIT-5",
			"phase": [
				"Implementation"
			],
			"description": [
				"\n                  <xhtml:p>Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>\n                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"</xhtml:p>\n                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>\n               "
			],
			"effectiveness_notes": "Performing extensive input validation does not help with handling unusual conditions, but it will minimize their occurrences and will make it more difficult for attackers to trigger them.",
			"strategy": "Input Validation"
		},
		{
			"mitigation_id": "MIT-38",
			"phase": [
				"Architecture and Design",
				"Implementation"
			],
			"description": [
				"If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery."
			]
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Use system limits, which should help to prevent resource exhaustion. However, the product should still handle low resource conditions since they may still occur."
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-7",
			"text": "\n               <Intro_Text>Consider the following code segment:</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>char buf[10], cp_buf[10];<xhtml:br/>fgets(buf, 10, stdin);<xhtml:br/>strcpy(cp_buf, buf);</xhtml:div>\n               </Example_Code>\n               <Body_Text>The programmer expects that when fgets() returns, buf will contain a null-terminated string of length 9 or less. But if an I/O error occurs, fgets() will not null-terminate buf. Furthermore, if the end of the file is reached before any characters are read, fgets() returns without writing anything to buf. In both of these situations, fgets() signals that something unusual has happened by returning NULL, but in this code, the warning will not be noticed. The lack of a null terminator in buf can result in a buffer overflow in the subsequent call to strcpy().</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-8",
			"text": "\n               <Intro_Text>The following code does not check to see if memory allocation succeeded before attempting to use the pointer returned by malloc().</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>buf = (char*) malloc(req_size);<xhtml:br/>strncpy(buf, xfer, req_size);</xhtml:div>\n               </Example_Code>\n               <Body_Text>The traditional defense of this coding error is: \"If my program runs out of memory, it will fail. It doesn't matter whether I handle the error or simply allow the program to die with a segmentation fault when it tries to dereference the null pointer.\" This argument ignores three important considerations:</Body_Text>\n               <Body_Text>\n                  <xhtml:ul>\n                     <xhtml:li>\n                        <xhtml:div>Depending upon the type and size of the application, it may be possible to free memory that is being used elsewhere so that execution can continue.</xhtml:div>\n                     </xhtml:li>\n                     <xhtml:li>\n                        <xhtml:div>It is impossible for the program to perform a graceful exit if required. If the program is performing an atomic operation, it can leave the system in an inconsistent state.</xhtml:div>\n                     </xhtml:li>\n                     <xhtml:li>\n                        <xhtml:div>The programmer has lost the opportunity to record diagnostic information. Did the call to malloc() fail because req_size was too large or because there were too many requests being handled at the same time? Or was it caused by a memory leak that has built up over time? Without handling the error, there is no way to know.</xhtml:div>\n                     </xhtml:li>\n                  </xhtml:ul>\n               </Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-9",
			"text": "\n               <Intro_Text>The following examples read a file into a byte array.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C#\">\n                  <xhtml:div>char[] byteArray = new char[1024];<xhtml:br/>for (IEnumerator i=users.GetEnumerator(); i.MoveNext() ;i.Current()) {<xhtml:div style=\"margin-left:1em;\">String userName = (String) i.Current();<xhtml:br/>String pFileName = PFILE_ROOT + \"/\" + userName;<xhtml:br/>StreamReader sr = new StreamReader(pFileName);<xhtml:br/>sr.Read(byteArray,0,1024);//the file is always 1k bytes<xhtml:br/>sr.Close();<xhtml:br/>processPFile(userName, byteArray);</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>FileInputStream fis;<xhtml:br/>byte[] byteArray = new byte[1024];<xhtml:br/>for (Iterator i=users.iterator(); i.hasNext();) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>String userName = (String) i.next();<xhtml:br/>String pFileName = PFILE_ROOT + \"/\" + userName;<xhtml:br/>FileInputStream fis = new FileInputStream(pFileName);<xhtml:br/>fis.read(byteArray); // the file is always 1k bytes<xhtml:br/>fis.close();<xhtml:br/>processPFile(userName, byteArray);<xhtml:br/>\n                        </xhtml:div>\n                     </xhtml:div>\n                  </xhtml:div>\n               </Example_Code>\n               <Body_Text>The code loops through a set of users, reading a private data file for each user. The programmer assumes that the files are always 1 kilobyte in size and therefore ignores the return value from Read(). If an attacker can create a smaller file, the program will recycle the remainder of the data from the previous user and treat it as though it belongs to the attacker.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-10",
			"text": "\n               <Intro_Text>The following code does not check to see if the string returned by getParameter() is null before calling the member function compareTo(), potentially causing a NULL dereference.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>String itemName = request.getParameter(ITEM_NAME);<xhtml:br/>if (itemName.compareTo(IMPORTANT_ITEM) == 0) {<xhtml:div style=\"margin-left:1em;\">...</xhtml:div>}<xhtml:br/>...</xhtml:div>\n               </Example_Code>\n               <Body_Text>The following code does not check to see if the string returned by the Item property is null before calling the member function Equals(), potentially causing a NULL dereference.</Body_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>String itemName = request.Item(ITEM_NAME);<xhtml:br/>if (itemName.Equals(IMPORTANT_ITEM)) {<xhtml:div style=\"margin-left:1em;\">...</xhtml:div>}<xhtml:br/>...</xhtml:div>\n               </Example_Code>\n               <Body_Text>The traditional defense of this coding error is: \"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value.\" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-11",
			"text": "\n               <Intro_Text>The following code shows a system property that is set to null and later dereferenced by a programmer who mistakenly assumes it will always be defined.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>System.clearProperty(\"os.name\");<xhtml:br/>...<xhtml:br/>String os = System.getProperty(\"os.name\");<xhtml:br/>if (os.equalsIgnoreCase(\"Windows 95\")) System.out.println(\"Not supported\");</xhtml:div>\n               </Example_Code>\n               <Body_Text>The traditional defense of this coding error is: \"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value.\" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-12",
			"text": "\n               <Intro_Text>The following VB.NET code does not check to make sure that it has read 50 bytes from myfile.txt. This can cause DoDangerousOperation() to operate on an unexpected value.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C#\">\n                  <xhtml:div>Dim MyFile As New FileStream(\"myfile.txt\", FileMode.Open, FileAccess.Read, FileShare.Read)<xhtml:br/>Dim MyArray(50) As Byte<xhtml:br/>MyFile.Read(MyArray, 0, 50)<xhtml:br/>DoDangerousOperation(MyArray(20))</xhtml:div>\n               </Example_Code>\n               <Body_Text>In .NET, it is not uncommon for programmers to misunderstand Read() and related methods that are part of many System.IO classes. The stream and reader classes do not consider it to be unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-1",
			"text": "\n               <Intro_Text>This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>void host_lookup(char *user_supplied_addr){<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>struct hostent *hp;<xhtml:br/>in_addr_t *addr;<xhtml:br/>char hostname[64];<xhtml:br/>in_addr_t inet_addr(const char *cp);<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>/*routine that ensures user_supplied_addr is in the right format for conversion */</xhtml:i>\n                           <xhtml:br/>\n                           <xhtml:br/>validate_addr_form(user_supplied_addr);<xhtml:br/>addr = inet_addr(user_supplied_addr);<xhtml:br/>hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);<xhtml:br/>strcpy(hostname, hp-&gt;h_name);</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr (CWE-252), a NULL pointer dereference\n\t       (CWE-476) would then occur in the call to strcpy().</Body_Text>\n               <Body_Text>Note that this code is also vulnerable to a buffer overflow (CWE-119).</Body_Text>\n            "
		},
		{
			"text": "\n               <Intro_Text>In the following C/C++ example the method outputStringToFile opens a file in the local filesystem and outputs a string to the file. The input parameters output and filename contain the string to output to the file and the name of the file respectively.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C++\">\n                  <xhtml:div>int outputStringToFile(char *output, char *filename) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>openFileToWrite(filename);<xhtml:br/>writeToFile(output);<xhtml:br/>closeFile(filename);</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, this code does not check the return values of the methods openFileToWrite, writeToFile, closeFile to verify that the file was properly opened and closed and that the string was successfully written to the file. The return values for these methods should be checked to determine if the method was successful and allow for detection of errors or unexpected conditions as in the following example.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"C++\">\n                  <xhtml:div>int outputStringToFile(char *output, char *filename) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>int isOutput = SUCCESS;<xhtml:br/>\n                           <xhtml:br/>int isOpen = openFileToWrite(filename);<xhtml:br/>if (isOpen == FAIL) {<xhtml:div style=\"margin-left:1em;\">printf(\"Unable to open file %s\", filename);<xhtml:br/>isOutput = FAIL;</xhtml:div>}<xhtml:br/>else {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>int isWrite = writeToFile(output);<xhtml:br/>if (isWrite == FAIL) {<xhtml:div style=\"margin-left:1em;\">printf(\"Unable to write to file %s\", filename);<xhtml:br/>isOutput = FAIL;</xhtml:div>}<xhtml:br/>\n                                 <xhtml:br/>int isClose = closeFile(filename);<xhtml:br/>if (isClose == FAIL)<xhtml:div style=\"margin-left:1em;\">isOutput = FAIL;</xhtml:div>\n                              </xhtml:div>\n                           </xhtml:div>}<xhtml:br/>return isOutput;</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		},
		{
			"text": "\n               <Intro_Text>In the following Java example the method readFromFile uses a FileReader object to read the contents of a file. The FileReader object is created using the File object readFile, the readFile object is initialized using the setInputFile method. The setInputFile method should be called before calling the readFromFile method.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>private File readFile = null;<xhtml:br/>\n                     <xhtml:br/>public void setInputFile(String inputFile) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// create readFile File object from string containing name of file</xhtml:i>\n                           <xhtml:br/>\n                        </xhtml:div>\n                     </xhtml:div>}<xhtml:br/>\n                     <xhtml:br/>public void readFromFile() {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>try {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>reader = new FileReader(readFile);<xhtml:br/>\n                                 <xhtml:br/>\n                                 <xhtml:i>// read input file</xhtml:i>\n                                 <xhtml:br/>\n                              </xhtml:div>\n                           </xhtml:div>} catch (FileNotFoundException ex) {...}</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, the readFromFile method does not check to see if the readFile object is null, i.e. has not been initialized, before creating the FileReader object and reading from the input file. The readFromFile method should verify whether the readFile object is null and output an error message and raise an exception if the readFile object is null, as in the following code.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"Java\">\n                  <xhtml:div>private File readFile = null;<xhtml:br/>\n                     <xhtml:br/>public void setInputFile(String inputFile) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// create readFile File object from string containing name of file</xhtml:i>\n                           <xhtml:br/>\n                        </xhtml:div>\n                     </xhtml:div>}<xhtml:br/>\n                     <xhtml:br/>public void readFromFile() {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>try {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>if (readFile == null) {<xhtml:div style=\"margin-left:1em;\">System.err.println(\"Input file has not been set, call setInputFile method before calling openInputFile\");<xhtml:br/>throw NullPointerException;</xhtml:div>}<xhtml:br/>\n                                 <xhtml:br/>reader = new FileReader(readFile);<xhtml:br/>\n                                 <xhtml:br/>\n                                 <xhtml:i>// read input file</xhtml:i>\n                                 <xhtml:br/>\n                              </xhtml:div>\n                           </xhtml:div>} catch (FileNotFoundException ex) {...}<xhtml:br/>catch (NullPointerException ex) {...}</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2007-3798",
			"description": "Unchecked return value leads to resultant integer overflow and code execution.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2007-3798"
		},
		{
			"reference": "CVE-2006-4447",
			"description": "Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2006-4447"
		},
		{
			"reference": "CVE-2006-2916",
			"description": "Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2006-2916"
		}
	],
	"references": [
		{
			"section": "Chapter 7, \"Program Building Blocks\" Page 341",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		},
		{
			"section": "Chapter 1, \"Exceptional Conditions,\" Page 22",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		},
		{
			"section": "\"Sin 11: Failure to Handle Errors Correctly.\" Page 183",
			"reference_id": "REF-44",
			"author": [
				"Michael Howard",
				"David LeBlanc",
				"John Viega"
			],
			"title": "24 Deadly Sins of Software Security",
			"publication_year": "2010",
			"publication": "McGraw-Hill"
		},
		{
			"reference_id": "REF-622",
			"author": [
				"Frank Kim"
			],
			"title": "Top 25 Series - Rank 15 - Improper Check for Unusual or Exceptional Conditions",
			"url": "https://www.sans.org/blog/top-25-series-rank-15-improper-check-for-unusual-or-exceptional-conditions/",
			"publication_year": "2010",
			"publication_month": "--03",
			"publication_day": "---15",
			"publisher": "SANS Software Security Institute",
			"url_date": "2023-04-07"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2009-03-03",
			"submission_comment": "New entry for reorganization of CWE-703."
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-07-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-12-28",
				"modification_comment": "updated Applicable_Platforms, Likelihood_of_Exploit, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-02-16",
				"modification_comment": "updated Background_Details, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Name, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-04-05",
				"modification_comment": "updated Demonstrative_Examples, Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-06-21",
				"modification_comment": "updated Common_Consequences, Detection_Factors, Potential_Mitigations, References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-09-27",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-12-13",
				"modification_comment": "updated Relationship_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-03-29",
				"modification_comment": "updated Description, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-27",
				"modification_comment": "updated Common_Consequences, Related_Attack_Patterns, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-09-13",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2013-02-21",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Demonstrative_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2015-12-07",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-01-19",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-06-20",
				"modification_comment": "updated Description, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Potential_Mitigations, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-06-25",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-12-10",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-03-15",
				"modification_comment": "updated Demonstrative_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-07-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-04-28",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description, Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		],
		"previous_entry_name": [
			{
				"text": "Improper Check for Exceptional Conditions",
				"date": "2010-02-16"
			}
		],
		"contribution": [
			{
				"type": "Content",
				"contribution_name": "\"Mapping CWE to 62443\" Sub-Working Group",
				"contribution_organization": "CWE-CAPEC ICS/OT SIG",
				"contribution_date": "2023-04-25",
				"contribution_comment": "Suggested mappings to ISA/IEC 62443."
			}
		]
	},
	"detection_methods": [
		{
			"method": "Automated Static Analysis",
			"description": "Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.",
			"effectiveness": "Moderate"
		},
		{
			"detection_method_id": "DM-12",
			"method": "Manual Dynamic Analysis",
			"description": "Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself."
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "SEI CERT Perl Coding Standard",
			"entry_name": "Do not suppress or ignore exceptions",
			"entry_id": "EXP31-PL",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "ISA/IEC 62443",
			"entry_name": "Req CR 3.5",
			"entry_id": "Part 4-2"
		},
		{
			"taxonomy_name": "ISA/IEC 62443",
			"entry_name": "Req CR 3.7",
			"entry_id": "Part 4-2"
		}
	],
	"notes": [
		{
			"type": "Relationship",
			"text": "Sometimes, when a return value can be used to indicate an error, an unchecked return value is a code-layer instance of a missing application-layer check for exceptional conditions. However, return values are not always needed to communicate exceptional conditions. For example, expiration of resources, values passed by reference, asynchronously modified data, sockets, etc. may indicate exceptional conditions without the use of a return value."
		}
	]
}
