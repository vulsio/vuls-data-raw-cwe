{
	"id": "1253",
	"name": "Incorrect Selection of Fuse Values",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Draft",
	"description": "The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse.",
	"extended_description": "\n      <xhtml:p>Fuses are often used to store secret data, including security configuration data. When not blown, a fuse is considered to store a logic 0, and, when blown, it indicates a logic 1. Fuses are generally considered to be one-directional, i.e., once blown to logic 1, it cannot be reset to logic 0. However, if the logic used to determine system-security state (by leveraging the values sensed from the fuses) uses negative logic, an attacker might blow the fuse and drive the system to an insecure state.</xhtml:p>\n     ",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "693",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"class": "Not Technology-Specific",
				"prevalence": "Undetermined"
			}
		],
		"operating_system": [
			{
				"class": "Not OS-Specific",
				"prevalence": "Undetermined"
			}
		],
		"architecture": [
			{
				"class": "Not Architecture-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Architecture and Design"
		},
		{
			"phase": "Implementation"
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Access Control",
				"Authorization"
			],
			"impact": [
				"Bypass Protection Mechanism",
				"Gain Privileges or Assume Identity"
			]
		},
		{
			"scope": [
				"Availability"
			],
			"impact": [
				"DoS: Crash, Exit, or Restart"
			]
		},
		{
			"scope": [
				"Confidentiality"
			],
			"impact": [
				"Read Memory"
			]
		},
		{
			"scope": [
				"Integrity"
			],
			"impact": [
				"Modify Memory",
				"Execute Unauthorized Code or Commands"
			]
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.\n        "
			]
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n        <Intro_Text><xhtml:p>A chip implements a secure boot and uses the sensed value of a fuse \n         \"do_secure_boot\" to determine whether to perform a secure boot or not. If this fuse \n         value is \"0\", the system performs secure boot. Otherwise, it does not perform secure \n         boot.</xhtml:p>\n         <xhtml:p>An attacker blows the \"do_secure_boot\" fuse to \"1\". After reset, the attacker loads a custom \n         bootloader, and, since the fuse value is now \"1\", the system does not perform secure boot, \n         and the attacker can execute their custom firmware image.</xhtml:p>\n         <xhtml:p>Since by default, a fuse-configuration value is a \"0\", an attacker can blow it to a \"1\" with \n         inexpensive hardware.</xhtml:p>\n         <xhtml:p>If the logic is reversed, an attacker cannot easily reset the fuse. Note that, with \n         specialized and expensive equipment, an attacker with full physical access might be able to \"unblow\" the fuse \n         value to a \"0\".</xhtml:p>\n        </Intro_Text>\n      "
		}
	],
	"references": [
		{
			"reference_id": "REF-1080",
			"author": [
				"Christopher Tarnovsky"
			],
			"title": "Security Failures in Secure Devices",
			"url": "https://www.blackhat.com/presentations/bh-europe-08/Tarnovsky/Presentation/bh-eu-08-tarnovsky.pdf"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi",
			"submission_organization": "Intel Corporation",
			"submission_date": "2019-10-15"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Applicable_Platforms, Demonstrative_Examples, Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-07-20",
				"modification_comment": "updated Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		]
	},
	"related_attack_patterns": [
		"74"
	],
	"notes": [
		{
			"type": "Maintenance",
			"text": "This entry is still under development and will continue to see updates and content improvements."
		}
	]
}
