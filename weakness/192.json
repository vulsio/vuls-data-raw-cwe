{
	"id": "192",
	"name": "Integer Coercion Error",
	"abstraction": "Variant",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.",
	"extended_description": "Several flaws fall under the category of integer coercion errors. For the most part, these errors in and of themselves result only in availability and data integrity issues. However, in some circumstances, they may result in other, more complicated security related flaws, such as buffer overflow conditions.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "681",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"prevalence": "Undetermined",
				"name": "C"
			},
			{
				"prevalence": "Undetermined",
				"name": "C++"
			},
			{
				"prevalence": "Undetermined",
				"name": "Java"
			},
			{
				"prevalence": "Undetermined",
				"name": "C#"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"likelihood_of_exploit": "Medium",
	"common_consequences": [
		{
			"scope": [
				"Availability"
			],
			"impact": [
				"DoS: Resource Consumption (CPU)",
				"DoS: Resource Consumption (Memory)",
				"DoS: Crash, Exit, or Restart"
			],
			"note": "Integer coercion often leads to undefined states of execution resulting in infinite loops or crashes."
		},
		{
			"scope": [
				"Integrity",
				"Confidentiality",
				"Availability"
			],
			"impact": [
				"Execute Unauthorized Code or Commands"
			],
			"note": "In some cases, integer coercion errors can lead to exploitable buffer overflow conditions, resulting in the execution of arbitrary code."
		},
		{
			"scope": [
				"Integrity",
				"Other"
			],
			"impact": [
				"Other"
			],
			"note": "Integer coercion errors result in an incorrect value being stored for the variable in question."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Requirements"
			],
			"description": [
				"A language which throws exceptions on ambiguous data casts might be chosen."
			]
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Design objects and program flow such that multiple or complex casts are unnecessary"
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Ensure that any data type casting that you must used is entirely understood in order to reduce the plausibility of error in use."
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-21",
			"text": "\n               <Intro_Text>The following code is intended to read an incoming packet from a socket and extract one or more headers.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>DataPacket *packet;<xhtml:br/>int numHeaders;<xhtml:br/>PacketHeader *headers;<xhtml:br/>\n                     <xhtml:br/>sock=AcceptSocketConnection();<xhtml:br/>ReadPacket(packet, sock);<xhtml:br/>numHeaders =packet-&gt;headers;<xhtml:br/>\n                     <xhtml:br/>if (numHeaders &gt; 100) {<xhtml:div style=\"margin-left:1em;\">ExitError(\"too many headers!\");</xhtml:div>}<xhtml:br/>headers = malloc(numHeaders * sizeof(PacketHeader);<xhtml:br/>ParsePacketHeaders(packet, headers);</xhtml:div>\n               </Example_Code>\n               <Body_Text>The code performs a check to make sure that the packet does not contain too many headers. However, numHeaders is defined as a signed int, so it could be negative. If the incoming packet specifies a value such as -3, then the malloc calculation will generate a negative number (say, -300 if each header can be a maximum of 100 bytes). When this result is provided to malloc(), it is first converted to a size_t type. This conversion then produces a large value such as 4294966996, which may cause malloc() to fail or to allocate an extremely large amount of memory (CWE-195). With the appropriate negative numbers, an attacker could trick malloc() into using a very small positive number, which then allocates a buffer that is much smaller than expected, potentially leading to a buffer overflow.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-23",
			"text": "\n               <Intro_Text>The following code reads a maximum size and performs validation on that size. It then performs a strncpy, assuming it will not exceed the boundaries of the array. While the use of \"short s\" is forced in this particular example, short int's are frequently used within real-world code, such as code that processes structured data.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>int GetUntrustedInt () {<xhtml:div style=\"margin-left:1em;\">return(0x0000FFFF);</xhtml:div>}<xhtml:br/>\n                     <xhtml:br/>void main (int argc, char **argv) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>char path[256];<xhtml:br/>char *input;<xhtml:br/>int i;<xhtml:br/>short s;<xhtml:br/>unsigned int sz;<xhtml:br/>\n                           <xhtml:br/>i = GetUntrustedInt();<xhtml:br/>s = i;<xhtml:br/>/* s is -1 so it passes the safety check - CWE-697 */<xhtml:br/>if (s &gt; 256) {<xhtml:div style=\"margin-left:1em;\">DiePainfully(\"go away!\\n\");</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>/* s is sign-extended and saved in sz */<xhtml:br/>sz = s;<xhtml:br/>\n                           <xhtml:br/>/* output: i=65535, s=-1, sz=4294967295 - your mileage may vary */<xhtml:br/>printf(\"i=%d, s=%d, sz=%u\\n\", i, s, sz);<xhtml:br/>\n                           <xhtml:br/>input = GetUserInput(\"Enter pathname:\");<xhtml:br/>\n                           <xhtml:br/>/* strncpy interprets s as unsigned int, so it's treated as MAX_INT<xhtml:br/>(CWE-195), enabling buffer overflow (CWE-119) */<xhtml:br/>strncpy(path, input, s);<xhtml:br/>path[255] = '\\0'; /* don't want CWE-170 */<xhtml:br/>printf(\"Path is: %s\\n\", path);</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>This code first exhibits an example of CWE-839, allowing \"s\" to be a negative number. When the negative short \"s\" is converted to an unsigned integer, it becomes an extremely large positive integer. When this converted integer is used by strncpy() it will lead to a buffer overflow (CWE-119).</Body_Text>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2022-2639",
			"description": "Chain: integer coercion error (CWE-192) prevents a return value from indicating an error, leading to out-of-bounds write (CWE-787)",
			"link": "https://www.cve.org/CVERecord?id=CVE-2022-2639"
		}
	],
	"references": [
		{
			"section": "\"Sin 7: Integer Overflows.\" Page 119",
			"reference_id": "REF-44",
			"author": [
				"Michael Howard",
				"David LeBlanc",
				"John Viega"
			],
			"title": "24 Deadly Sins of Software Security",
			"publication_year": "2010",
			"publication": "McGraw-Hill"
		},
		{
			"section": "Chapter 6, \"Sign Extension\", Page 248",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		},
		{
			"reference_id": "REF-18",
			"author": [
				"Secure Software, Inc."
			],
			"title": "The CLASP Application Security Process",
			"url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
			"publication_year": "2005"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CLASP",
			"submission_date": "2006-07-19"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Applicable_Platforms, Common_Consequences, Maintenance_Notes, Relationships, Other_Notes, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-11-24",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-12-28",
				"modification_comment": "updated Description, Other_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-04-05",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-09-13",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Demonstrative_Examples, References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Relationships, Taxonomy_Mappings, Type"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-03-15",
				"modification_comment": "updated Demonstrative_Examples, Maintenance_Notes, References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-10-26",
				"modification_comment": "updated Observed_Examples"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "CLASP",
			"entry_name": "Integer coercion error"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Understand integer conversion rules",
			"entry_id": "INT02-C"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not use input functions to convert character data if they cannot handle all possible inputs",
			"entry_id": "INT05-C"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Ensure that integer conversions do not result in lost or misinterpreted data",
			"entry_id": "INT31-C",
			"mapping_fit": "Exact"
		}
	],
	"notes": [
		{
			"type": "Maintenance",
			"text": "Within C, it might be that \"coercion\" is semantically different than \"casting\", possibly depending on whether the programmer directly specifies the conversion, or if the compiler does it implicitly. This has implications for the presentation of this entry and others, such as CWE-681, and whether there is enough of a difference for these entries to be split."
		}
	]
}
