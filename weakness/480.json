{
	"id": "480",
	"name": "Use of Incorrect Operator",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Draft",
	"description": "The product accidentally uses the wrong operator, which changes the logic in security-relevant ways.",
	"extended_description": "These types of errors are generally the result of a typo by the programmer.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "670",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"prevalence": "Sometimes",
				"name": "C"
			},
			{
				"prevalence": "Sometimes",
				"name": "C++"
			},
			{
				"prevalence": "Sometimes",
				"name": "Perl"
			},
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"likelihood_of_exploit": "Low",
	"common_consequences": [
		{
			"scope": [
				"Other"
			],
			"impact": [
				"Alter Execution Logic"
			],
			"note": "This weakness can cause unintended logic to be executed and other unexpected application behavior."
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-140",
			"text": "\n               <Intro_Text>The following C/C++ and C# examples attempt to validate an int input parameter against the integer value 100.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>int isValid(int value) {<xhtml:div style=\"margin-left:1em;\">if (value=100) {<xhtml:div style=\"margin-left:1em;\">printf(\"Value is valid\\n\");<xhtml:br/>return(1);</xhtml:div>}<xhtml:br/>printf(\"Value is not valid\\n\");<xhtml:br/>return(0);</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"C#\">\n                  <xhtml:div>bool isValid(int value) {<xhtml:div style=\"margin-left:1em;\">if (value=100) {<xhtml:div style=\"margin-left:1em;\">Console.WriteLine(\"Value is valid.\");<xhtml:br/>return true;</xhtml:div>}<xhtml:br/>Console.WriteLine(\"Value is not valid.\");<xhtml:br/>return false;</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, the expression to be evaluated in the if statement uses the assignment operator \"=\" rather than the comparison operator \"==\". The result of using the assignment operator instead of the comparison operator causes the int variable to be reassigned locally and the expression in the if statement will always evaluate to the value on the right hand side of the expression. This will result in the input value not being properly validated, which can cause unexpected results.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-103",
			"text": "\n               <Intro_Text>The following C/C++ example shows a simple implementation of a stack that includes methods for adding and removing integer values from the stack. The example uses pointers to add and remove integer values to the stack array variable.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>#define SIZE 50<xhtml:br/>int *tos, *p1, stack[SIZE];<xhtml:br/>\n                     <xhtml:br/>void push(int i) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>p1++;<xhtml:br/>if(p1==(tos+SIZE)) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>\n                                 <xhtml:i>// Print stack overflow error message and exit</xhtml:i>\n                                 <xhtml:br/>\n                              </xhtml:div>\n                           </xhtml:div>}<xhtml:br/>*p1 == i;</xhtml:div>\n                     </xhtml:div>}<xhtml:br/>\n                     <xhtml:br/>int pop(void) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>if(p1==tos) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>\n                                 <xhtml:i>// Print stack underflow error message and exit</xhtml:i>\n                                 <xhtml:br/>\n                              </xhtml:div>\n                           </xhtml:div>}<xhtml:br/>p1--;<xhtml:br/>return *(p1+1);</xhtml:div>\n                     </xhtml:div>}<xhtml:br/>\n                     <xhtml:br/>int main(int argc, char *argv[]) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// initialize tos and p1 to point to the top of stack</xhtml:i>\n                           <xhtml:br/>tos = stack;<xhtml:br/>p1 = stack;<xhtml:br/>\n                           <xhtml:i>// code to add and remove items from stack</xhtml:i>\n                           <xhtml:br/>...<xhtml:br/>return 0;</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>The push method includes an expression to assign the integer value to the location in the stack pointed to by the pointer variable.</Body_Text>\n               <Body_Text>However, this expression uses the comparison operator \"==\" rather than the assignment operator \"=\". The result of using the comparison operator instead of the assignment operator causes erroneous values to be entered into the stack and can cause unexpected results.</Body_Text>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2022-3979",
			"description": "Chain: data visualization program written in PHP uses the \"!=\" operator instead of the type-strict \"!==\" operator (CWE-480) when validating hash values, potentially leading to an incorrect type conversion (CWE-704)",
			"link": "https://www.cve.org/CVERecord?id=CVE-2022-3979"
		},
		{
			"reference": "CVE-2021-3116",
			"description": "Chain: Python-based HTTP Proxy server uses the wrong boolean operators (CWE-480) causing an  incorrect comparison (CWE-697) that identifies an authN failure if all three conditions are met instead of only one, allowing bypass of the proxy authentication (CWE-1390)",
			"link": "https://www.cve.org/CVERecord?id=CVE-2021-3116"
		}
	],
	"references": [
		{
			"reference_id": "REF-18",
			"author": [
				"Secure Software, Inc."
			],
			"title": "The CLASP Application Security Process",
			"url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
			"publication_year": "2005"
		},
		{
			"section": "Chapter 6, \"Typos\", Page 289",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CLASP",
			"submission_date": "2006-07-19"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-10-14",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-11-24",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-09-13",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Common_Consequences, References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Demonstrative_Examples, Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-06-23",
				"modification_comment": "updated Applicable_Platforms, Description, Detection_Factors, Other_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Demonstrative_Examples, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-03-15",
				"modification_comment": "updated Demonstrative_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description, Observed_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-10-26",
				"modification_comment": "updated Observed_Examples"
			}
		],
		"previous_entry_name": [
			{
				"text": "Using the Wrong Operator",
				"date": "2008-04-11"
			}
		]
	},
	"detection_methods": [
		{
			"method": "Automated Static Analysis",
			"description": "This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program."
		},
		{
			"method": "Manual Static Analysis",
			"description": "This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program."
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "CLASP",
			"entry_name": "Using the wrong operator"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not perform assignments in selection statements",
			"entry_id": "EXP45-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not use a bitwise operator with a Boolean-like operand",
			"entry_id": "EXP46-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "Software Fault Patterns",
			"entry_name": "Glitch in Computation",
			"entry_id": "SFP1"
		}
	]
}
