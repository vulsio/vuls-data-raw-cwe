{
	"id": "1423",
	"name": "Exposure of Sensitive Information caused by Shared Microarchitectural Predictor State that Influences Transient Execution",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "Shared microarchitectural predictor state may allow code to influence\n\t\t\t\ttransient execution across a hardware boundary, potentially exposing\n\t\t\t\tdata that is accessible beyond the boundary over a covert channel.\n\t\t\t",
	"extended_description": "\n\t\t\t\t<xhtml:p>Many commodity processors have Instruction Set Architecture (ISA)\n\t\t\t\tfeatures that protect software components from one another. These\n\t\t\t\tfeatures can include memory segmentation, virtual memory, privilege\n\t\t\t\trings, trusted execution environments, and virtual machines, among\n\t\t\t\tothers. For example, virtual memory provides each process with its own\n\t\t\t\taddress space, which prevents processes from accessing each other's\n\t\t\t\tprivate data. Many of these features can be used to form\n\t\t\t\thardware-enforced security boundaries between software components.</xhtml:p>\n\t\t\t\t<xhtml:p>When separate software components (for example, two processes) share\n\t\t\t\tmicroarchitectural predictor state across a hardware boundary, code in\n\t\t\t\tone component may be able to influence microarchitectural predictor\n\t\t\t\tbehavior in another component. If the predictor can cause transient\n\t\t\t\texecution, the shared predictor state may allow an attacker to\n\t\t\t\tinfluence transient execution in a victim, and in a manner that could\n\t\t\t\tallow the attacker to infer private data from the victim by monitoring\n\t\t\t\tobservable discrepancies (CWE-203) in a covert channel [REF-1400].</xhtml:p>\n\t\t\t\t<xhtml:p>Predictor state may be shared when the processor transitions from one\n\t\t\t\tcomponent to another (for example, when a process makes a system call\n\t\t\t\tto enter the kernel). Many commodity processors have features which\n\t\t\t\tprevent microarchitectural predictions that occur before a boundary\n\t\t\t\tfrom influencing predictions that occur after the boundary.</xhtml:p>\n\t\t\t\t<xhtml:p>Predictor state may also be shared between hardware threads, for\n\t\t\t\texample, sibling hardware threads on a processor that supports\n\t\t\t\tsimultaneous multithreading (SMT). This sharing may be benign if the\n\t\t\t\thardware threads are simultaneously executing in the same software\n\t\t\t\tcomponent, or it could expose a weakness if one sibling is a malicious\n\t\t\t\tsoftware component, and the other sibling is a victim software\n\t\t\t\tcomponent. Processors that share microarchitectural predictors between\n\t\t\t\thardware threads may have features which prevent microarchitectural\n\t\t\t\tpredictions that occur on one hardware thread from influencing\n\t\t\t\tpredictions that occur on another hardware thread.</xhtml:p>\n\t\t\t\t<xhtml:p>Features that restrict predictor state sharing across transitions or\n\t\t\t\tbetween hardware threads may be always-on, on by default, or may\n\t\t\t\trequire opt-in from software.</xhtml:p>\n\t\t\t",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "1420",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "1420",
			"view_id": "1194",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"prevalence": "Undetermined",
				"name": "Microcontroller Hardware"
			},
			{
				"prevalence": "Undetermined",
				"name": "Processor Hardware"
			},
			{
				"prevalence": "Undetermined",
				"name": "Memory Hardware"
			},
			{
				"class": "System on Chip",
				"prevalence": "Undetermined"
			}
		],
		"operating_system": [
			{
				"class": "Not OS-Specific",
				"prevalence": "Undetermined"
			}
		],
		"architecture": [
			{
				"class": "Not Architecture-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Architecture and Design",
			"note": [
				"<xhtml:p>This weakness can be introduced during hardware architecture and\n\t\t\t\t\tdesign if predictor state is not properly isolated between modes (for\n\t\t\t\t\texample, user mode and kernel mode), if predictor state is not\n\t\t\t\t\tisolated between hardware threads, or if it is not isolated between\n\t\t\t\t\tother kinds of execution contexts supported by the processor.</xhtml:p>"
			]
		},
		{
			"phase": "Implementation",
			"note": [
				"<xhtml:p>This weakness can be introduced during system software\n\t\t\t\t\timplementation if predictor-state-sanitizing operations (for example,\n\t\t\t\t\tthe indirect branch prediction barrier on Intel x86) are not invoked\n\t\t\t\t\twhen switching from one context to another.</xhtml:p>"
			]
		},
		{
			"phase": "System Configuration",
			"note": [
				"<xhtml:p>This weakness can be introduced if the system has not been\n\t\t\t\t\tconfigured according to the hardware vendor's recommendations for\n\t\t\t\t\tmitigating the weakness.</xhtml:p>"
			]
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Confidentiality"
			],
			"impact": [
				"Read Memory"
			],
			"likelihood": "Medium"
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"<xhtml:p>The hardware designer can attempt to prevent transient\n\t\t\t\t\texecution from causing observable discrepancies in specific covert\n\t\t\t\t\tchannels.</xhtml:p>"
			]
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"<xhtml:p>Hardware designers may choose to use microarchitectural\n\t\t\t\t\tbits to tag predictor entries. For example, each predictor entry may\n\t\t\t\t\tbe tagged with a kernel-mode bit which, when set, indicates that the\n\t\t\t\t\tpredictor entry was created in kernel mode. The processor can use this\n\t\t\t\t\tbit to enforce that predictions in the current mode must have been\n\t\t\t\t\ttrained in the current mode. This can prevent malicious cross-mode\n\t\t\t\t\ttraining, such as when user-mode software attempts to create predictor\n\t\t\t\t\tentries that influence transient execution in the kernel. Predictor\n\t\t\t\t\tentry tags can also be used to associate each predictor entry with the\n\t\t\t\t\tSMT thread that created it, and thus the processor can enforce that\n\t\t\t\t\teach predictor entry can only be used by the SMT thread that created\n\t\t\t\t\tit. This can prevent an SMT thread from using predictor entries\n\t\t\t\t\tcrafted by a malicious sibling SMT thread.</xhtml:p>"
			],
			"effectiveness": "Moderate"
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"<xhtml:p>Hardware designers may choose to sanitize\n\t\t\t\t\tmicroarchitectural predictor state (for example, branch prediction\n\t\t\t\t\thistory) when the processor transitions to a different context, for\n\t\t\t\t\texample, whenever a system call is invoked. Alternatively, the\n\t\t\t\t\thardware may expose instruction(s) that allow software to sanitize\n\t\t\t\t\tpredictor state according to the user's threat model. For example,\n\t\t\t\t\tthis can allow operating system software to sanitize predictor state\n\t\t\t\t\twhen performing a context switch from one process to another.</xhtml:p>"
			],
			"effectiveness": "Moderate"
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"<xhtml:p>System software can mitigate this weakness by invoking\n\t\t\t\t\tpredictor-state-sanitizing operations (for example, the indirect\n\t\t\t\t\tbranch prediction barrier on Intel x86) when switching from one\n\t\t\t\t\tcontext to another, according to the hardware vendor's\n\t\t\t\t\trecommendations.</xhtml:p>"
			],
			"effectiveness": "Moderate"
		},
		{
			"phase": [
				"Build and Compilation"
			],
			"description": [
				"<xhtml:p>If the weakness is exposed by a single instruction (or a\n\t\t\t\t\tsmall set of instructions), then the compiler (or JIT, etc.) can be\n\t\t\t\t\tconfigured to prevent the affected instruction(s) from being\n\t\t\t\t\tgenerated. One prominent example of this mitigation is retpoline\n\t\t\t\t\t([REF-1414]).</xhtml:p>"
			],
			"effectiveness": "Limited"
		},
		{
			"phase": [
				"Build and Compilation"
			],
			"description": [
				"<xhtml:p>Use control-flow integrity (CFI) techniques to constrain\n\t\t\t\t\tthe behavior of instructions that redirect the instruction pointer,\n\t\t\t\t\tsuch as indirect branch instructions.</xhtml:p>"
			],
			"effectiveness": "Moderate"
		},
		{
			"phase": [
				"Build and Compilation"
			],
			"description": [
				"<xhtml:p>Use software techniques (including the use of\n\t\t\t\t\tserialization instructions) that are intended to reduce the number of\n\t\t\t\t\tinstructions that can be executed transiently after a processor event\n\t\t\t\t\tor misprediction.</xhtml:p>"
			],
			"effectiveness": "Incidental"
		},
		{
			"phase": [
				"System Configuration"
			],
			"description": [
				"<xhtml:p>Some systems may allow the user to disable predictor\n\t\t\t\t\tsharing. For example, this could be a BIOS configuration, or a\n\t\t\t\t\tmodel-specific register (MSR) that can be configured by the operating\n\t\t\t\t\tsystem or virtual machine monitor.</xhtml:p>"
			],
			"effectiveness": "Moderate"
		},
		{
			"phase": [
				"Patching and Maintenance"
			],
			"description": [
				"<xhtml:p>The hardware vendor may provide a patch to, for example,\n\t\t\t\t\tsanitize predictor state when the processor transitions to a different\n\t\t\t\t\tcontext, or to prevent predictor entries from being shared across SMT\n\t\t\t\t\tthreads. A patch may also introduce new ISA that allows software to\n\t\t\t\t\ttoggle a mitigation.</xhtml:p>"
			],
			"effectiveness": "Moderate"
		},
		{
			"phase": [
				"Documentation"
			],
			"description": [
				"<xhtml:p>If a hardware feature can allow microarchitectural\n\t\t\t\t\tpredictor state to be shared between contexts, SMT threads, or other\n\t\t\t\t\tarchitecturally defined boundaries, the hardware designer may opt to\n\t\t\t\t\tdisclose this behavior in architecture documentation. This\n\t\t\t\t\tdocumentation can inform users about potential consequences and\n\t\t\t\t\teffective mitigations.</xhtml:p>"
			],
			"effectiveness": "High"
		},
		{
			"phase": [
				"Requirements"
			],
			"description": [
				"<xhtml:p>Processor designers, system software vendors, or other\n\t\t\t\t\tagents may choose to restrict the ability of unprivileged software to\n\t\t\t\t\taccess to high-resolution timers that are commonly used to monitor\n\t\t\t\t\tcovert channels.</xhtml:p>"
			]
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n\t\t\t\t\t<Intro_Text><xhtml:p>Branch Target Injection (BTI) is a vulnerability that can allow an SMT\n\t\t\t\t\thardware thread to maliciously train the indirect branch predictor\n\t\t\t\t\tstate that is shared with its sibling hardware thread. A cross-thread\n\t\t\t\t\tBTI attack requires the attacker to find a vulnerable code sequence\n\t\t\t\t\twithin the victim software. For example, the authors of [REF-1415]\n\t\t\t\t\tidentified the following code sequence in the Windows library\n\t\t\t\t\tntdll.dll:</xhtml:p></Intro_Text>\n\t\t\t\t\t<Example_Code Nature=\"Bad\" Language=\"x86 Assembly\">\n\t\t\t\t\t<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\tadc edi,dword ptr [ebx+edx+13BE13BDh]<xhtml:br/>\n\t\t\t\t\t\tadc dl,byte ptr [edi]<xhtml:br/>\n\t\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\tindirect_branch_site:<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\tjmp dword ptr [rsi]   # at this point attacker knows edx, controls edi and ebx<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t</Example_Code>\n\t\t\t\t\t<Body_Text>\n\t\t\t\t\t<xhtml:p>To successfully exploit this code sequence to disclose the victim's\n\t\t\t\t\tprivate data, the attacker must also be able to find an indirect\n\t\t\t\t\tbranch site within the victim, where the attacker controls the values\n\t\t\t\t\tin edi and ebx, and the attacker knows the value in edx as shown above\n\t\t\t\t\tat the indirect branch site.</xhtml:p>\n\t\t\t\t\t<xhtml:p>A proof-of-concept cross-thread BTI attack might proceed as follows:</xhtml:p>\n\t\t\t\t\t<xhtml:ol>\n\t\t\t\t\t\t<xhtml:li>The attacker thread and victim thread must be co-scheduled on the same physical processor core.\n\t\t\t\t\t\t</xhtml:li>\n\t\t\t\t\t\t<xhtml:li>The attacker thread must train the shared branch predictor so that\n\t\t\t\t\twhen the victim thread reaches indirect_branch_site, the jmp\n\t\t\t\t\tinstruction will be predicted to target example_code_sequence instead\n\t\t\t\t\tof the correct architectural target. The training procedure may vary\n\t\t\t\t\tby processor, and the attacker may need to reverse-engineer the branch\n\t\t\t\t\tpredictor to identify a suitable training algorithm.\n\t\t\t\t\t\t</xhtml:li>\n\t\t\t\t\t\t<xhtml:li>This step assumes that the attacker can control some values in the\n\t\t\t\t\tvictim program, specifically the values in edi and ebx at\n\t\t\t\t\tindirect_branch_site. When the victim reaches indirect_branch_site the\n\t\t\t\t\tprocessor will (mis)predict example_code_sequence as the target and\n\t\t\t\t\t(transiently) execute the adc instructions. If the attacker chooses\n\t\t\t\t\tebx so that `ebx = m\n\t\t\t\t\t\t<xhtml:ul>\n\t\t\t\t\t\t  <xhtml:li>\n\t\t\t\t\t\t\t0x13BE13BD - edx, then the first adc will load 32 bits from\n\t\t\t\t\t\t\taddress m in the victim's address space and add *m (the data loaded from)\n\t\t\t\t\t\t\tto the attacker-controlled base address in edi. The second\n\t\t\t\t\t\t\tadc instruction accesses a location in memory whose address corresponds\n\t\t\t\t\t\t\tto *m`.\n\t\t\t\t\t\t  </xhtml:li>\n\t\t\t\t\t\t</xhtml:ul>\n\t\t\t\t\t\t</xhtml:li>\n\t\t\t\t\t\t<xhtml:li>The adversary uses a covert channel analysis technique such as\n\t\t\t\t\tFlush+Reload ([REF-1416]) to infer the value of the victim's private data\n\t\t\t\t\t*m.\n\t\t\t\t\t\t</xhtml:li>\n\t\t\t\t\t</xhtml:ol>\n\t\t\t\t\t</Body_Text>\n\t\t\t\t"
		},
		{
			"text": "\n\t\t\t\t\t<Intro_Text><xhtml:p>BTI can also allow software in one execution context to maliciously\n\t\t\t\t\ttrain branch predictor entries that can be used in another\n\t\t\t\t\tcontext. For example, on some processors user-mode software may be\n\t\t\t\t\table to train predictor entries that can also be used after\n\t\t\t\t\ttransitioning into kernel mode, such as after invoking a system\n\t\t\t\t\tcall. This vulnerability does not necessarily require SMT and may\n\t\t\t\t\tinstead be performed in synchronous steps, though it does require the\n\t\t\t\t\tattacker to find an exploitable code sequence in the victim's code,\n\t\t\t\t\tfor example, in the kernel.</xhtml:p></Intro_Text>\n\t\t\t\t"
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2017-5754",
			"description": "(Branch Target Injection, BTI, Spectre v2). Shared\n\t\t\t\t\tmicroarchitectural indirect branch predictor state may allow code to\n\t\t\t\t\tinfluence transient execution across a process, VM, or privilege\n\t\t\t\t\tboundary, potentially exposing data that is accessible beyond the\n\t\t\t\t\tboundary.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2017-5754"
		},
		{
			"reference": "CVE-2022-0001",
			"description": "(Branch History Injection, BHI, Spectre-BHB). Shared\n\t\t\t\t\tbranch history state may allow user-mode code to influence transient\n\t\t\t\t\texecution in the kernel, potentially exposing kernel data over a\n\t\t\t\t\tcovert channel.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2022-0001"
		},
		{
			"reference": "CVE-2021-33149",
			"description": "(RSB underflow, Retbleed). Shared return stack buffer\n\t\t\t\t\tstate may allow code that executes before a prediction barrier to\n\t\t\t\t\tinfluence transient execution after the prediction barrier,\n\t\t\t\t\tpotentially exposing data that is accessible beyond the barrier over a\n\t\t\t\t\tcovert channel.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2021-33149"
		}
	],
	"references": [
		{
			"reference_id": "REF-1414",
			"author": [
				"Intel Corporation"
			],
			"title": "Retpoline: A Branch Target Injection Mitigation",
			"url": "https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/technical-documentation/retpoline-branch-target-injection-mitigation.html",
			"publication_year": "2022",
			"publication_month": "--08",
			"publication_day": "---22",
			"url_date": "2023-02-13"
		},
		{
			"reference_id": "REF-1415",
			"author": [
				"Paul Kocher",
				"Jann Horn",
				"Anders Fogh",
				"Daniel Genkin",
				"Daniel Gruss",
				"Werner Haas",
				"Mike Hamburg",
				"Moritz Lipp",
				"Stefan Mangard",
				"Thomas Prescher",
				"Michael Schwarz",
				"Yuval Yarom"
			],
			"title": "Spectre Attacks: Exploiting Speculative Execution",
			"url": "https://spectreattack.com/spectre.pdf",
			"publication_year": "2019",
			"publication_month": "--05",
			"url_date": "2024-02-14"
		},
		{
			"reference_id": "REF-1416",
			"author": [
				"Yuval Yarom",
				"Katrina Falkner"
			],
			"title": "Flush+Reload: A High Resolution, Low Noise, L3 Cache Side-Channel Attack",
			"url": "https://www.usenix.org/system/files/conference/usenixsecurity14/sec14-paper-yarom.pdf",
			"publication_year": "2014",
			"url_date": "2023-02-13"
		},
		{
			"reference_id": "REF-1398",
			"author": [
				"The Clang Team"
			],
			"title": "Control Flow Integrity",
			"url": "https://clang.llvm.org/docs/ControlFlowIntegrity.html",
			"url_date": "2024-02-13"
		},
		{
			"reference_id": "REF-1389",
			"author": [
				"Alyssa Milburn",
				"Ke Sun",
				"Henrique Kawakami"
			],
			"title": "You Cannot Always Win the Race: Analyzing the LFENCE/JMP Mitigation for Branch Target Injection",
			"url": "https://arxiv.org/abs/2203.04277",
			"publication_year": "2022",
			"publication_month": "--03",
			"publication_day": "---08",
			"url_date": "2024-02-22"
		},
		{
			"reference_id": "REF-1400",
			"author": [
				"Intel Corporation"
			],
			"title": "Refined Speculative Execution Terminology",
			"url": "https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/best-practices/refined-speculative-execution-terminology.html",
			"publication_year": "2022",
			"publication_month": "--03",
			"publication_day": "---11",
			"url_date": "2024-02-13"
		},
		{
			"reference_id": "REF-1401",
			"author": [
				"Neta Bar Kama",
				"Roope Kaivola"
			],
			"title": "Hardware Security Leak Detection by Symbolic Simulation",
			"url": "https://ieeexplore.ieee.org/document/9617727",
			"publication_year": "2021",
			"publication_month": "--11",
			"url_date": "2024-02-13"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "Scott D. Constable",
			"submission_organization": "Intel Corporation",
			"submission_date": "2023-09-19"
		},
		"contribution": [
			{
				"type": "Content",
				"contribution_name": "David Kaplan",
				"contribution_organization": "AMD",
				"contribution_date": "2024-01-22",
				"contribution_comment": "Member of Microarchitectural Weaknesses Working Group"
			},
			{
				"type": "Content",
				"contribution_name": "Rafael Dossantos, Abraham Fernandez Rubio, Alric Althoff, Lyndon Fawcett",
				"contribution_organization": "Arm",
				"contribution_date": "2024-01-22",
				"contribution_comment": "Members of Microarchitectural Weaknesses Working Group"
			},
			{
				"type": "Content",
				"contribution_name": "Jason Oberg",
				"contribution_organization": "Cycuity",
				"contribution_date": "2024-01-22",
				"contribution_comment": "Member of Microarchitectural Weaknesses Working Group"
			},
			{
				"type": "Content",
				"contribution_name": "Priya B. Iyer",
				"contribution_organization": "Intel Corporation",
				"contribution_date": "2024-01-22",
				"contribution_comment": "Member of Microarchitectural Weaknesses Working Group"
			},
			{
				"type": "Content",
				"contribution_name": "Nicole Fern",
				"contribution_organization": "Riscure",
				"contribution_date": "2024-01-22",
				"contribution_comment": "Member of Microarchitectural Weaknesses Working Group"
			}
		]
	},
	"detection_methods": [
		{
			"method": "Manual Analysis",
			"description": "<xhtml:p>This weakness can be detected in hardware by manually\n\t\t\t\t\tinspecting processor specifications. Features that exhibit this\n\t\t\t\t\tweakness may have microarchitectural predictor state that is shared\n\t\t\t\t\tbetween hardware threads, execution contexts (for example, user and\n\t\t\t\t\tkernel), or other components that may host mutually distrusting\n\t\t\t\t\tsoftware (or firmware, etc.).</xhtml:p>",
			"effectiveness": "Moderate",
			"effectiveness_notes": "Manual analysis may not reveal all weaknesses in a processor specification and should be combined with other detection methods to improve coverage."
		},
		{
			"method": "Automated Analysis",
			"description": "<xhtml:p>Software vendors can release tools that detect presence of\n\t\t\t\t\tknown weaknesses on a processor. For example, some of these tools can\n\t\t\t\t\tattempt to transiently execute a vulnerable code sequence and detect\n\t\t\t\t\twhether code successfully leaks data in a manner consistent with the\n\t\t\t\t\tweakness under test. Alternatively, some hardware vendors provide\n\t\t\t\t\tenumeration for the presence of a weakness (or lack of a\n\t\t\t\t\tweakness). These enumeration bits can be checked and reported by\n\t\t\t\t\tsystem software. For example, Linux supports these checks for many\n\t\t\t\t\tcommodity processors:</xhtml:p>\n\t\t\t\t\t<xhtml:p>$ cat /proc/cpuinfo | grep bugs | head -n 1</xhtml:p>\n\t\t\t\t\t<xhtml:p>bugs            : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed</xhtml:p>",
			"effectiveness": "High",
			"effectiveness_notes": "This method can be useful for detecting whether a processor if affected by known weaknesses, but it may not be useful for detecting unknown weaknesses"
		},
		{
			"method": "Automated Analysis",
			"description": "<xhtml:p>This weakness can be detected in hardware by employing static\n\t\t\t\t\tor dynamic taint analysis methods [REF-1401]. These methods can label\n\t\t\t\t\teach predictor entry (or prediction history, etc.) according to the\n\t\t\t\t\tprocessor context that created it. Taint analysis or information flow\n\t\t\t\t\tanalysis can then be applied to detect when predictor state created in\n\t\t\t\t\tone context can influence predictions made in another context.</xhtml:p>",
			"effectiveness": "Moderate",
			"effectiveness_notes": "Automated static or dynamic taint analysis may not reveal all weaknesses in a processor specification and should be combined with other detection methods to improve coverage."
		}
	]
}
