{
  "id": "697",
  "name": "Incorrect Comparison",
  "abstraction": "Pillar",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.",
  "extended_description": "\n            <xhtml:p>This Pillar covers several possibilities:</xhtml:p>\n               <xhtml:ul>\n                  <xhtml:li>the comparison checks one factor incorrectly;</xhtml:li>\n                  <xhtml:li>the comparison should consider multiple factors, but it does not check at least one of those factors at all;</xhtml:li>\n                  <xhtml:li>the comparison checks the wrong factor.</xhtml:li>\n               </xhtml:ul>\n         ",
  "applicable_platforms": {
    "language": [
      {
        "class": "Not Language-Specific",
        "prevalence": "Undetermined"
      }
    ],
    "technology": [
      {
        "class": "Not Technology-Specific",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Other"
      ],
      "impact": [
        "Varies by Context"
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-115",
      "text": "\n               <Intro_Text>Consider an application in which Truck objects are defined to be the same if they have the same make, the same model, and were manufactured in the same year.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>public class Truck {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>private String make;<xhtml:br/>private String model;<xhtml:br/>private int year;<xhtml:br/>\n                           <xhtml:br/>public boolean equals(Object o) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>if (o == null) return false;<xhtml:br/>if (o == this) return true;<xhtml:br/>if (!(o instanceof Truck)) return false;<xhtml:br/>\n                                 <xhtml:br/>Truck t = (Truck) o;<xhtml:br/>\n                                 <xhtml:br/>return (this.make.equals(t.getMake()) &amp;&amp; this.model.equals(t.getModel()));</xhtml:div>\n                           </xhtml:div>}</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>Here, the equals() method only checks the make and model of the Truck objects, but the year of manufacture is not included.</Body_Text>\n            "
    },
    {
      "demonstrative_example_id": "DX-116",
      "text": "\n               <Intro_Text>This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>\n                     <xhtml:i>/* Ignore CWE-259 (hard-coded password) and CWE-309 (use of password system for authentication) for this example. */</xhtml:i>\n                     <xhtml:br/>\n                     <xhtml:br/>char *username = \"admin\";<xhtml:br/>char *pass = \"password\";<xhtml:br/>\n                     <xhtml:br/>int AuthenticateUser(char *inUser, char *inPass) {<xhtml:div style=\"margin-left:1em;\">if (strncmp(username, inUser, strlen(inUser))) {<xhtml:div style=\"margin-left:1em;\">logEvent(\"Auth failure of username using strlen of inUser\");<xhtml:br/>return(AUTH_FAIL);</xhtml:div>}<xhtml:br/>if (! strncmp(pass, inPass, strlen(inPass))) {<xhtml:div style=\"margin-left:1em;\">logEvent(\"Auth success of password using strlen of inUser\");<xhtml:br/>return(AUTH_SUCCESS);</xhtml:div>}<xhtml:br/>else {<xhtml:div style=\"margin-left:1em;\">logEvent(\"Auth fail of password using sizeof\");<xhtml:br/>return(AUTH_FAIL);</xhtml:div>}</xhtml:div>}<xhtml:br/>\n                     <xhtml:br/>int main (int argc, char **argv) {<xhtml:div style=\"margin-left:1em;\">\n                     int authResult;<xhtml:br/><xhtml:br/>if (argc &lt; 3) {<xhtml:div style=\"margin-left:1em;\">ExitError(\"Usage: Provide a username and password\");</xhtml:div>}<xhtml:br/>authResult = AuthenticateUser(argv[1], argv[2]);<xhtml:br/>if (authResult == AUTH_SUCCESS) {<xhtml:div style=\"margin-left:1em;\">DoAuthenticatedTask(argv[1]);</xhtml:div>}<xhtml:br/>else {<xhtml:div style=\"margin-left:1em;\">ExitError(\"Authentication failed\");</xhtml:div>}</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>In AuthenticateUser(), the strncmp() call uses the string length of an attacker-provided inPass parameter in order to determine how many characters to check in the password. So, if the attacker only provides a password of length 1, the check will only examine the first byte of the application's password before determining success.</Body_Text>\n               <Body_Text>As a result, this partial comparison leads to improper authentication (CWE-287).</Body_Text>\n               <Body_Text>Any of these passwords would still cause authentication to succeed for the \"admin\" user:</Body_Text>\n               <Example_Code Nature=\"Attack\">\n                  <xhtml:div>p<xhtml:br/>pa<xhtml:br/>pas<xhtml:br/>pass</xhtml:div>\n               </Example_Code>\n               <Body_Text>This significantly reduces the search space for an attacker, making brute force attacks more feasible.</Body_Text>\n               <Body_Text>The same problem also applies to the username, so values such as \"a\" and \"adm\" will succeed for the username.</Body_Text>\n               <Body_Text>While this demonstrative example may not seem realistic, see the Observed Examples for CVE entries that effectively reflect this same weakness.</Body_Text>\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2021-3116",
      "description": "Chain: Python-based HTTP Proxy server uses the wrong boolean operators (CWE-480) causing an  incorrect comparison (CWE-697) that identifies an authN failure if all three conditions are met instead of only one, allowing bypass of the proxy authentication (CWE-1390)",
      "link": "https://www.cve.org/CVERecord?id=CVE-2021-3116"
    },
    {
      "reference": "CVE-2020-15811",
      "description": "Chain: Proxy uses a substring search instead of parsing the Transfer-Encoding header (CWE-697), allowing request splitting (CWE-113) and cache poisoning",
      "link": "https://www.cve.org/CVERecord?id=CVE-2020-15811"
    },
    {
      "reference": "CVE-2016-10003",
      "description": "Proxy performs incorrect comparison of request headers, leading to infoleak",
      "link": "https://www.cve.org/CVERecord?id=CVE-2016-10003"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CWE Content Team",
      "submission_organization": "MITRE",
      "submission_date": "2008-09-09"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-11-24",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-03-10",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-05-27",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-03-29",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-09-13",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11",
        "modification_comment": "updated Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-05-03",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08",
        "modification_comment": "updated Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2018-03-27",
        "modification_comment": "updated Common_Consequences, Demonstrative_Examples, Description, Maintenance_Notes, Name, Observed_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03",
        "modification_comment": "updated Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-06-20",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-09-19",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24",
        "modification_comment": "updated Applicable_Platforms, Relationships, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-08-20",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-04-28",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-06-28",
        "modification_comment": "updated Observed_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-01-31",
        "modification_comment": "updated Description, Observed_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes, Research_Gaps"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Insufficient Comparison",
        "date": "2018-03-27"
      }
    ]
  },
  "weakness_ordinalities": [
    {
      "ordinality": "Primary"
    }
  ],
  "related_attack_patterns": [
    "10",
    "120",
    "14",
    "15",
    "182",
    "24",
    "267",
    "3",
    "41",
    "43",
    "44",
    "45",
    "46",
    "47",
    "52",
    "53",
    "6",
    "64",
    "67",
    "7",
    "71",
    "73",
    "78",
    "79",
    "8",
    "80",
    "88",
    "9",
    "92"
  ],
  "notes": [
    {
      "type": "Research Gap",
      "text": "\n\t\t\t  <xhtml:p>Weaknesses related to this Pillar appear to be under-studied, especially with respect to classification schemes. Input from academic and other communities could help identify and resolve gaps or organizational difficulties within CWE.</xhtml:p>\n\t\t\t"
    },
    {
      "type": "Maintenance",
      "text": "\n      \t\t\tThis entry likely has some relationships with case sensitivity (CWE-178), but case sensitivity is a factor in other types of weaknesses besides comparison.  Also, in cryptography, certain attacks are possible when certain comparison operations do not take place in constant time, causing a timing-related information leak (CWE-208).  \n      \t\t"
    }
  ]
}
