{
	"id": "784",
	"name": "Reliance on Cookies without Validation and Integrity Checking in a Security Decision",
	"abstraction": "Variant",
	"structure": "Simple",
	"status": "Draft",
	"description": "The product uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user.",
	"extended_description": "Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Attackers can bypass protection mechanisms such as authorization and authentication by modifying the cookie to contain an expected value.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "807",
			"view_id": "1000"
		},
		{
			"nature": "ChildOf",
			"cweid": "565",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"class": "Web Based",
				"prevalence": "Often"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"likelihood_of_exploit": "High",
	"common_consequences": [
		{
			"scope": [
				"Access Control"
			],
			"impact": [
				"Bypass Protection Mechanism",
				"Gain Privileges or Assume Identity"
			],
			"note": "It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to claim a high level of authorization, or to claim that successful authentication has occurred."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Avoid using cookie data for a security-related decision."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision."
			]
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Add integrity checks to detect tampering."
			]
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client."
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-15",
			"text": "\n               <Intro_Text>The following code excerpt reads a value from a browser cookie to determine the role of the user.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style=\"margin-left:1em;\">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals(\"role\")) {<xhtml:div style=\"margin-left:1em;\">userRole = c.getValue();</xhtml:div>}</xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		},
		{
			"demonstrative_example_id": "DX-16",
			"text": "\n               <Intro_Text>The following code could be for a medical records application. It performs authentication by checking if a cookie has been set.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"PHP\">\n                  <xhtml:div>$auth = $_COOKIES['authenticated'];<xhtml:br/>if (! $auth) {<xhtml:div style=\"margin-left:1em;\">if (AuthenticateUser($_POST['user'], $_POST['password']) == \"success\") {<xhtml:div style=\"margin-left:1em;\">// save the cookie to send out in future responses<xhtml:br/>setcookie(\"authenticated\", \"1\", time()+60*60*2);</xhtml:div>}<xhtml:br/>else {<xhtml:div style=\"margin-left:1em;\">ShowLoginScreen();<xhtml:br/>die(\"\\n\");</xhtml:div>}</xhtml:div>}<xhtml:br/>DisplayMedicalHistory($_POST['patient_ID']);</xhtml:div>\n               </Example_Code>\n               <Body_Text>The programmer expects that the AuthenticateUser() check will always be applied, and the \"authenticated\" cookie will only be set when authentication succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie.</Body_Text>\n               <Body_Text>However, the attacker can set the \"authenticated\" cookie to a non-zero value such as 1. As a result, the $auth variable is 1, and the AuthenticateUser() check is not even performed. The attacker has bypassed the authentication.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-17",
			"text": "\n               <Intro_Text>In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style=\"margin-left:1em;\">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals(\"authenticated\") &amp;&amp; Boolean.TRUE.equals(c.getValue())) {<xhtml:div style=\"margin-left:1em;\">authenticated = true;</xhtml:div>}</xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2009-1549",
			"description": "Attacker can bypass authentication by setting a cookie to a specific value.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2009-1549"
		},
		{
			"reference": "CVE-2009-1619",
			"description": "Attacker can bypass authentication and gain admin privileges by setting an \"admin\" cookie to 1.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2009-1619"
		},
		{
			"reference": "CVE-2009-0864",
			"description": "Content management system allows admin privileges by setting a \"login\" cookie to \"OK.\"",
			"link": "https://www.cve.org/CVERecord?id=CVE-2009-0864"
		},
		{
			"reference": "CVE-2008-5784",
			"description": "e-dating application allows admin privileges by setting the admin cookie to 1.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2008-5784"
		},
		{
			"reference": "CVE-2008-6291",
			"description": "Web-based email list manager allows attackers to gain admin privileges by setting a login cookie to \"admin.\"",
			"link": "https://www.cve.org/CVERecord?id=CVE-2008-6291"
		}
	],
	"references": [
		{
			"reference_id": "REF-706",
			"author": [
				"Steve Christey"
			],
			"title": "Unforgivable Vulnerabilities",
			"url": "http://cve.mitre.org/docs/docs-2007/unforgivable.pdf",
			"publication_year": "2007",
			"publication_month": "--08",
			"publication_day": "---02"
		},
		{
			"section": "Chapter 13, \"Sensitive Data in Cookies and Fields\" Page 435",
			"reference_id": "REF-7",
			"author": [
				"Michael Howard",
				"David LeBlanc"
			],
			"title": "Writing Secure Code",
			"url": "https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223",
			"publication_year": "2002",
			"publication_month": "--12",
			"publication_day": "---04",
			"publisher": "Microsoft Press",
			"edition": "2nd Edition"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2009-07-16"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-10-29",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-02-16",
				"modification_comment": "updated Demonstrative_Examples, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-01-19",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Modes_of_Introduction, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2018-03-27",
				"modification_comment": "updated References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Applicable_Platforms, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Modes_of_Introduction, Relationships, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		]
	},
	"notes": [
		{
			"type": "Maintenance",
			"text": "A new parent might need to be defined for this entry. This entry is specific to cookies, which reflects the significant number of vulnerabilities being reported for cookie-based authentication in CVE during 2008 and 2009. However, other types of inputs - such as parameters or headers - could also be used for similar authentication or authorization. Similar issues (under the Research view) include CWE-247 and CWE-472."
		}
	]
}
