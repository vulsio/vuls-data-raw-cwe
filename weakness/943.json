{
	"id": "943",
	"name": "Improper Neutralization of Special Elements in Data Query Logic",
	"abstraction": "Class",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",
	"extended_description": "\n            <xhtml:p>Depending on the capabilities of the query language, an attacker could inject additional logic into the query to:</xhtml:p>\n               <xhtml:ul>\n                  <xhtml:li>Modify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulated</xhtml:li>\n                  <xhtml:li>Append additional commands to the query</xhtml:li>\n                  <xhtml:li>Return more entities than intended</xhtml:li>\n                  <xhtml:li>Return fewer entities than intended</xhtml:li>\n                  <xhtml:li>Cause entities to be sorted in an unexpected way</xhtml:li>\n               </xhtml:ul>\n            <xhtml:p>The ability to execute additional commands or change which entities are returned has obvious risks. But when the product logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges.</xhtml:p>\n            <xhtml:p>While this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and \"NoSQL\" languages.</xhtml:p>\n         ",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "74",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation",
			"note": [
				"REALIZATION: This weakness is caused during implementation of an architectural security tactic."
			]
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Confidentiality",
				"Integrity",
				"Availability",
				"Access Control"
			],
			"impact": [
				"Bypass Protection Mechanism",
				"Read Application Data",
				"Modify Application Data",
				"Varies by Context"
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-209",
			"text": "\n             <Intro_Text>The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where owner matches the user name of the currently-authenticated user.</Intro_Text>\n             <Example_Code Nature=\"Bad\" Language=\"C#\">\n               <xhtml:div>...<xhtml:br/>string userName = ctx.getAuthenticatedUserName();<xhtml:br/>string query = \"SELECT * FROM items WHERE owner = '\" + userName + \"' AND itemname = '\" + ItemName.Text + \"'\";<xhtml:br/>sda = new SqlDataAdapter(query, conn);<xhtml:br/>DataTable dt = new DataTable();<xhtml:br/>sda.Fill(dt);<xhtml:br/>...</xhtml:div>\n             </Example_Code>\n             <Body_Text>The query that this code intends to execute follows:</Body_Text>\n             <Example_Code Nature=\"Informative\">\n               <xhtml:div>SELECT * FROM items WHERE owner = &lt;userName&gt; AND itemname = &lt;itemName&gt;;</xhtml:div>\n             </Example_Code>\n             <Body_Text>However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string:</Body_Text>\n             <Example_Code Nature=\"Attack\">\n               <xhtml:div>name' OR 'a'='a</xhtml:div>\n             </Example_Code>\n             <Body_Text>for itemName, then the query becomes the following:</Body_Text>\n             <Example_Code Nature=\"Attack\">\n               <xhtml:div>SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name' OR 'a'='a';</xhtml:div>\n             </Example_Code>\n             <Body_Text>The addition of the:</Body_Text>\n             <Example_Code Nature=\"Attack\">\n               <xhtml:div>OR 'a'='a</xhtml:div>\n             </Example_Code>\n             <Body_Text>condition causes the WHERE clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:</Body_Text>\n             <Example_Code Nature=\"Attack\">\n               <xhtml:div>SELECT * FROM items;</xhtml:div>\n             </Example_Code>\n             <Body_Text>This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner.</Body_Text>\n           "
		},
		{
			"demonstrative_example_id": "DX-210",
			"text": "\n             <Intro_Text>The code below constructs an LDAP query using user input address data:</Intro_Text>\n             <Example_Code Nature=\"Bad\" Language=\"Java\">\n               <xhtml:div>context = new InitialDirContext(env);<xhtml:br/>String searchFilter = \"StreetAddress=\" + address;<xhtml:br/>NamingEnumeration answer = context.search(searchBase, searchFilter, searchCtls);</xhtml:div>\n             </Example_Code>\n             <Body_Text>Because the code fails to neutralize the address string used to construct the query, an attacker can supply an address that includes additional LDAP queries.</Body_Text>\n           "
		},
		{
			"demonstrative_example_id": "DX-211",
			"text": "\n             <Intro_Text>Consider the following simple XML document that stores authentication information and a snippet of Java code that uses XPath query to retrieve authentication information:</Intro_Text>\n             <Example_Code Nature=\"Informative\" Language=\"XML\">\n               <xhtml:div>&lt;users&gt;<xhtml:div style=\"margin-left:1em;\">&lt;user&gt;<xhtml:div style=\"margin-left:1em;\">&lt;login&gt;john&lt;/login&gt;<xhtml:br/>&lt;password&gt;abracadabra&lt;/password&gt;<xhtml:br/>&lt;home_dir&gt;/home/john&lt;/home_dir&gt;</xhtml:div>&lt;/user&gt;<xhtml:br/>&lt;user&gt;<xhtml:div style=\"margin-left:1em;\">&lt;login&gt;cbc&lt;/login&gt;<xhtml:br/>&lt;password&gt;1mgr8&lt;/password&gt;<xhtml:br/>&lt;home_dir&gt;/home/cbc&lt;/home_dir&gt;</xhtml:div>&lt;/user&gt;</xhtml:div>&lt;/users&gt;</xhtml:div>\n             </Example_Code>\n             <Body_Text>The Java code used to retrieve the home directory based on the provided credentials is:</Body_Text>\n             <Example_Code Nature=\"Bad\" Language=\"Java\">\n               <xhtml:div>XPath xpath = XPathFactory.newInstance().newXPath();<xhtml:br/>XPathExpression xlogin = xpath.compile(\"//users/user[login/text()='\" + login.getUserName() + \"' and password/text() = '\" + login.getPassword() + \"']/home_dir/text()\");<xhtml:br/>Document d = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File(\"db.xml\"));<xhtml:br/>String homedir = xlogin.evaluate(d);</xhtml:div>\n             </Example_Code>\n             <Body_Text>Assume that user \"john\" wishes to leverage XPath Injection and login without a valid password. By providing a username \"john\" and password \"' or ''='\" the XPath expression now becomes</Body_Text>\n             <Example_Code Nature=\"Attack\">\n               <xhtml:div>//users/user[login/text()='john' or ''='' and password/text() = '' or ''='']/home_dir/text()</xhtml:div>\n             </Example_Code>\n             <Body_Text>This lets user \"john\" login without a valid password, thus bypassing authentication.</Body_Text>\n           "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2014-2503",
			"description": "Injection using Documentum Query Language (DQL)",
			"link": "https://www.cve.org/CVERecord?id=CVE-2014-2503"
		},
		{
			"reference": "CVE-2014-2508",
			"description": "Injection using Documentum Query Language (DQL)",
			"link": "https://www.cve.org/CVERecord?id=CVE-2014-2508"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2014-06-19"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2015-12-07",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Modes_of_Introduction, Observed_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2018-03-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-06-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-03-15",
				"modification_comment": "updated Maintenance_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-04-28",
				"modification_comment": "updated Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2024-02-29",
				"modification_comment": "updated Demonstrative_Examples"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"related_attack_patterns": [
		"676"
	],
	"notes": [
		{
			"type": "Relationship",
			"text": "It could be argued that data query languages are effectively a command language - albeit with a limited set of commands - and thus any query-language injection issue could be treated as a child of CWE-74. However, CWE-943 is intended to better organize query-oriented issues to separate them from fully-functioning programming languages, and also to provide a more precise identifier for the many query languages that do not have their own CWE identifier."
		}
	]
}
