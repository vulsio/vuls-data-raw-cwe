{
  "id": "413",
  "name": "Improper Resource Locking",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.",
  "extended_description": "When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the product. This might violate the product's assumption that the resource will not change, potentially leading to unexpected behaviors.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "667",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Not Language-Specific",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design"
    },
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Integrity",
        "Availability"
      ],
      "impact": [
        "Modify Application Data",
        "DoS: Instability",
        "DoS: Crash, Exit, or Restart"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "Use a non-conflicting privilege scheme."
      ]
    },
    {
      "phase": [
        "Architecture and Design",
        "Implementation"
      ],
      "description": [
        "Use synchronization when locking a resource."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-24",
      "text": "\n               <Intro_Text>The following function attempts to acquire a lock in order to perform operations on a shared resource.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>void f(pthread_mutex_t *mutex) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>pthread_mutex_lock(mutex);<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>/* access shared resource */</xhtml:i>\n                           <xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:br/>pthread_mutex_unlock(mutex);</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior.</Body_Text>\n               <Body_Text>In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"C\">\n                  <xhtml:div>int f(pthread_mutex_t *mutex) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>int result;<xhtml:br/>\n                           <xhtml:br/>result = pthread_mutex_lock(mutex);<xhtml:br/>if (0 != result)<xhtml:div style=\"margin-left:1em;\">return result;</xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>/* access shared resource */</xhtml:i>\n                           <xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:br/>return pthread_mutex_unlock(mutex);</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
    },
    {
      "text": "\n               <Intro_Text>This Java example shows a simple BankAccount class with deposit and withdraw methods.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>public class BankAccount {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// variable for bank account balance</xhtml:i>\n                           <xhtml:br/>private double accountBalance;<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// constructor for BankAccount</xhtml:i>\n                           <xhtml:br/>public BankAccount() {<xhtml:div style=\"margin-left:1em;\">accountBalance = 0;</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// method to deposit amount into BankAccount</xhtml:i>\n                           <xhtml:br/>public void deposit(double depositAmount) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>double newBalance = accountBalance + depositAmount;<xhtml:br/>accountBalance = newBalance;</xhtml:div>\n                           </xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// method to withdraw amount from BankAccount</xhtml:i>\n                           <xhtml:br/>public void withdraw(double withdrawAmount) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>double newBalance = accountBalance - withdrawAmount;<xhtml:br/>accountBalance = newBalance;</xhtml:div>\n                           </xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// other methods for accessing the BankAccount object</xhtml:i>\n                           <xhtml:br/>...</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, the deposit and withdraw methods have shared access to the account balance private class variable. This can result in a race condition if multiple threads attempt to call the deposit and withdraw methods simultaneously where the account balance is modified by one thread before another thread has completed modifying the account balance. For example, if a thread attempts to withdraw funds using the withdraw method before another thread that is depositing funds using the deposit method completes the deposit then there may not be sufficient funds for the withdraw transaction.</Body_Text>\n               <Body_Text>To prevent multiple threads from having simultaneous access to the account balance variable the deposit and withdraw methods should be synchronized using the synchronized modifier.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"Java\">\n                  <xhtml:div>public class BankAccount {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>...<xhtml:br/>\n                           <xhtml:i>// synchronized method to deposit amount into BankAccount</xhtml:i>\n                           <xhtml:br/>public synchronized void deposit(double depositAmount) {<xhtml:div style=\"margin-left:1em;\">...</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// synchronized method to withdraw amount from BankAccount</xhtml:i>\n                           <xhtml:br/>public synchronized void withdraw(double withdrawAmount) {<xhtml:div style=\"margin-left:1em;\">...</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>...</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>An alternative solution is to use a lock object to ensure exclusive access to the bank account balance variable. As shown below, the deposit and withdraw methods use the lock object to set a lock to block access to the BankAccount object from other threads until the method has completed updating the bank account balance variable.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"Java\">\n                  <xhtml:div>public class BankAccount {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>...<xhtml:br/>\n                           <xhtml:i>// lock object for thread access to methods</xhtml:i>\n                           <xhtml:br/>private ReentrantLock balanceChangeLock;<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// condition object to temporarily release lock to other threads</xhtml:i>\n                           <xhtml:br/>private Condition sufficientFundsCondition;<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// method to deposit amount into BankAccount</xhtml:i>\n                           <xhtml:br/>public void deposit(double amount) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>\n                                 <xhtml:i>// set lock to block access to BankAccount from other threads</xhtml:i>\n                                 <xhtml:br/>balanceChangeLock.lock();<xhtml:br/>try {<xhtml:div style=\"margin-left:1em;\">\n                                    <xhtml:div>double newBalance = balance + amount;<xhtml:br/>balance = newBalance;<xhtml:br/>\n                                       <xhtml:br/>\n                                       <xhtml:i>// inform other threads that funds are available</xhtml:i>\n                                       <xhtml:br/>sufficientFundsCondition.signalAll();<xhtml:br/>\n                                    </xhtml:div>\n                                 </xhtml:div>} catch (Exception e) {...}<xhtml:br/>finally {<xhtml:div style=\"margin-left:1em;\">// unlock lock object<xhtml:br/>balanceChangeLock.unlock();</xhtml:div>}</xhtml:div>\n                           </xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// method to withdraw amount from bank account</xhtml:i>\n                           <xhtml:br/>public void withdraw(double amount) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>\n                                 <xhtml:i>// set lock to block access to BankAccount from other threads</xhtml:i>\n                                 <xhtml:br/>balanceChangeLock.lock();<xhtml:br/>try {<xhtml:div style=\"margin-left:1em;\">\n                                    <xhtml:div>while (balance &lt; amount) {<xhtml:div style=\"margin-left:1em;\">\n                                          <xhtml:div>\n                                             <xhtml:br/>\n                                             <xhtml:i>// temporarily unblock access</xhtml:i>\n                                             <xhtml:br/>\n                                             <xhtml:br/>\n                                             <xhtml:i>// until sufficient funds are available</xhtml:i>\n                                             <xhtml:br/>sufficientFundsCondition.await();</xhtml:div>\n                                       </xhtml:div>}<xhtml:br/>double newBalance = balance - amount;<xhtml:br/>balance = newBalance;<xhtml:br/>\n                                    </xhtml:div>\n                                 </xhtml:div>} catch (Exception e) {...}<xhtml:br/>finally {<xhtml:div style=\"margin-left:1em;\">// unlock lock object<xhtml:br/>balanceChangeLock.unlock();</xhtml:div>}</xhtml:div>\n                           </xhtml:div>}<xhtml:br/>...</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2022-20141",
      "description": "Chain: an operating system kernel has insufficent resource locking (CWE-413) leading to a use after free (CWE-416).",
      "link": "https://www.cve.org/CVERecord?id=CVE-2022-20141"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "PLOVER",
      "submission_date": "2006-07-19"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01",
        "modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-06-21",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-09-27",
        "modification_comment": "updated Description, Name"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-12-13",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01",
        "modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11",
        "modification_comment": "updated Demonstrative_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-10-30",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08",
        "modification_comment": "updated Applicable_Platforms"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-01-31",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Detection_Factors, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-10-26",
        "modification_comment": "updated Observed_Examples"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Insufficient Resource Locking",
        "date": "2010-09-27"
      }
    ],
    "contribution": [
      {
        "type": "Content",
        "contribution_name": "Martin Sebor",
        "contribution_organization": "Cisco Systems, Inc.",
        "contribution_date": "2010-04-30",
        "contribution_comment": "Provided Demonstrative Example"
      }
    ]
  },
  "detection_methods": [
    {
      "detection_method_id": "DM-14",
      "method": "Automated Static Analysis",
      "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "effectiveness": "High"
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "PLOVER",
      "entry_name": "Insufficient Resource Locking"
    },
    {
      "taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
      "entry_name": "Ensure visibility when accessing shared primitive variables",
      "entry_id": "VNA00-J"
    },
    {
      "taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
      "entry_name": "Ensure that compound operations on shared variables are atomic",
      "entry_id": "VNA02-J"
    },
    {
      "taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
      "entry_name": "Use private final lock objects to synchronize classes that may interact with untrusted code",
      "entry_id": "LCK00-J"
    },
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Missing Lock",
      "entry_id": "SFP19"
    }
  ]
}
