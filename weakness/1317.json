{
	"id": "1317",
	"name": "Improper Access Control in Fabric Bridge",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Draft",
	"description": "The product uses a fabric bridge for transactions between two Intellectual Property (IP) blocks, but the bridge does not properly perform the expected privilege, identity, or other access control checks between those IP blocks.",
	"extended_description": "\n\t\t\t\t<xhtml:p>In hardware designs, different IP blocks are connected through interconnect-bus fabrics (e.g. AHB and OCP). Within a System on Chip (SoC), the IP block subsystems could be using different bus protocols. In such a case, the IP blocks are then linked to the central bus (and to other IP blocks) through a fabric bridge. Bridges are used as bus-interconnect-routing modules that link different protocols or separate, different segments of the overall SoC interconnect.</xhtml:p>\n\t\t\t\t<xhtml:p>For overall system security, it is important that the access-control privileges associated with any fabric transaction are consistently maintained and applied, even when they are routed or translated by a fabric bridge. A bridge that is connected to a fabric without security features forwards transactions to the slave without checking the privilege level of the master and results in a weakness in SoC access-control security. The same weakness occurs if a bridge does not check the hardware identity of the transaction received from the slave interface of the bridge.</xhtml:p>\n\t\t\t",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "284",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"prevalence": "Undetermined",
				"name": "Processor Hardware"
			},
			{
				"class": "Not Technology-Specific",
				"prevalence": "Undetermined"
			}
		],
		"operating_system": [
			{
				"class": "Not OS-Specific",
				"prevalence": "Undetermined"
			}
		],
		"architecture": [
			{
				"class": "Not Architecture-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Architecture and Design"
		},
		{
			"phase": "Implementation"
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Confidentiality",
				"Integrity",
				"Access Control",
				"Availability"
			],
			"impact": [
				"DoS: Crash, Exit, or Restart",
				"Bypass Protection Mechanism",
				"Read Memory",
				"Modify Memory"
			],
			"likelihood": "Medium"
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Implement access-control checks in the bridge for both upstream and downstream transactions."
			]
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n\t\t\t\t\t<Intro_Text>This example is from CVE-2019-6260 [REF-1138]. The iLPC2AHB bridge connects a CPU (with multiple, privilege levels, such as user, super user, debug, etc.) over AHB interface to an LPC bus. Several peripherals are connected to the LPC bus. The bridge is expected to check the privilege level of the transactions initiated in the core before forwarding them to the peripherals on the LPC bus. </Intro_Text>\n\t\t\t\t\t<Body_Text>The bridge does not implement the checks and allows reads and writes from all privilege levels. </Body_Text>\n\t\t\t\t\t<Body_Text>To address this, designers should implement hardware-based checks that are either hardcoded to block untrusted agents from accessing secure peripherals or implement firmware flows that configure the bridge to block untrusted agents from making arbitrary reads or writes.</Body_Text>\n\t\t\t\t"
		},
		{
			"text": "\n\t\t\t\t\t<Intro_Text>The example code below is taken from the AES and core local interrupt (CLINT) peripherals of the HACK@DAC'21 buggy OpenPiton SoC. The access to all the peripherals for a given privilege level of the processor is controlled by an access control module in the SoC. This ensures that malicious users with insufficient privileges do not get access to sensitive data, such as the AES keys used by the operating system to encrypt and decrypt information. The security of the entire system will be compromised if the access controls are incorrectly enforced. The access controls are enforced through the interconnect-bus fabrics, where access requests with insufficient access control permissions will be rejected.</Intro_Text>\n\t\t\t\t\t<Example_Code Nature=\"Bad\" Language=\"Verilog\">\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\tmodule aes0_wrapper #(...)(...);<xhtml:br/>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\tinput logic     acct_ctrl_i;<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\taxi_lite_interface #(...<xhtml:br/>\n\t\t\t\t\t\t) axi_lite_interface_i (<xhtml:br/>\n\t\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t<xhtml:b>.en_o       ( en_acct    ),</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t..);<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t<xhtml:b>assign en = en_acct &amp;&amp; acct_ctrl_i;</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\tendmodule<xhtml:br/>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\tmodule clint #(...)(...);<xhtml:br/>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\taxi_lite_interface #(...<xhtml:br/>\n\t\t\t\t\t\t) axi_lite_interface_i (<xhtml:br/>\n\t\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t<xhtml:b>.en_o       ( en         ),</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t  );<xhtml:br/>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\tendmodule<xhtml:br/>\n\t\t\t\t\t</Example_Code>\n\t\t\t\t\t<Body_Text>The previous code snippet [REF-1382] illustrates an instance of a vulnerable implementation of access control for the CLINT peripheral (see module clint). It also shows a correct implementation of access control for the AES peripheral (see module aes0_wrapper) [REF-1381]. An enable signal (en_o) from the fabric's AXI interface (present in both modules) is used to determine if an access request is made to the peripheral. In the case of the AES peripheral, this en_o signal is first received in a temporary signal en_acct. Then, the access request is enabled (by asserting the en signal) only if the request has sufficient access permissions (i.e., acct_ctrl_i signal should be enabled). However, in the case of the CLINT peripheral, the enable signal, en_o, from the AXI interface, is directly used to enable accesses. As a result, users with insufficient access permissions also get full access to the CLINT peripheral.</Body_Text>\n\t\t\t\t\t<Body_Text>To fix this, enable access requests to CLINT [REF-1383] only if the user has sufficient access as indicated by the acct_ctrl_i signal in the boolean &amp;&amp; with en_acct.</Body_Text>\n\t\t\t\t\t<Example_Code Nature=\"Good\" Language=\"Verilog\">\n\t\t\t\t\tmodule clint #(...<xhtml:br/>\n\t\t\t\t\t) (<xhtml:br/>\n\t\t\t\t\t... <xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t<xhtml:b>input logic     acct_ctrl_i,</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t);<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\tlogic     en<xhtml:b>, en_acct</xhtml:b>;<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\taxi_lite_interface #(...<xhtml:br/>\n\t\t\t\t\t\t) axi_lite_interface_i (<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t.en_o       ( <xhtml:b>en_acct</xhtml:b>    ),<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t);<xhtml:br/>\n\t\t\t\t\t\t<xhtml:b>assign en = en_acct &amp;&amp; acct_ctrl_i;</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\tendmodule<xhtml:br/>\n\t\t\t\t\t</Example_Code>\n\t\t\t\t"
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2019-6260",
			"description": "Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].",
			"link": "https://www.cve.org/CVERecord?id=CVE-2019-6260"
		}
	],
	"references": [
		{
			"reference_id": "REF-1138",
			"author": [
				"Stewart Smith"
			],
			"title": "CVE-2019-6260: Gaining control of BMC from the host processor",
			"url": "https://www.flamingspork.com/blog/2019/01/23/cve-2019-6260:-gaining-control-of-bmc-from-the-host-processor/",
			"publication_year": "2019"
		},
		{
			"reference_id": "REF-1381",
			"title": "aes0_wrapper.sv lines 72 - 78",
			"url": "https://github.com/HACK-EVENT/hackatdac21/blob/b9ecdf6068445d76d6bee692d163fededf7a9d9b/piton/design/chip/tile/ariane/src/aes0/aes0_wrapper.sv#L72-L78",
			"publication_year": "2021",
			"url_date": "2024-01-16"
		},
		{
			"reference_id": "REF-1382",
			"title": "clint.sv line 71",
			"url": "https://github.com/HACK-EVENT/hackatdac21/blob/b9ecdf6068445d76d6bee692d163fededf7a9d9b/piton/design/chip/tile/ariane/src/clint/clint.sv#L71C2-L71C36",
			"publication_year": "2021",
			"url_date": "2024-01-16"
		},
		{
			"reference_id": "REF-1383",
			"title": "Fix for clint.sv line 78",
			"url": "https://github.com/HACK-EVENT/hackatdac21/blob/45a004368b5a31857008834d9780536f0764f055/piton/design/chip/tile/ariane/src/clint/clint.sv#L78",
			"publication_year": "2021",
			"url_date": "2024-01-16"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna",
			"submission_organization": "Intel Corporation",
			"submission_date": "2020-05-19"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Observed_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-04-28",
				"modification_comment": "updated Applicable_Platforms"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-06-28",
				"modification_comment": "updated Applicable_Platforms"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-10-13",
				"modification_comment": "updated Demonstrative_Examples, Description, Detection_Factors, Name, Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2024-02-29",
				"modification_comment": "updated Demonstrative_Examples, References"
			}
		],
		"previous_entry_name": [
			{
				"text": "Missing Security Checks in Fabric Bridge",
				"date": "2022-10-13"
			}
		],
		"contribution": [
			{
				"type": "Content",
				"contribution_name": "Chen Chen, Rahul Kande, Jeyavijayan Rajendran",
				"contribution_organization": "Texas A&M University",
				"contribution_date": "2023-06-21",
				"contribution_comment": "suggested demonstrative example"
			},
			{
				"type": "Content",
				"contribution_name": "Shaza Zeitouni, Mohamadreza Rostami, Ahmad-Reza Sadeghi",
				"contribution_organization": "Technical University of Darmstadt",
				"contribution_date": "2023-06-21",
				"contribution_comment": "suggested demonstrative example"
			}
		]
	},
	"detection_methods": [
		{
			"method": "Simulation / Emulation",
			"description": "RTL simulation to ensure that bridge-access controls are implemented properly.",
			"effectiveness": "High"
		},
		{
			"method": "Formal Verification",
			"description": "Formal verification of bridge RTL to ensure that access control cannot be bypassed. ",
			"effectiveness": "High"
		}
	],
	"related_attack_patterns": [
		"122"
	]
}
