{
	"id": "1420",
	"name": "Exposure of Sensitive Information during Transient Execution",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "A processor event or prediction may allow incorrect operations (or correct operations with incorrect data) to execute transiently, potentially exposing data over a covert channel.",
	"extended_description": "\n\t\t\t\t<xhtml:p>When operations execute but do not commit to the processor's\n\t\t\t\t\tarchitectural state, this is commonly referred to as transient\n\t\t\t\t\texecution. This behavior can occur when the processor mis-predicts an\n\t\t\t\t\toutcome (such as a branch target), or when a processor event (such as\n\t\t\t\t\tan exception or microcode assist, etc.) is handled after younger\n\t\t\t\t\toperations have already executed. Operations that execute transiently\n\t\t\t\t\tmay exhibit observable discrepancies (CWE-203) in covert channels\n\t\t\t\t\t[REF-1400] such as data caches. Observable discrepancies of this kind\n\t\t\t\t\tcan be detected and analyzed using timing or power analysis\n\t\t\t\t\ttechniques, which may allow an attacker to infer information about the\n\t\t\t\t\toperations that executed transiently. For example, the attacker may be\n\t\t\t\t\table to infer confidential data that was accessed or used by those\n\t\t\t\t\toperations.</xhtml:p>\n\t\t\t\t<xhtml:p>Transient execution weaknesses may be exploited using one of two\n\t\t\t\t\tmethods. In the first method, the attacker generates a code sequence\n\t\t\t\t\tthat exposes data through a covert channel when it is executed\n\t\t\t\t\ttransiently (the attacker must also be able to trigger transient\n\t\t\t\t\texecution). Some transient execution weaknesses can only expose data\n\t\t\t\t\tthat is accessible within the attacker's processor context. For\n\t\t\t\t\texample, an attacker executing code in a software sandbox may be able\n\t\t\t\t\tto use a transient execution weakness to expose data within the same\n\t\t\t\t\taddress space, but outside of the attacker's sandbox. Other transient\n\t\t\t\t\texecution weaknesses can expose data that is architecturally\n\t\t\t\t\tinaccessible, that is, data protected by hardware-enforced boundaries\n\t\t\t\t\tsuch as page tables or privilege rings. These weaknesses are the\n\t\t\t\t\tsubject of CWE-1421.</xhtml:p>\n\t\t\t\t<xhtml:p>In the second exploitation method, the attacker first identifies a\n\t\t\t\t\tcode sequence in a victim program that, when executed transiently, can\n\t\t\t\t\texpose data that is architecturally accessible within the victim's\n\t\t\t\t\tprocessor context. For instance, the attacker may search the victim\n\t\t\t\t\tprogram for code sequences that resemble a bounds-check bypass\n\t\t\t\t\tsequence (see Demonstrative Example 1). If the attacker can trigger a\n\t\t\t\t\tmis-prediction of the conditional branch and influence the index of\n\t\t\t\t\tthe out-of-bounds array access, then the attacker may be able to infer\n\t\t\t\t\tthe value of out-of-bounds data by monitoring observable discrepancies\n\t\t\t\t\tin a covert channel.</xhtml:p>\n\t\t\t",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "669",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"class": "Not Technology-Specific",
				"prevalence": "Undetermined"
			}
		],
		"operating_system": [
			{
				"class": "Not OS-Specific",
				"prevalence": "Undetermined"
			}
		],
		"architecture": [
			{
				"class": "Not Architecture-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Architecture and Design",
			"note": [
				"This weakness can be introduced when a computing unit (such as a CPU, GPU, accelerator, or any other processor) uses out-of-order execution, speculation, or any other microarchitectural feature that can allow microarchitectural operations to execute without committing to architectural state."
			]
		},
		{
			"phase": "Implementation",
			"note": [
				"This weakness can be introduced when sandboxes or managed runtimes are not properly isolated by using hardware-enforced boundaries. Developers of sandbox or managed runtime software should exercise caution when relying on software techniques (such as bounds checking) to prevent code in one sandbox from accessing confidential data in another sandbox. For example, an attacker sandbox may be able to trigger a processor event or mis-prediction in a manner that allows it to transiently read a victim sandbox's private data."
			]
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Confidentiality"
			],
			"impact": [
				"Read Memory"
			],
			"likelihood": "Medium"
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels."
			],
			"effectiveness": "Limited",
			"effectiveness_notes": "\n\t\t\t\t\t"
		},
		{
			"phase": [
				"Requirements"
			],
			"description": [
				"<xhtml:p>Processor designers may expose instructions or other architectural features that allow software to mitigate the effects of transient execution, but without disabling predictors. These features may also help to limit opportunities for data exposure.</xhtml:p>\n\t\t\t\t\t"
			],
			"effectiveness": "Moderate",
			"effectiveness_notes": "\n\t\t\t\t\t"
		},
		{
			"phase": [
				"Requirements"
			],
			"description": [
				"<xhtml:p>Processor designers may expose registers (for example, control registers or model-specific registers) that allow privileged and/or user software to disable specific predictors or other hardware features that can cause confidential data to be exposed during transient execution.</xhtml:p>\n\t\t\t\t\t"
			],
			"effectiveness": "Limited",
			"effectiveness_notes": "\n\t\t\t\t\t"
		},
		{
			"phase": [
				"Requirements"
			],
			"description": [
				"<xhtml:p>Processor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.</xhtml:p>\n\t\t\t\t\t"
			],
			"effectiveness": "Defense in Depth",
			"effectiveness_notes": "\n\t\t\t\t\t"
		},
		{
			"phase": [
				"Build and Compilation"
			],
			"description": [
				"<xhtml:p>Isolate sandboxes or managed runtimes in separate address spaces (separate processes). For examples, see [REF-1421].</xhtml:p>\n\t\t\t\t\t"
			],
			"effectiveness": "High"
		},
		{
			"phase": [
				"Build and Compilation"
			],
			"description": [
				"<xhtml:p>Include serialization instructions (for example, LFENCE) that prevent processor events or mis-predictions prior to the serialization instruction from causing transient execution after the serialization instruction. For some weaknesses, a serialization instruction can also prevent a processor event or a mis-prediction from occurring after the serialization instruction (for example, CVE-2018-3639 can allow a processor to predict that a load will not depend on an older store; a serialization instruction between the store and the load may allow the store to update memory and prevent the prediction from happening at all).</xhtml:p>\n\t\t\t\t\t"
			],
			"effectiveness": "Moderate",
			"effectiveness_notes": "\n\t\t\t\t\t"
		},
		{
			"phase": [
				"Build and Compilation"
			],
			"description": [
				"<xhtml:p>Use control-flow integrity (CFI) techniques to constrain the behavior of instructions that redirect the instruction pointer, such as indirect branch instructions.</xhtml:p>\n\t\t\t\t\t"
			],
			"effectiveness": "Moderate",
			"effectiveness_notes": "\n\t\t\t\t\t"
		},
		{
			"phase": [
				"Build and Compilation"
			],
			"description": [
				"<xhtml:p>If the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated, and instead generate an alternate sequence of instructions that is not affected by the weakness. One prominent example of this mitigation is retpoline ([REF-1414]).</xhtml:p>\n\t\t\t\t\t"
			],
			"effectiveness": "Limited",
			"effectiveness_notes": "\n\t\t\t\t\t"
		},
		{
			"phase": [
				"Build and Compilation"
			],
			"description": [
				"<xhtml:p>Use software techniques that can mitigate the consequences of transient execution. For example, address masking can be used in some circumstances to prevent out-of-bounds transient reads.</xhtml:p>\n\t\t\t\t\t"
			],
			"effectiveness": "Limited",
			"effectiveness_notes": "\n\t\t\t\t\t"
		},
		{
			"phase": [
				"Build and Compilation"
			],
			"description": [
				"<xhtml:p>Use software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.</xhtml:p>\n\t\t\t\t\t"
			],
			"effectiveness": "Incidental",
			"effectiveness_notes": "\n\t\t\t\t\t"
		},
		{
			"phase": [
				"Documentation"
			],
			"description": [
				"<xhtml:p>If a hardware feature can allow incorrect operations (or correct operations with incorrect data) to execute transiently, the hardware designer may opt to disclose this behavior in architecture documentation. This documentation can inform users about potential consequences and effective mitigations.</xhtml:p>\n\t\t\t\t\t"
			],
			"effectiveness": "High"
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n\t\t\t\t\t<Intro_Text>Secure programs perform bounds checking before accessing an array if the source of the array index is provided by an untrusted source such as user input. In the code below, data from array1 will not be accessed if x is out of bounds.  The following code snippet is from [REF-1415]:</Intro_Text>\n\t\t\t\t\t<Example_Code Nature=\"Bad\" Language=\"C\">\n\t\t\t\t\t\t<xhtml:div>if (x &lt; array1_size)<xhtml:br/>\n\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">y = array2[array1[x] * 4096];</xhtml:div>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t</Example_Code>\n\t\t\t\t\t<Body_Text>\n\t\t\t\t\t\t<xhtml:p>However, if this code executes on a processor that performs\n\t\t\t\t\t\t\tconditional branch prediction the outcome of the if statement could be\n\t\t\t\t\t\t\tmis-predicted and the access on the next line will occur with a value\n\t\t\t\t\t\t\tof x that can point to an out-of-bounds location (within the program's\n\t\t\t\t\t\t\tmemory).</xhtml:p>\n\t\t\t\t\t\t<xhtml:p>Even though the processor does not commit the architectural effects of\n\t\t\t\t\t\t\tthe mis-predicted branch, the memory accesses alter data cache state,\n\t\t\t\t\t\t\twhich is not rolled back after the branch is resolved. The cache state\n\t\t\t\t\t\t\tcan reveal array1[x] thereby providing a mechanism to recover the data\n\t\t\t\t\t\t\tvalue located at address array1 + x.</xhtml:p>\n\t\t\t\t\t</Body_Text>\n\t\t\t\t"
		},
		{
			"text": "\n\t\t\t\t\t<Intro_Text>Some managed runtimes or just-in-time (JIT) compilers may overwrite recently executed code with new code. When the instruction pointer enters the new code, the processor may inadvertently execute the stale code that had been overwritten. This can happen, for instance, when the processor issues a store that overwrites a sequence of code, but the processor fetches and executes the (stale) code before the store updates memory. Similar to the first example, the processor does not commit the stale code's architectural effects, though microarchitectural side effects can persist. Hence, confidential information accessed or used by the stale code may be inferred via an observable discrepancy in a covert channel. This vulnerability is described in more detail in [REF-1427].</Intro_Text>\n\t\t\t\t"
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2017-5753",
			"description": "Microarchitectural conditional branch predictors may allow operations to execute transiently after a misprediction, potentially exposing data over a covert channel. ",
			"link": "https://www.cve.org/CVERecord?id=CVE-2017-5753"
		},
		{
			"reference": "CVE-2021-0089",
			"description": "A machine clear triggered by self-modifying code may allow incorrect operations to execute transiently, potentially exposing data over a covert channel. ",
			"link": "https://www.cve.org/CVERecord?id=CVE-2021-0089"
		},
		{
			"reference": "CVE-2022-0002",
			"description": "Microarchitectural indirect branch predictors may allow incorrect operations to execute transiently after a misprediction, potentially exposing data over a covert channel. ",
			"link": "https://www.cve.org/CVERecord?id=CVE-2022-0002"
		}
	],
	"references": [
		{
			"reference_id": "REF-1389",
			"author": [
				"Alyssa Milburn",
				"Ke Sun",
				"Henrique Kawakami"
			],
			"title": "You Cannot Always Win the Race: Analyzing the LFENCE/JMP Mitigation for Branch Target Injection",
			"url": "https://arxiv.org/abs/2203.04277",
			"publication_year": "2022",
			"publication_month": "--03",
			"publication_day": "---08",
			"url_date": "2024-02-22"
		},
		{
			"reference_id": "REF-1417",
			"author": [
				"Mengjia Yan",
				"Jiho Choi",
				"Dimitrios Skarlatos",
				"Adam Morrison",
				"Christopher W. Fletcher",
				"Josep Torrella"
			],
			"title": "InvisiSpec: making speculative execution invisible in the cache hierarchy.",
			"url": "http://iacoma.cs.uiuc.edu/iacoma-papers/micro18.pdf",
			"publication_year": "2019",
			"publication_month": "--05",
			"url_date": "2024-02-14"
		},
		{
			"reference_id": "REF-1418",
			"author": [
				"Alejandro Cabrera Aldaya",
				"Billy Bob Brumley",
				"Sohaib ul Hassan",
				"Cesar Pereida García",
				"Nicola Tuveri"
			],
			"title": "Port Contention for Fun and Profit",
			"url": "https://eprint.iacr.org/2018/1060.pdf",
			"publication_year": "2019",
			"publication_month": "--05",
			"url_date": "2024-02-14"
		},
		{
			"reference_id": "REF-1419",
			"author": [
				"Mohammad Behnia",
				"Prateek Sahu",
				"Riccardo Paccagnella",
				"Jiyong Yu",
				"Zirui Zhao",
				"Xiang Zou",
				"Thomas Unterluggauer",
				"Josep Torrellas",
				"Carlos Rozas",
				"Adam Morrison",
				"Frank Mckeen",
				"Fangfei Liu",
				"Ron Gabor",
				"Christopher W. Fletcher",
				"Abhishek Basak",
				"Alaa Alameldeen"
			],
			"title": "Speculative Interference Attacks: Breaking Invisible Speculation Schemes",
			"url": "https://arxiv.org/abs/2007.11818",
			"publication_year": "2021",
			"publication_month": "--04",
			"url_date": "2024-02-14"
		},
		{
			"reference_id": "REF-1420",
			"author": [
				"Ross Mcilroy",
				"Jaroslav Sevcik",
				"Tobias Tebbi",
				"Ben L. Titzer",
				"Toon Verwaest"
			],
			"title": "Spectre is here to stay: An analysis of side-channels and speculative execution",
			"url": "https://arxiv.org/pdf/1902.05178.pdf",
			"publication_year": "2019",
			"publication_month": "--02",
			"publication_day": "---14",
			"url_date": "2024-02-14"
		},
		{
			"reference_id": "REF-1421",
			"author": [
				"Intel Corporation"
			],
			"title": "Managed Runtime Speculative Execution Side Channel Mitigations",
			"url": "https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/technical-documentation/runtime-speculative-side-channel-mitigations.html",
			"publication_year": "2018",
			"publication_month": "--01",
			"publication_day": "---03",
			"url_date": "2024-02-14"
		},
		{
			"reference_id": "REF-1398",
			"author": [
				"The Clang Team"
			],
			"title": "Control Flow Integrity",
			"url": "https://clang.llvm.org/docs/ControlFlowIntegrity.html",
			"url_date": "2024-02-13"
		},
		{
			"reference_id": "REF-1414",
			"author": [
				"Intel Corporation"
			],
			"title": "Retpoline: A Branch Target Injection Mitigation",
			"url": "https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/technical-documentation/retpoline-branch-target-injection-mitigation.html",
			"publication_year": "2022",
			"publication_month": "--08",
			"publication_day": "---22",
			"url_date": "2023-02-13"
		},
		{
			"reference_id": "REF-1390",
			"author": [
				"The kernel development community"
			],
			"title": "Speculation",
			"url": "https://docs.kernel.org/6.6/staging/speculation.html",
			"publication_year": "2020",
			"publication_month": "--08",
			"publication_day": "---16",
			"url_date": "2024-02-04"
		},
		{
			"reference_id": "REF-1425",
			"author": [
				"Chandler Carruth"
			],
			"title": "Speculative Load Hardening",
			"url": "https://llvm.org/docs/SpeculativeLoadHardening.html",
			"url_date": "2024-02-14"
		},
		{
			"reference_id": "REF-1427",
			"author": [
				"Hany Ragab",
				"Enrico Barberis",
				"Herbert Bos",
				"Cristiano Giuffrida"
			],
			"title": "Rage Against the Machine Clear: A Systematic Analysis of Machine Clears and Their Implications for Transient Execution Attacks",
			"url": "https://www.usenix.org/system/files/sec21-ragab.pdf",
			"publication_year": "2021",
			"publication_month": "--08",
			"url_date": "2024-02-14"
		},
		{
			"reference_id": "REF-1428",
			"author": [
				"Oleksii Oleksenko",
				"Marco Guarnieri",
				"Boris Köpf",
				"Mark Silberstein"
			],
			"title": "Hide and Seek with Spectres: Efficient discovery of speculative information leaks with random testing",
			"url": "https://arxiv.org/pdf/2301.07642.pdf",
			"publication_year": "2023",
			"publication_month": "--01",
			"publication_day": "---18",
			"url_date": "2024-02-14"
		},
		{
			"reference_id": "REF-1429",
			"author": [
				"Oleksii Oleksenko",
				"Bohdan Trach",
				"Mark Silberstein",
				"Christof Fetzer"
			],
			"title": "SpecFuzz: Bringing Spectre-type vulnerabilities to the surface",
			"url": "https://www.usenix.org/system/files/sec20-oleksenko.pdf",
			"publication_year": "2020",
			"publication_month": "--08",
			"url_date": "2024-02-14"
		},
		{
			"reference_id": "REF-1415",
			"author": [
				"Paul Kocher",
				"Jann Horn",
				"Anders Fogh",
				"Daniel Genkin",
				"Daniel Gruss",
				"Werner Haas",
				"Mike Hamburg",
				"Moritz Lipp",
				"Stefan Mangard",
				"Thomas Prescher",
				"Michael Schwarz",
				"Yuval Yarom"
			],
			"title": "Spectre Attacks: Exploiting Speculative Execution",
			"url": "https://spectreattack.com/spectre.pdf",
			"publication_year": "2019",
			"publication_month": "--05",
			"url_date": "2024-02-14"
		},
		{
			"reference_id": "REF-1400",
			"author": [
				"Intel Corporation"
			],
			"title": "Refined Speculative Execution Terminology",
			"url": "https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/best-practices/refined-speculative-execution-terminology.html",
			"publication_year": "2022",
			"publication_month": "--03",
			"publication_day": "---11",
			"url_date": "2024-02-13"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "Scott D. Constable",
			"submission_organization": "Intel Corporation",
			"submission_date": "2023-09-19"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2024-07-16",
				"modification_comment": "updated Mapping_Notes"
			}
		],
		"contribution": [
			{
				"type": "Content",
				"contribution_name": "David Kaplan",
				"contribution_organization": "AMD",
				"contribution_date": "2024-01-22",
				"contribution_comment": "Member of Microarchitectural Weaknesses Working Group"
			},
			{
				"type": "Content",
				"contribution_name": "Rafael Dossantos, Abraham Fernandez Rubio, Alric Althoff, Lyndon Fawcett",
				"contribution_organization": "Arm",
				"contribution_date": "2024-01-22",
				"contribution_comment": "Members of Microarchitectural Weaknesses Working Group"
			},
			{
				"type": "Content",
				"contribution_name": "Jason Oberg",
				"contribution_organization": "Cycuity",
				"contribution_date": "2024-01-22",
				"contribution_comment": "Member of Microarchitectural Weaknesses Working Group"
			},
			{
				"type": "Content",
				"contribution_name": "Priya B. Iyer",
				"contribution_organization": "Intel Corporation",
				"contribution_date": "2024-01-22",
				"contribution_comment": "Member of Microarchitectural Weaknesses Working Group"
			},
			{
				"type": "Content",
				"contribution_name": "Nicole Fern",
				"contribution_organization": "Riscure",
				"contribution_date": "2024-01-22",
				"contribution_comment": "Member of Microarchitectural Weaknesses Working Group"
			}
		]
	},
	"detection_methods": [
		{
			"method": "Manual Analysis",
			"description": "<xhtml:p>This weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by exhaustively analyzing a processor's machine clear (or nuke) conditions ([REF-1427]).</xhtml:p>",
			"effectiveness": "Moderate",
			"effectiveness_notes": "\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t"
		},
		{
			"method": "Fuzzing",
			"description": "<xhtml:p>Academic researchers have demonstrated that this weakness can be detected in hardware using software fuzzing tools that treat the underlying hardware as a black box ([REF-1428]).</xhtml:p>",
			"effectiveness": "Opportunistic",
			"effectiveness_notes": "\n\t\t\t\t\t\t\t\n\t\t\t\t\t"
		},
		{
			"method": "Fuzzing",
			"description": "<xhtml:p>Academic researchers have demonstrated that this weakness can be detected in software using software fuzzing tools ([REF-1429]).</xhtml:p>",
			"effectiveness": "Opportunistic",
			"effectiveness_notes": "\n\t\t\t\t\t\t\n\t\t\t\t\t"
		},
		{
			"method": "Automated Static Analysis",
			"description": "<xhtml:p>A variety of automated static analysis tools can identify\n\t\t\t\t\t\t\tpotentially exploitable code sequences in software. These tools may\n\t\t\t\t\t\t\tperform the analysis on source code, on binary code, or on an\n\t\t\t\t\t\t\tintermediate code representation (for example, during compilation).</xhtml:p>",
			"effectiveness": "Limited",
			"effectiveness_notes": "\n\t\t\t\t\t\t\t\n\t\t\t\t\t"
		},
		{
			"method": "Automated Analysis",
			"description": "<xhtml:p>Software vendors can release tools that detect presence of\n\t\t\t\t\t\t\tknown weaknesses on a processor. For example, some of these tools can\n\t\t\t\t\t\t\tattempt to transiently execute a vulnerable code sequence and detect\n\t\t\t\t\t\t\twhether code successfully leaks data in a manner consistent with the\n\t\t\t\t\t\t\tweakness under test. Alternatively, some hardware vendors provide\n\t\t\t\t\t\t\tenumeration for the presence of a weakness (or lack of a\n\t\t\t\t\t\t\tweakness). These enumeration bits can be checked and reported by\n\t\t\t\t\t\t\tsystem software. For example, Linux supports these checks for many\n\t\t\t\t\t\t\tcommodity processors:</xhtml:p>\n \t\t\t\t\t\t\t<xhtml:p>$ cat /proc/cpuinfo | grep bugs | head -n 1</xhtml:p>\n \t\t\t\t\t\t\t<xhtml:p>bugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed</xhtml:p>",
			"effectiveness": "High",
			"effectiveness_notes": "\n\t\t\t\t\t\t\t\n\t\t\t\t\t"
		}
	]
}
