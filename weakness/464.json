{
	"id": "464",
	"name": "Addition of Data Structure Sentinel",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The accidental addition of a data-structure sentinel can cause serious programming logic problems.",
	"extended_description": "Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "138",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"prevalence": "Undetermined",
				"name": "C"
			},
			{
				"prevalence": "Undetermined",
				"name": "C++"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"likelihood_of_exploit": "High",
	"common_consequences": [
		{
			"scope": [
				"Integrity"
			],
			"impact": [
				"Modify Application Data"
			],
			"note": "Generally this error will cause the data structure to not work properly by truncating the data."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Implementation",
				"Architecture and Design"
			],
			"description": [
				"Encapsulate the user from interacting with data sentinels. Validate user input to verify that sentinels are not present."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Proper error checking can reduce the risk of inadvertently introducing sentinel values into data. For example, if a parsing function fails or encounters an error, it might return a value that is the same as the sentinel."
			]
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Use an abstraction library to abstract away risky APIs. This is not a complete solution."
			]
		},
		{
			"phase": [
				"Operation"
			],
			"description": [
				"Use OS-level preventative functionality. This is not a complete solution."
			]
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n               <Intro_Text>The following example assigns some character values to a list of characters and prints them each individually, and then as a string. The third character value is intended to be an integer taken from user input and converted to an int.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>char *foo;<xhtml:br/>foo=malloc(sizeof(char)*5);<xhtml:br/>foo[0]='a';<xhtml:br/>foo[1]='a';<xhtml:br/>foo[2]=atoi(getc(stdin));<xhtml:br/>foo[3]='c';<xhtml:br/>foo[4]='\\0'<xhtml:br/>printf(\"%c %c %c %c %c \\n\",foo[0],foo[1],foo[2],foo[3],foo[4]);<xhtml:br/>printf(\"%s\\n\",foo);</xhtml:div>\n               </Example_Code>\n               <Body_Text>The first print statement will print each character separated by a space. However, if a non-integer is read from stdin by getc, then atoi will not make a conversion and return 0. When foo is printed as a string, the 0 at character foo[2] will act as a NULL terminator and foo[3] will never be printed.</Body_Text>\n            "
		}
	],
	"references": [
		{
			"reference_id": "REF-18",
			"author": [
				"Secure Software, Inc."
			],
			"title": "The CLASP Application Security Process",
			"url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
			"publication_year": "2005"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CLASP",
			"submission_date": "2006-07-19"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-11-24",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-07-27",
				"modification_comment": "updated Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-27",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-09-13",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Demonstrative_Examples, Likelihood_of_Exploit, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		],
		"previous_entry_name": [
			{
				"text": "Addition of Data-structure Sentinel",
				"date": "2008-04-11"
			}
		]
	},
	"taxonomy_mappings": [
		{
			"taxonomy_name": "CLASP",
			"entry_name": "Addition of data-structure sentinel"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not inadvertently truncate a null-terminated byte string",
			"entry_id": "STR03-C"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not assume that strtok() leaves the parse string unchanged",
			"entry_id": "STR06-C"
		}
	]
}
