{
	"id": "500",
	"name": "Public Static Field Not Marked Final",
	"abstraction": "Variant",
	"structure": "Simple",
	"status": "Draft",
	"description": "An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.",
	"extended_description": "Public static variables can be read without an accessor and changed without a mutator by any classes in the application.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "493",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"prevalence": "Undetermined",
				"name": "C++"
			},
			{
				"prevalence": "Undetermined",
				"name": "Java"
			}
		]
	},
	"background_details": [
		"When a field is declared public but not final, the field can be read and written to by arbitrary Java code."
	],
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"likelihood_of_exploit": "High",
	"common_consequences": [
		{
			"scope": [
				"Integrity"
			],
			"impact": [
				"Modify Application Data"
			],
			"note": "The object could potentially be tampered with."
		},
		{
			"scope": [
				"Confidentiality"
			],
			"impact": [
				"Read Application Data"
			],
			"note": "The object could potentially allow the object to be read."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Clearly identify the scope for all critical data elements, including whether they should be regarded as static."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"\n                  <xhtml:p>Make any static fields private and constant.</xhtml:p>\n                  <xhtml:p>A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java</xhtml:p>\n               "
			]
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n               <Intro_Text>The following examples use of a public static String variable to contain the name of a property/configuration file for the application.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C++\">\n                  <xhtml:div>class SomeAppClass {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>public:<xhtml:div style=\"margin-left:1em;\">static string appPropertiesConfigFile = \"app/properties.config\";</xhtml:div>\n                           <xhtml:br/>...</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>public class SomeAppClass {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>public static String appPropertiesFile = \"app/Application.properties\";<xhtml:br/>...</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>Having a public static variable that is not marked final (constant) may allow the variable to the altered in a way not intended by the application. In this example the String variable can be modified to indicate a different on nonexistent properties file which could cause the application to crash or caused unexpected behavior.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"C++\">\n                  <xhtml:div>class SomeAppClass {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>public:<xhtml:div style=\"margin-left:1em;\">static const string appPropertiesConfigFile = \"app/properties.config\";</xhtml:div>\n                           <xhtml:br/>...</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Good\" Language=\"Java\">\n                  <xhtml:div>public class SomeAppClass {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>public static final String appPropertiesFile = \"app/Application.properties\";<xhtml:br/>...</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		}
	],
	"references": [
		{
			"reference_id": "REF-18",
			"author": [
				"Secure Software, Inc."
			],
			"title": "The CLASP Application Security Process",
			"url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
			"publication_year": "2005",
			"url_date": "2024-11-17"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CLASP",
			"submission_date": "2006-07-19"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_organization": "KDM Analytics",
				"modification_date": "2008-08-01",
				"modification_comment": "added/updated white box definitions"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-11-05",
				"modification_comment": "Significant clarification of this entry, and improved examples."
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-11-24",
				"modification_comment": "updated Background_Details, Demonstrative_Examples, Description, Name, Other_Notes, Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-05-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Demonstrative_Examples, Description, Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated White_Box_Definitions"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		],
		"previous_entry_name": [
			{
				"text": "Overflow of Static Internal Buffer",
				"date": "2008-04-11"
			},
			{
				"text": "Static Field Not Marked Final",
				"date": "2008-11-24"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "CLASP",
			"entry_name": "Overflow of static internal buffer"
		},
		{
			"taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
			"entry_name": "Do not use public static nonfinal variables",
			"entry_id": "OBJ10-J"
		},
		{
			"taxonomy_name": "Software Fault Patterns",
			"entry_name": "Unexpected access points",
			"entry_id": "SFP28"
		}
	]
}
