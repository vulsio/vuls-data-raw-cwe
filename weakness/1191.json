{
	"id": "1191",
	"name": "On-Chip Debug and Test Interface With Improper Access Control",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Stable",
	"description": "The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.",
	"extended_description": "\n      <xhtml:p>A device's internal information may be accessed through a scan chain of interconnected internal registers, usually through a JTAG interface. The JTAG interface provides access to these registers in a serial fashion in the form of a scan chain for the purposes of debugging programs running on a device. Since almost all information contained within a device may be accessed over this interface, device manufacturers typically insert some form of authentication and authorization to prevent unintended use of this sensitive information. This mechanism is implemented in addition to on-chip protections that are already present.</xhtml:p>\n      <xhtml:p>If authorization, authentication, or some other form of access control is not implemented or not implemented correctly, a user may be able to bypass on-chip protection mechanisms through the debug interface.</xhtml:p>\n      <xhtml:p>Sometimes, designers choose not to expose the debug pins on the motherboard. Instead, they choose to hide these pins in the intermediate layers of the board. This is primarily done to work around the lack of debug authorization inside the chip. In such a scenario (without debug authorization), when the debug interface is exposed, chip internals are accessible to an attacker.</xhtml:p>\n     ",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "284",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"class": "Not Technology-Specific",
				"prevalence": "Undetermined"
			}
		],
		"operating_system": [
			{
				"class": "Not OS-Specific",
				"prevalence": "Undetermined"
			}
		],
		"architecture": [
			{
				"class": "Not Architecture-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Architecture and Design"
		},
		{
			"phase": "Implementation"
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Confidentiality"
			],
			"impact": [
				"Read Application Data"
			],
			"likelihood": "High"
		},
		{
			"scope": [
				"Confidentiality"
			],
			"impact": [
				"Read Memory"
			],
			"likelihood": "High"
		},
		{
			"scope": [
				"Authorization"
			],
			"impact": [
				"Execute Unauthorized Code or Commands"
			],
			"likelihood": "High"
		},
		{
			"scope": [
				"Integrity"
			],
			"impact": [
				"Modify Memory"
			],
			"likelihood": "High"
		},
		{
			"scope": [
				"Integrity"
			],
			"impact": [
				"Modify Application Data"
			],
			"likelihood": "High"
		},
		{
			"scope": [
				"Access Control"
			],
			"impact": [
				"Bypass Protection Mechanism"
			],
			"likelihood": "High"
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"\n\t   If feasible, the manufacturer should disable the JTAG interface or implement authentication and authorization for the JTAG interface. If authentication logic is added, it should be resistant to timing attacks. Security-sensitive data stored in registers, such as keys, etc. should be cleared when entering debug mode.\n\t "
			],
			"effectiveness": "High",
			"strategy": "Separation of Privilege"
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n        <Intro_Text>A home, WiFi-router device implements a login prompt which prevents an unauthorized user from issuing any commands on the device until appropriate credentials are provided. The credentials are protected on the device and are checked for strength against attack.</Intro_Text>\n        <Example_Code Nature=\"Bad\" Language=\"Other\">\n\t  <xhtml:p>If the JTAG interface on this device is not hidden by the manufacturer, the interface may be identified using tools such as JTAGulator. If it is hidden but not disabled, it can be exposed by physically wiring to the board.</xhtml:p>\n\t  <xhtml:p>By issuing a \"halt\" command before the OS starts, the unauthorized user pauses the watchdog timer and prevents the router from restarting (once the watchdog timer would have expired). Having paused the router, an unauthorized user is able to execute code and inspect and modify data in the device, even extracting all of the router's firmware. This allows the user to examine the router and potentially exploit it.</xhtml:p>\n\t</Example_Code>\n\t<Body_Text>JTAG is useful to chip and device manufacturers during design, testing, and production and is included in nearly every product. Without proper authentication and authorization, the interface may allow tampering with a product.</Body_Text>\n\t<Example_Code Nature=\"Good\" Language=\"Other\">In order to prevent exposing the debugging interface, manufacturers might try to obfuscate the JTAG interface or blow device internal fuses to disable the JTAG interface. Adding authentication and authorization to this interface makes use by unauthorized individuals much more difficult.</Example_Code>\n    "
		},
		{
			"text": "\n\t\t<Intro_Text>The following example code is a snippet from the JTAG wrapper module in the RISC-V debug module of the HACK@DAC'21 Openpiton SoC [REF-1355]. To make sure that the JTAG is accessed securely, the developers have included a primary authentication mechanism based on a password.</Intro_Text>\n\t\t<Body_Text>The developers employed a Finite State Machine (FSM) to implement this authentication. When a user intends to read from or write to the JTAG module, they must input a password.</Body_Text>\n\t\t<Body_Text>In the subsequent state of the FSM module, the entered password undergoes Hash-based Message Authentication Code (HMAC) calculation using an internal HMAC submodule. Once the HMAC for the entered password is computed by the HMAC submodule, the FSM transitions to the next state, where it compares the computed HMAC with the expected HMAC for the password.</Body_Text>\n\t\t<Body_Text>If the computed HMAC matches the expected HMAC, the FSM grants the user permission to perform read or write operations on the JTAG module. [REF-1352]</Body_Text>\n\t\t<Example_Code Nature=\"Bad\" Language=\"Verilog\">\n\t\t\t<xhtml:div>...<xhtml:br/>\n\t\t\t<xhtml:div style=\"margin-left:1em;\">PassChkValid: begin<xhtml:br/>\n\t\t\t\t<xhtml:div style=\"margin-left:1em;\">if(hashValid) begin<xhtml:br/>\n\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\"><xhtml:b>if(exp_hash == pass_hash) begin</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\"><xhtml:b>pass_check = 1'b1;</xhtml:b></xhtml:div>\n\t\t\t\t\t\t<xhtml:b>end else begin</xhtml:b>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\"><xhtml:b>pass_check = 1'b0;</xhtml:b></xhtml:div>\n\t\t\t\t\t\t<xhtml:b>end<xhtml:br/>\n\t\t\t\t\t\tstate_d = Idle;</xhtml:b>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\tend else begin\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">state_d = PassChkValid;</xhtml:div>\n\t\t\t\t\tend</xhtml:div>\n\t\t\t\tend</xhtml:div>\n\t\t\t...</xhtml:div>\n\t\t</Example_Code>\n\t\t<Body_Text>However, in the given vulnerable part of the code, the JTAG module has not defined a limitation for several continuous wrong password attempts. This omission poses a significant security risk, allowing attackers to carry out brute-force attacks without restrictions.</Body_Text>\n\t\t<Body_Text>Without a limitation on wrong password attempts, an attacker can repeatedly guess different passwords until they gain unauthorized access to the JTAG module. This leads to various malicious activities, such as unauthorized read from or write to debug module interface.</Body_Text>\n\t\t<Body_Text>To mitigate the mentioned vulnerability, developers need to implement a restriction on the number of consecutive incorrect password attempts allowed by the JTAG module, which can achieve by incorporating a mechanism that temporarily locks the module after a certain number of failed attempts.[REF-1353][REF-1354]</Body_Text>\n\t\t<Example_Code Nature=\"Good\" Language=\"Verilog\">\n\t\t\t<xhtml:div>...<xhtml:br/>\n\t\t\tcase (state_q)\n\t\t\t\t<xhtml:div style=\"margin-left:1em;\">Idle: begin<xhtml:br/>\n\t\t\t\t...\n\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">else if ( (dm::dtm_op_e'(dmi.op) == dm::DTM_PASS) &amp;&amp; <xhtml:b>(miss_pass_check_cnt_q != 2'b11)</xhtml:b> )<xhtml:br/>\n\t\t\t\t\tbegin\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">state_d = Write;<xhtml:br/>pass_mode = 1'b1;</xhtml:div>\n\t\t\t\t\tend</xhtml:div>\n\t\t\t\t...<xhtml:br/>\n\t\t\t\tend<xhtml:br/>\n\t\t\t\t...</xhtml:div>\n\t\t\t\t<xhtml:div style=\"margin-left:1em;\">PassChkValid: begin<xhtml:br/>\n\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">if(hashValid) begin<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">if(exp_hash == pass_hash) begin<xhtml:br/>\n\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">pass_check = 1'b1;</xhtml:div>\n\t\t\t\t\t\t\tend else begin\n\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">pass_check = 1'b0;<xhtml:br/>\n\t\t\t\t\t\t\t<xhtml:b>miss_pass_check_cnt_d = miss_pass_check_cnt_q + 1</xhtml:b>\n\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t\tend<xhtml:br/>\n\t\t\t\t\t\t\tstate_d = Idle;\n\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\tend else begin\n\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">state_d = PassChkValid;</xhtml:div>\n\t\t\t\t\t\tend</xhtml:div>\n\t\t\t\t\tend</xhtml:div>\n\t\t\t\t...</xhtml:div>\n\t\t</Example_Code>\n\t"
		},
		{
			"text": "\n\t\t<Intro_Text>The example code below is taken from the JTAG access control mechanism of the HACK@DAC'21 buggy OpenPiton SoC [REF-1364]. Access to JTAG allows users to access sensitive information in the system. Hence, access to JTAG is controlled using cryptographic authentication of the users. In this example (see the vulnerable code source), the password checker uses HMAC-SHA256 for authentication. It takes a 512-bit secret message from the user, hashes it using HMAC, and compares its output with the expected output to determine the authenticity of the user.</Intro_Text>\n\t\t<Example_Code Nature=\"Bad\" Language=\"Verilog\">\n\t\t...<xhtml:br/>\n\t\t<xhtml:b>logic [31-1:0] data_d,</xhtml:b> data_q;<xhtml:br/>\n\t\t...<xhtml:br/>\n\t\t<xhtml:b>logic [512-1:0] pass_data;</xhtml:b><xhtml:br/>\n\t\t...<xhtml:br/>\n\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\tWrite: begin<xhtml:br/>\n\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\tif (pass_mode) begin<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t<xhtml:b>pass_data = { {60{8'h00}}, data_d};</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t\tstate_d = PassChk;<xhtml:br/>\n\t\t\t\t\t\t\tpass_mode = 1'b0;<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t</xhtml:div>\n\t\t\t\t</xhtml:div>\n\t\t\tend<xhtml:br/>\n\t\t\t</xhtml:div>\n\t\t...<xhtml:br/>\n\t\t</Example_Code>\n\t\t<Body_Text>The vulnerable code shows an incorrect implementation of the HMAC authentication where it only uses the least significant 32 bits of the secret message for the authentication (the remaining 480 bits are hard coded as zeros). As a result, the system is susceptible to brute-force attacks on the access control mechanism of JTAG, where the attacker only needs to determine 32 bits of the secret message instead of 512 bits.</Body_Text>\n\t\t<Body_Text>To mitigate this issue, remove the zero padding and use all 512 bits of the secret message for HMAC authentication [REF-1365].</Body_Text>\n\t\t<Example_Code Nature=\"Good\" Language=\"Verilog\">\n\t\t...<xhtml:br/>\n\t\t<xhtml:b>logic [512-1:0] data_d,</xhtml:b> data_q;<xhtml:br/>\n\t\t...<xhtml:br/>\n\t\tlogic [512-1:0] pass_data;<xhtml:br/>\n\t\t...<xhtml:br/>\n\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\tWrite: begin<xhtml:br/>\n\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\tif (pass_mode) begin<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t<xhtml:b>pass_data = data_d;</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t\tstate_d = PassChk;<xhtml:br/>\n\t\t\t\t\t\t\tpass_mode = 1'b0;<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t</xhtml:div>\n\t\t\t\t</xhtml:div>\n\t\t\tend<xhtml:br/>\n\t\t\t</xhtml:div>\n\t\t...<xhtml:br/>\n\t\t</Example_Code>\n\t"
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2019-18827",
			"description": "chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys",
			"link": "https://www.cve.org/CVERecord?id=CVE-2019-18827"
		}
	],
	"references": [
		{
			"reference_id": "REF-1037",
			"author": [
				"Kurt Rosenfeld",
				"Ramesh Karri"
			],
			"title": "Attacks and Defenses for JTAG",
			"url": "https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=5406671",
			"publication_year": "2010",
			"publication_month": "--02"
		},
		{
			"reference_id": "REF-1043",
			"author": [
				"Gopal Vishwakarma",
				"Wonjun Lee"
			],
			"title": "Exploiting JTAG and Its Mitigation in IOT: A Survey",
			"url": "https://www.mdpi.com/1999-5903/10/12/121/pdf",
			"publication_year": "2018",
			"publication_month": "--12",
			"publication_day": "---03",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-1084",
			"author": [
				"Gopal Vishwakarma",
				"Wonjun Lee"
			],
			"title": "JTAG Explained (finally!): Why \"IoT\", Software Security Engineers, and Manufacturers Should Care",
			"url": "https://www.mdpi.com/1999-5903/10/12/121/pdf",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-1085",
			"author": [
				"Bob Molyneaux",
				"Mark McDermott",
				"Anil Sabbavarapu"
			],
			"title": "Design for Testability & Design for Debug",
			"url": "http://users.ece.utexas.edu/~mcdermot/vlsi-2/Lecture_17.pdf"
		},
		{
			"reference_id": "REF-1355",
			"author": [
				"Florian Zaruba"
			],
			"title": "dmi_jtag.sv",
			"url": "https://github.com/HACK-EVENT/hackatdac21/blob/71103971e8204de6a61afc17d3653292517d32bf/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L192:L204",
			"publication_year": "2021",
			"url_date": "2023-09-18"
		},
		{
			"reference_id": "REF-1354",
			"author": [
				"Florian Zaruba"
			],
			"title": "Fix CWE-1191 in dmi_jtag.sv",
			"url": "https://github.com/HACK-EVENT/hackatdac21/blob/58f984d492fdb0369c82ef10fcbbaa4b9850f9fb/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L200",
			"publication_year": "2021",
			"url_date": "2023-09-18"
		},
		{
			"reference_id": "REF-1353",
			"author": [
				"Florian Zaruba"
			],
			"title": "Fix CWE-1191 in dmi_jtag.sv",
			"url": "https://github.com/HACK-EVENT/hackatdac21/blob/58f984d492fdb0369c82ef10fcbbaa4b9850f9fb/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L131",
			"publication_year": "2021",
			"url_date": "2023-09-18"
		},
		{
			"reference_id": "REF-1352",
			"author": [
				"Florian Zaruba"
			],
			"title": "dmi_jtag.sv",
			"url": "https://github.com/HACK-EVENT/hackatdac21/blob/71103971e8204de6a61afc17d3653292517d32bf/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L118:L204",
			"publication_year": "2021",
			"url_date": "2023-09-18"
		},
		{
			"reference_id": "REF-1364",
			"title": "dmi_jtag.sv",
			"url": "https://github.com/HACK-EVENT/hackatdac21/blob/71103971e8204de6a61afc17d3653292517d32bf/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L82",
			"publication_year": "2021",
			"url_date": "2023-07-15"
		},
		{
			"reference_id": "REF-1365",
			"title": "fix cwe_1205 in dmi_jtag.sv",
			"url": "https://github.com/HACK-EVENT/hackatdac21/blob/c4f4b832218b50c406dbf9f425d3b654117c1355/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L158",
			"publication_year": "2021",
			"url_date": "2023-07-22"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi",
			"submission_organization": "Intel Corporation",
			"submission_date": "2019-10-15"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-06-25",
				"modification_comment": "updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Name, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Potential_Mitigations, Related_Attack_Patterns, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-03-15",
				"modification_comment": "updated Maintenance_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Demonstrative_Examples, Description, Detection_Factors, Maintenance_Notes, Name, Potential_Mitigations, Relationship_Notes, Relationships, Weakness_Ordinalities"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-04-28",
				"modification_comment": "updated Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-10-13",
				"modification_comment": "updated Description, Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-10-26",
				"modification_comment": "updated Demonstrative_Examples, References"
			}
		],
		"previous_entry_name": [
			{
				"text": "Exposed Chip Debug Interface With Insufficient Access Control",
				"date": "2020-02-26"
			},
			{
				"text": "Exposed Chip Debug and or Test Interface With Insufficient Access Control",
				"date": "2020-08-20"
			},
			{
				"text": "Exposed Chip Debug and Test Interface With Insufficient or Missing Authorization",
				"date": "2021-10-28"
			}
		],
		"contribution": [
			{
				"type": "Content",
				"contribution_name": "Parbati K. Manna",
				"contribution_organization": "Intel Corporation",
				"contribution_date": "2021-10-18",
				"contribution_comment": "provided detection methods"
			},
			{
				"type": "Feedback",
				"contribution_name": "Narasimha Kumar V Mangipudi",
				"contribution_organization": "Lattice Semiconductor",
				"contribution_date": "2021-10-20",
				"contribution_comment": "reviewed content changes"
			},
			{
				"type": "Content",
				"contribution_name": "Hareesh Khattri",
				"contribution_organization": "Intel Corporation",
				"contribution_date": "2021-10-22",
				"contribution_comment": "clarified differences between CWE-1191 and CWE-1244"
			},
			{
				"type": "Content",
				"contribution_name": "Arun Kanuparthi",
				"contribution_organization": "Intel Corporation",
				"contribution_date": "2021-10-27",
				"contribution_comment": "suggested additional detail in extended description"
			},
			{
				"type": "Content",
				"contribution_name": "Shaza Zeitouni, Mohamadreza Rostami, Pouya Mahmoody, Ahmad-Reza Sadeghi",
				"contribution_organization": "Technical University of Darmstadt",
				"contribution_date": "2023-06-21",
				"contribution_comment": "suggested demonstrative example"
			},
			{
				"type": "Content",
				"contribution_name": "Rahul Kande, Chen Chen, Jeyavijayan Rajendran",
				"contribution_organization": "Texas A&M University",
				"contribution_date": "2023-06-21",
				"contribution_comment": "suggested demonstrative example"
			}
		]
	},
	"weakness_ordinalities": [
		{
			"ordinality": "Primary"
		}
	],
	"detection_methods": [
		{
			"method": "Dynamic Analysis with Manual Results Interpretation",
			"description": "<xhtml:p>Authentication and authorization of debug and test interfaces should be part of the architecture and design review process. Withholding of private register documentation from the debug and test interface public specification (\"Security by obscurity\") should not be considered as sufficient security.</xhtml:p>"
		},
		{
			"method": "Dynamic Analysis with Manual Results Interpretation",
			"description": "<xhtml:p>Dynamic tests should be done in the pre-silicon and post-silicon stages to verify that the debug and test interfaces are not open by default.</xhtml:p>"
		},
		{
			"method": "Fuzzing",
			"description": "Tests that fuzz Debug and Test Interfaces should ensure that no access without appropriate authentication and authorization is possible.",
			"effectiveness": "Moderate"
		}
	],
	"related_attack_patterns": [
		"1",
		"180"
	],
	"notes": [
		{
			"type": "Relationship",
			"text": "\n\t  CWE-1191 and CWE-1244 both involve physical debug access,\n\t  but the weaknesses are different. CWE-1191 is effectively\n\t  about missing authorization for a debug interface,\n\t  i.e. JTAG.  CWE-1244 is about providing internal assets with\n\t  the wrong debug access level, exposing the asset to\n\t  untrusted debug agents."
		}
	]
}
