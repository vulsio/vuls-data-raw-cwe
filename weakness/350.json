{
  "id": "350",
  "name": "Reliance on Reverse DNS Resolution for a Security-Critical Action",
  "abstraction": "Variant",
  "structure": "Simple",
  "status": "Draft",
  "description": "The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.",
  "extended_description": "\n            <xhtml:p>Since DNS names can be easily spoofed or misreported, and it may be difficult for the product to detect if a trusted DNS server has been compromised, DNS names do not constitute a valid authentication mechanism.</xhtml:p>\n            <xhtml:p>When the product performs a reverse DNS resolution for an IP address, if an attacker controls the DNS server for that IP address, then the attacker can cause the server to return an arbitrary hostname. As a result, the attacker may be able to bypass authentication, cause the wrong hostname to be recorded in log files to hide activities, or perform other attacks.</xhtml:p>\n            <xhtml:p>Attackers can spoof DNS names by either (1) compromising a DNS server and modifying its records (sometimes called DNS cache poisoning), or (2) having legitimate control over a DNS server associated with their IP address.</xhtml:p>\n         ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "290",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "807",
      "view_id": "1000"
    },
    {
      "nature": "CanPrecede",
      "cweid": "923",
      "view_id": "1000"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Not Language-Specific",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Access Control"
      ],
      "impact": [
        "Gain Privileges or Assume Identity",
        "Bypass Protection Mechanism"
      ],
      "note": "Malicious users can fake authentication information by providing false DNS information."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate."
      ]
    },
    {
      "mitigation_id": "MIT-42",
      "phase": [
        "Implementation"
      ],
      "description": [
        "Perform proper forward and reverse DNS lookups to detect DNS spoofing."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-93",
      "text": "\n               <Intro_Text>The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>struct hostent *hp;struct in_addr myaddr;<xhtml:br/>char* tHost = \"trustme.example.com\";<xhtml:br/>myaddr.s_addr=inet_addr(ip_addr_string);<xhtml:br/>\n                     <xhtml:br/>hp = gethostbyaddr((char *) &amp;myaddr, sizeof(struct in_addr), AF_INET);<xhtml:br/>if (hp &amp;&amp; !strncmp(hp-&gt;h_name, tHost, sizeof(tHost))) {<xhtml:div style=\"margin-left:1em;\">trusted = true;</xhtml:div>} else {<xhtml:div style=\"margin-left:1em;\">trusted = false;</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>String ip = request.getRemoteAddr();<xhtml:br/>InetAddress addr = InetAddress.getByName(ip);<xhtml:br/>if (addr.getCanonicalHostName().endsWith(\"trustme.com\")) {<xhtml:div style=\"margin-left:1em;\">trusted = true;</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"C#\">\n                  <xhtml:div>IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);<xhtml:br/>IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);<xhtml:br/>if (hostInfo.HostName.EndsWith(\"trustme.com\")) {<xhtml:div style=\"margin-left:1em;\">trusted = true;</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.</Body_Text>\n            "
    },
    {
      "text": "\n               <Intro_Text>In these examples, a connection is established if a request is made by a trusted host.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>sd = socket(AF_INET, SOCK_DGRAM, 0);<xhtml:br/>serv.sin_family = AF_INET;<xhtml:br/>serv.sin_addr.s_addr = htonl(INADDR_ANY);<xhtml:br/>servr.sin_port = htons(1008);<xhtml:br/>bind(sd, (struct sockaddr *) &amp; serv, sizeof(serv));<xhtml:br/>while (1) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>memset(msg, 0x0, MAX_MSG);<xhtml:br/>clilen = sizeof(cli);<xhtml:br/>h=gethostbyname(inet_ntoa(cliAddr.sin_addr));<xhtml:br/>if (h-&gt;h_name==...) n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) &amp; cli, &amp;clilen);</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>while(true) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>DatagramPacket rp=new DatagramPacket(rData,rData.length);<xhtml:br/>outSock.receive(rp);<xhtml:br/>String in = new String(p.getData(),0, rp.getLength());<xhtml:br/>InetAddress IPAddress = rp.getAddress();<xhtml:br/>int port = rp.getPort();<xhtml:br/>if ((rp.getHostName()==...) &amp; (in==...)) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>out = secret.getBytes();<xhtml:br/>DatagramPacket sp =new DatagramPacket(out,out.length, IPAddress, port);<xhtml:br/>outSock.send(sp);</xhtml:div>\n                           </xhtml:div>}</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>These examples check if a request is from a trusted host before responding to a request, but the code only verifies the hostname as stored in the request packet. An attacker can spoof the hostname, thus impersonating a trusted client.</Body_Text>\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2001-1488",
      "description": "Does not do double-reverse lookup to prevent DNS spoofing.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2001-1488"
    },
    {
      "reference": "CVE-2001-1500",
      "description": "Does not verify reverse-resolved hostnames in DNS.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2001-1500"
    },
    {
      "reference": "CVE-2000-1221",
      "description": "Authentication bypass using spoofed reverse-resolved DNS hostnames.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2000-1221"
    },
    {
      "reference": "CVE-2002-0804",
      "description": "Authentication bypass using spoofed reverse-resolved DNS hostnames.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2002-0804"
    },
    {
      "reference": "CVE-2001-1155",
      "description": "Filter does not properly check the result of a reverse DNS lookup, which could allow remote attackers to bypass intended access restrictions via DNS spoofing.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2001-1155"
    },
    {
      "reference": "CVE-2004-0892",
      "description": "Reverse DNS lookup used to spoof trusted content in intermediary.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2004-0892"
    },
    {
      "reference": "CVE-2003-0981",
      "description": "Product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2003-0981"
    }
  ],
  "references": [
    {
      "reference_id": "REF-18",
      "author": [
        "Secure Software, Inc."
      ],
      "title": "The CLASP Application Security Process",
      "url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
      "publication_year": "2005"
    },
    {
      "section": "\"Sin 15: Not Updating Easily.\" Page 231",
      "reference_id": "REF-44",
      "author": [
        "Michael Howard",
        "David LeBlanc",
        "John Viega"
      ],
      "title": "24 Deadly Sins of Software Security",
      "publication_year": "2010",
      "publication": "McGraw-Hill"
    },
    {
      "section": "\"Sin 24: Trusting Network Name Resolution.\" Page 361",
      "reference_id": "REF-44",
      "author": [
        "Michael Howard",
        "David LeBlanc",
        "John Viega"
      ],
      "title": "24 Deadly Sins of Software Security",
      "publication_year": "2010",
      "publication": "McGraw-Hill"
    },
    {
      "section": "Chapter 16, \"DNS Spoofing\", Page 1002",
      "reference_id": "REF-62",
      "author": [
        "Mark Dowd",
        "John McDonald",
        "Justin Schuh"
      ],
      "title": "The Art of Software Security Assessment",
      "publication_year": "2006",
      "publisher": "Addison Wesley",
      "edition": "1st Edition"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "PLOVER",
      "submission_date": "2006-07-19"
    },
    "modification": [
      {
        "modification_name": "Sean Eidemiller",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01",
        "modification_comment": "added/updated demonstrative examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-05-27",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-09-27",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11",
        "modification_comment": "updated Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2013-06-23",
        "modification_comment": "CWE-247 and CWE-292 deprecated and merged into CWE-350 to address duplicates.",
        "modification_importance": "Critical"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2013-07-17",
        "modification_comment": "updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Maintenance_Notes, Name, Potential_Mitigations, References, Relationships, Taxonomy_Mappings, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-02-18",
        "modification_comment": "updated Description, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30",
        "modification_comment": "updated Demonstrative_Examples, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-05-03",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08",
        "modification_comment": "updated Demonstrative_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24",
        "modification_comment": "updated References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-10-13",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-01-31",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Detection_Factors, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Improperly Trusted Reverse DNS",
        "date": "2013-07-17"
      }
    ]
  },
  "detection_methods": [
    {
      "detection_method_id": "DM-14",
      "method": "Automated Static Analysis",
      "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "effectiveness": "High"
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "PLOVER",
      "entry_name": "Improperly Trusted Reverse DNS"
    },
    {
      "taxonomy_name": "CLASP",
      "entry_name": "Trusting self-reported DNS name"
    },
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Faulty endpoint authentication",
      "entry_id": "SFP29"
    }
  ],
  "related_attack_patterns": [
    "142",
    "275",
    "73",
    "89"
  ],
  "notes": [
    {
      "type": "Maintenance",
      "text": "CWE-350, CWE-247, and CWE-292 were merged into CWE-350 in CWE 2.5. CWE-247 was originally derived from Seven Pernicious Kingdoms, CWE-350 from PLOVER, and CWE-292 from CLASP. All taxonomies focused closely on the use of reverse DNS for authentication of incoming requests."
    }
  ]
}
