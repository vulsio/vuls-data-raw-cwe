{
	"id": "598",
	"name": "Use of GET Request Method With Sensitive Query Strings",
	"abstraction": "Variant",
	"structure": "Simple",
	"status": "Draft",
	"description": "The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that request.",
	"extended_description": "The query string for the URL could be saved in the browser's history, passed through Referers to other web sites, stored in web logs, or otherwise recorded in other sources.  If the query string contains sensitive information such as session identifiers, then attackers can use this information to launch further attacks.\n\t ",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "201",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {},
	"modes_of_introduction": [
		{
			"phase": "Architecture and Design"
		},
		{
			"phase": "Implementation"
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Confidentiality"
			],
			"impact": [
				"Read Application Data"
			],
			"note": "At a minimum, attackers can garner information from query strings that can be utilized in escalating their method of attack, such as information about the internal workings of the application or database column names. Successful exploitation of query string parameter vulnerabilities could lead to an attacker impersonating a legitimate user, obtaining proprietary data, or simply executing actions not intended by the application developers."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"When sensitive information is sent, use the POST method (e.g. registration form)."
			]
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2022-23546",
			"description": "A discussion platform leaks private information in GET requests.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2022-23546"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Community",
			"submission_date": "2006-12-15",
			"submission_comment": "Submitted by members of the CWE community to extend early CWE versions"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Relationships, Other_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-03-10",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-03-29",
				"modification_comment": "updated Name"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences, Other_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Description, Name, Potential_Mitigations, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-07-20",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-10-26",
				"modification_comment": "updated Observed_Examples"
			}
		],
		"previous_entry_name": [
			{
				"text": "Information Leak Through GET Request",
				"date": "2008-04-11"
			},
			{
				"text": "Information Leak Through Query Strings in GET Request",
				"date": "2011-03-29"
			},
			{
				"text": "Information Exposure Through Query Strings in GET Request",
				"date": "2020-02-24"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "Software Fault Patterns",
			"entry_name": "Exposed Data",
			"entry_id": "SFP23"
		}
	]
}
