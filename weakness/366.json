{
	"id": "366",
	"name": "Race Condition within a Thread",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Draft",
	"description": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "362",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "662",
			"view_id": "1305",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "662",
			"view_id": "1340",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"prevalence": "Undetermined",
				"name": "C"
			},
			{
				"prevalence": "Undetermined",
				"name": "C++"
			},
			{
				"prevalence": "Undetermined",
				"name": "Java"
			},
			{
				"prevalence": "Undetermined",
				"name": "C#"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"likelihood_of_exploit": "Medium",
	"common_consequences": [
		{
			"scope": [
				"Integrity",
				"Other"
			],
			"impact": [
				"Alter Execution Logic",
				"Unexpected State"
			],
			"note": "The main problem is that -- if a lock is overcome -- data could be altered in a bad state."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment."
			]
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution."
			]
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>int foo = 0;<xhtml:br/>int storenum(int num) {<xhtml:div style=\"margin-left:1em;\">static int counter = 0;<xhtml:br/>counter++;<xhtml:br/>if (num &gt; foo) foo = num;<xhtml:br/>return foo;</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>public classRace {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>static int foo = 0;<xhtml:br/>public static void main() {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>new Threader().start();<xhtml:br/>foo = 1;</xhtml:div>\n                           </xhtml:div>}<xhtml:br/>public static class Threader extends Thread {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>public void run() {<xhtml:div style=\"margin-left:1em;\">System.out.println(foo);</xhtml:div>}</xhtml:div>\n                           </xhtml:div>}</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2022-2621",
			"description": "Chain: two threads in a web browser use the same resource (CWE-366), but one of those threads can destroy the resource before the other has completed (CWE-416).",
			"link": "https://www.cve.org/CVERecord?id=CVE-2022-2621"
		}
	],
	"references": [
		{
			"reference_id": "REF-18",
			"author": [
				"Secure Software, Inc."
			],
			"title": "The CLASP Application Security Process",
			"url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
			"publication_year": "2005",
			"url_date": "2024-11-17"
		},
		{
			"section": "\"Sin 13: Race Conditions.\" Page 205",
			"reference_id": "REF-44",
			"author": [
				"Michael Howard",
				"David LeBlanc",
				"John Viega"
			],
			"title": "24 Deadly Sins of Software Security",
			"publication_year": "2010",
			"publication": "McGraw-Hill"
		},
		{
			"section": "Chapter 13, \"Race Conditions\", Page 759",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CLASP",
			"submission_date": "2006-07-19"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Applicable_Platforms, Common_Consequences, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-11-24",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-09-27",
				"modification_comment": "updated Potential_Mitigations, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-27",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-09-13",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Demonstrative_Examples, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-12-10",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-03-15",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-04-28",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-10-26",
				"modification_comment": "updated Observed_Examples"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "CLASP",
			"entry_name": "Race condition within a thread"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Prevent data races when accessing bit-fields from multiple threads",
			"entry_id": "CON32-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not refer to an atomic variable twice in an expression",
			"entry_id": "CON40-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not allow data races in multithreaded code",
			"entry_id": "CON43-C",
			"mapping_fit": "Exact"
		},
		{
			"taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
			"entry_name": "Ensure that compound operations on shared variables are atomic",
			"entry_id": "VNA02-J"
		},
		{
			"taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
			"entry_name": "Do not assume that a group of calls to independently atomic methods is atomic",
			"entry_id": "VNA03-J"
		},
		{
			"taxonomy_name": "Software Fault Patterns",
			"entry_name": "Missing Lock",
			"entry_id": "SFP19"
		}
	],
	"related_attack_patterns": [
		"26",
		"29"
	],
	"affected_resources": [
		"System Process"
	]
}
