{
	"id": "1419",
	"name": "Incorrect Initialization of Resource",
	"abstraction": "Class",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The product attempts to initialize a resource but does not correctly do so, which might leave the resource in an unexpected, incorrect, or insecure state when it is accessed.",
	"extended_description": "\n\t\t\t\t<xhtml:p>This can have security implications when the associated resource is expected to have certain properties or values. Examples include a variable that determines whether a user has been authenticated or not, or a register or fuse value that determines the security state of the product.</xhtml:p>\n\t\t\t\t<xhtml:p>For software, this weakness can frequently occur when implicit initialization is used, meaning the resource is not explicitly set to a specific value. For example, in C, memory is not necessarily cleared when it is allocated on the stack, and many scripting languages use a default empty, null value, or zero value when a variable is not explicitly initialized.</xhtml:p>\n\t\t\t\t<xhtml:p>For hardware, this weakness frequently appears with reset values and fuses. After a product reset, hardware may initialize registers incorrectly. During different phases of a product lifecycle, fuses may be set to incorrect values. Even if fuses are set to correct values, the lines to the fuse could be broken or there might be hardware on the fuse line that alters the fuse value to be incorrect.</xhtml:p>\n\t\t\t",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "665",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"class": "Not Technology-Specific",
				"prevalence": "Undetermined"
			}
		],
		"operating_system": [
			{
				"class": "Not OS-Specific",
				"prevalence": "Undetermined"
			}
		],
		"architecture": [
			{
				"class": "Not Architecture-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		},
		{
			"phase": "Manufacturing"
		},
		{
			"phase": "Installation"
		},
		{
			"phase": "System Configuration"
		},
		{
			"phase": "Operation"
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Confidentiality"
			],
			"impact": [
				"Read Memory",
				"Read Application Data",
				"Unexpected State"
			],
			"likelihood": "Unknown"
		},
		{
			"scope": [
				"Authorization",
				"Integrity"
			],
			"impact": [
				"Gain Privileges or Assume Identity"
			]
		},
		{
			"scope": [
				"Other"
			],
			"impact": [
				"Varies by Context"
			],
			"note": "The technical impact can vary widely based on how the resource is used in the product, and whether its contents affect security decisions."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Choose the safest-possible initialization for security-related resources."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Ensure that each resource (whether variable, memory buffer, register, etc.) is fully initialized."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Pay close attention to complex conditionals or reset sources   that affect initialization, since some paths might not perform the initialization."
			]
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Ensure that the design and architecture clearly identify what the initialization should be, and that the initialization does not have security implications."
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-162",
			"text": "\n                <Intro_Text>Consider example design module system verilog code shown below. The register_example module is an example parameterized module that defines two parameters, REGISTER_WIDTH and REGISTER_DEFAULT. Register_example module defines a Secure_mode setting, which when set makes the register content read-only and not modifiable by software writes. register_top module instantiates two registers, Insecure_Device_ID_1 and Insecure_Device_ID_2. Generally, registers containing device identifier values are required to be read only to prevent any possibility of software modifying these values. </Intro_Text>\n                <Example_Code Nature=\"Bad\" Language=\"Verilog\">\n                  // Parameterized Register module example <xhtml:br/>\n\t\t\t\t  // Secure_mode : REGISTER_DEFAULT[0] : When set to 1 register is read only and not writable// <xhtml:br/>\n\t\t\t\t  module register_example <xhtml:br/>\n\t\t\t\t  #( <xhtml:br/>\n\t\t\t\t  parameter REGISTER_WIDTH = 8, // Parameter defines width of register, default 8 bits <xhtml:br/>\n\t\t\t\t  parameter [REGISTER_WIDTH-1:0] REGISTER_DEFAULT = 2**REGISTER_WIDTH -2 // Default value of register computed from Width. Sets all bits to 1s except bit 0 (Secure _mode) <xhtml:br/>\n\t\t\t\t  ) <xhtml:br/>\n\t\t\t\t  ( <xhtml:br/>\n\t\t\t\t  input [REGISTER_WIDTH-1:0] Data_in, <xhtml:br/>\n\t\t\t\t  input Clk, <xhtml:br/>\n\t\t\t\t  input resetn, <xhtml:br/>\n\t\t\t\t  input write, <xhtml:br/>\n\t\t\t\t  output reg [REGISTER_WIDTH-1:0] Data_out <xhtml:br/>\n\t\t\t\t  ); <xhtml:br/>\n\t\t\t\t  <xhtml:br/>\n\t\t\t\t  reg Secure_mode; <xhtml:br/>\n\t\t\t\t  <xhtml:br/>\n\t\t\t\t  always @(posedge Clk or negedge resetn) <xhtml:br/>\n\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\tif (~resetn) <xhtml:br/>\n\t\t\t\t\tbegin <xhtml:br/>\n\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t  Data_out &lt;= REGISTER_DEFAULT; // Register content set to Default at reset <xhtml:br/>\n\t\t\t\t\t  Secure_mode &lt;= REGISTER_DEFAULT[0]; // Register Secure_mode set at reset <xhtml:br/>\n\t\t\t\t\t</xhtml:div>\n\t\t\t\t\tend <xhtml:br/>\n\t\t\t\t\telse if (write &amp; ~Secure_mode) <xhtml:br/>\n\t\t\t\t\tbegin <xhtml:br/>\n\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t  Data_out &lt;= Data_in; <xhtml:br/>\n\t\t\t\t\t</xhtml:div>\n\t\t\t\t\tend <xhtml:br/>\n\t\t\t\t  </xhtml:div>\n\t\t\t\t  endmodule <xhtml:br/>\n                  <xhtml:br/>\n                  <xhtml:br/>\n\t\t\t\t  module register_top <xhtml:br/>\n\t\t\t\t  ( <xhtml:br/>\n\t\t\t\t  input Clk, <xhtml:br/>\n\t\t\t\t  input resetn, <xhtml:br/>\n\t\t\t\t  input write, <xhtml:br/>\n\t\t\t\t  input [31:0] Data_in, <xhtml:br/>\n\t\t\t\t  output reg [31:0] Secure_reg, <xhtml:br/>\n\t\t\t\t  output reg [31:0] Insecure_reg <xhtml:br/>\n\t\t\t\t  ); <xhtml:br/>\n\t\t\t\t  <xhtml:br/>\n\t\t\t\t  register_example #( <xhtml:br/>\n\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t.REGISTER_WIDTH (32), <xhtml:br/>\n\t\t\t\t\t.REGISTER_DEFAULT (1224) // Incorrect Default value used bit 0 is 0. <xhtml:br/>\n\t\t\t\t  </xhtml:div>\n\t\t\t\t  ) Insecure_Device_ID_1 ( <xhtml:br/>\n\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t.Data_in (Data_in), <xhtml:br/>\n\t\t\t\t\t.Data_out (Secure_reg), <xhtml:br/>\n\t\t\t\t\t.Clk (Clk), <xhtml:br/>\n\t\t\t\t\t.resetn (resetn), <xhtml:br/>\n\t\t\t\t\t.write (write) <xhtml:br/>\n\t\t\t\t  </xhtml:div>\n\t\t\t\t  ); <xhtml:br/>\n                  <xhtml:br/>\n\t\t\t\t  register_example #(<xhtml:br/>\n\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t.REGISTER_WIDTH (32) // Default not defined 2^32-2 value will be used as default. <xhtml:br/>\n\t\t\t\t  </xhtml:div>\n\t\t\t\t  ) Insecure_Device_ID_2 ( <xhtml:br/>\n\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t.Data_in (Data_in), <xhtml:br/>\n\t\t\t\t\t.Data_out (Insecure_reg), <xhtml:br/>\n\t\t\t\t\t.Clk (Clk), <xhtml:br/>\n\t\t\t\t\t.resetn (resetn), <xhtml:br/>\n\t\t\t\t\t.write (write) <xhtml:br/>\n\t\t\t\t  </xhtml:div>\n\t\t\t\t  ); <xhtml:br/>\n                  <xhtml:br/>\n\t\t\t\t  endmodule <xhtml:br/>\n                </Example_Code>\n                <Body_Text>These example instantiations show how, in a hardware design, it would be possible to instantiate the register module with insecure defaults and parameters.</Body_Text>\n                <Body_Text>In the example design, both registers will be software writable since Secure_mode is defined as zero. </Body_Text>\n                <Example_Code Nature=\"Good\" Language=\"Verilog\">\n                  register_example #( <xhtml:br/>\n\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t.REGISTER_WIDTH (32), <xhtml:br/>\n\t\t\t\t\t.REGISTER_DEFAULT (1225) // Correct default value set, to enable Secure_mode <xhtml:br/>\n\t\t\t\t  </xhtml:div>\n\t\t\t\t  ) Secure_Device_ID_example ( <xhtml:br/>\n\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t.Data_in (Data_in), <xhtml:br/>\n\t\t\t\t\t.Data_out (Secure_reg), <xhtml:br/>\n\t\t\t\t\t.Clk (Clk), <xhtml:br/>\n\t\t\t\t\t.resetn (resetn), <xhtml:br/>\n\t\t\t\t\t.write (write) <xhtml:br/>\n\t\t\t\t  </xhtml:div>\n\t\t\t\t  );\n                </Example_Code>\n              "
		},
		{
			"demonstrative_example_id": "DX-163",
			"text": "\n\t\t\t\t<Intro_Text>This code attempts to login a user using credentials from a POST request:</Intro_Text>\n\t\t\t\t<Example_Code Nature=\"Bad\" Language=\"PHP\">\n                  <xhtml:div>\n                    <xhtml:br/>\n                    <xhtml:i>// $user and $pass automatically set from POST request</xhtml:i>\n                    <xhtml:br/>if (login_user($user,$pass)) {<xhtml:div style=\"margin-left:1em;\">$authorized = true;</xhtml:div>}<xhtml:br/>\n                    <xhtml:i>...</xhtml:i>\n                    <xhtml:br/>\n                  <xhtml:br/>if ($authorized) {<xhtml:div style=\"margin-left:1em;\">generatePage();</xhtml:div>}</xhtml:div>\n\t\t\t\t</Example_Code>\n\t\t\t\t<Body_Text>Because the $authorized variable is never initialized, PHP will automatically set $authorized to any value included in the POST request if register_globals is enabled. An attacker can send a POST request with an unexpected third value 'authorized' set to 'true' and gain authorized status without supplying valid credentials.</Body_Text>\n\t\t\t\t<Body_Text>Here is a fixed version:</Body_Text>\n\t\t\t\t<Example_Code Nature=\"Good\" Language=\"PHP\">\n                  <xhtml:div>$user = $_POST['user'];<xhtml:br/>$pass = $_POST['pass'];<xhtml:br/>$authorized = false;<xhtml:br/>if (login_user($user,$pass)) {<xhtml:div style=\"margin-left:1em;\">$authorized = true;</xhtml:div>}<xhtml:br/>\n                  <xhtml:i>...</xhtml:i>\n                  <xhtml:br/>\n                  </xhtml:div>\n\t\t\t\t</Example_Code>\n\t\t\t\t<Body_Text>This code avoids the issue by initializing the $authorized variable to false and explicitly retrieving the login credentials from the $_POST variable. Regardless, register_globals should never be enabled and is disabled by default in current versions of PHP.</Body_Text>\n              "
		},
		{
			"demonstrative_example_id": "DX-222",
			"text": "\n\t\t\t\t\t<Intro_Text>The following example code is excerpted from the Access Control module, acct_wrapper, in the Hack@DAC'21 buggy OpenPiton System-on-Chip (SoC). Within this module, a set of memory-mapped I/O registers, referred to as acct_mem, each 32-bit wide, is utilized to store access control permissions for peripherals [REF-1437]. Access control registers are typically used to define and enforce permissions and access rights for various system resources.</Intro_Text>\n\t\t\t\t\t<Body_Text>However, in the buggy SoC, these registers are all enabled at reset, i.e., essentially granting unrestricted access to all system resources [REF-1438]. This will introduce security vulnerabilities and risks to the system, such as privilege escalation or exposing sensitive information to unauthorized users or processes.</Body_Text>\n\t\t\t\t\t<Example_Code Nature=\"Bad\" Language=\"Verilog\">\n\t\t\t\t\t\tmodule acct_wrapper #(<xhtml:br/>\n\t\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\talways @(posedge clk_i)<xhtml:br/>\n\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t\tbegin<xhtml:br/>\n\t\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t\t\tif(~(rst_ni &amp;&amp; ~rst_6))<xhtml:br/>\n\t\t\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t\t\t\tbegin<xhtml:br/>\n\t\t\t\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t\t\t\t\tfor (j=0; j &lt; AcCt_MEM_SIZE; j=j+1)<xhtml:br/>\n\t\t\t\t\t\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tbegin<xhtml:br/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<xhtml:b>acct_mem[j] &lt;= 32'hffffffff;</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t\t\t\t\t\t\t\tend<xhtml:br/>\n\t\t\t\t\t\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t\t\t\t\tend<xhtml:br/>\n\t\t\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t</Example_Code>\n\t\t\t\t\t<Body_Text>To fix this issue, the access control registers must be properly initialized during the reset phase of the SoC. Correct initialization values should be established to maintain the system's integrity, security, predictable behavior, and allow proper control of peripherals. The specifics of what values should be set depend on the SoC's design and the requirements of the system. To address the problem depicted in the bad code example [REF-1438], the default value for \"acct_mem\" should be set to 32'h00000000 (see good code example [REF-1439]). This ensures that during startup or after any reset, access to protected data is restricted until the system setup is complete and security procedures properly configure the access control settings.</Body_Text>\n\t\t\t\t\t<Example_Code Nature=\"Good\" Language=\"Verilog\">\n\t\t\t\t\t\tmodule acct_wrapper #(<xhtml:br/>\n\t\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\talways @(posedge clk_i)<xhtml:br/>\n\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t\tbegin<xhtml:br/>\n\t\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t\t\tif(~(rst_ni &amp;&amp; ~rst_6))\n\t\t\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t\t\t\tbegin<xhtml:br/>\n\t\t\t\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t\t\t\t\tfor (j=0; j &lt; AcCt_MEM_SIZE; j=j+1)<xhtml:br/>\n\t\t\t\t\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t\t\t\t\t\tbegin<xhtml:br/>\n\t\t\t\t\t\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<xhtml:b>acct_mem[j] &lt;= 32'h00000000;</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t\t\t\t\t\t\tend<xhtml:br/>\n\t\t\t\t\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t\t\t\t\tend<xhtml:br/>\n\t\t\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t</Example_Code>\n\t\t\t\t"
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2020-27211",
			"description": "Chain: microcontroller system-on-chip uses a register value stored in flash to set product protection state on the memory bus and does not contain protection against fault injection (CWE-1319) which leads to an incorrect initialization of the memory bus (CWE-1419) causing the product to be in an unprotected state.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2020-27211"
		},
		{
			"reference": "CVE-2023-25815",
			"description": "chain: a change in an underlying package causes the gettext function to use implicit initialization with a hard-coded path (CWE-1419) under the user-writable C:\\ drive, introducing an untrusted search path element (CWE-427) that enables spoofing of messages. ",
			"link": "https://www.cve.org/CVERecord?id=CVE-2023-25815"
		},
		{
			"reference": "CVE-2022-43468",
			"description": "WordPress module sets internal variables based on external inputs, allowing false reporting of the number of views ",
			"link": "https://www.cve.org/CVERecord?id=CVE-2022-43468"
		},
		{
			"reference": "CVE-2022-36349",
			"description": "insecure default variable initialization in BIOS firmware for a hardware board allows DoS",
			"link": "https://www.cve.org/CVERecord?id=CVE-2022-36349"
		},
		{
			"reference": "CVE-2015-7763",
			"description": "distributed filesystem only initializes part of the variable-length padding for a packet, allowing attackers to read sensitive information from previously-sent packets in the same memory location",
			"link": "https://www.cve.org/CVERecord?id=CVE-2015-7763"
		}
	],
	"references": [
		{
			"reference_id": "REF-1437",
			"title": "acct_wrapper.sv",
			"url": "https://github.com/HACK-EVENT/hackatdac21/blob/65d0ffdab7426da4509c98d62e163bcce642f651/piton/design/chip/tile/ariane/src/acct/acct_wrapper.sv#L39",
			"publication_year": "2021"
		},
		{
			"reference_id": "REF-1438",
			"title": "Bad Code acct_wrapper.sv",
			"url": "https://github.com/HACK-EVENT/hackatdac21/blob/65d0ffdab7426da4509c98d62e163bcce642f651/piton/design/chip/tile/ariane/src/acct/acct_wrapper.sv#L79C1-L86C16",
			"publication_year": "2021"
		},
		{
			"reference_id": "REF-1439",
			"title": "Good Code acct_wrapper.sv",
			"url": "https://github.com/HACK-EVENT/hackatdac21/blob/062de4f25002d2dcbdb0a82af36b80a517592612/piton/design/chip/tile/ariane/src/acct/acct_wrapper.sv#L84",
			"publication_year": "2021"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2023-10-11"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2024-07-16",
				"modification_comment": "updated Demonstrative_Examples, References"
			}
		],
		"contribution": [
			{
				"type": "Content",
				"contribution_name": "Anonymous External Contributor",
				"contribution_date": "2023-10-13",
				"contribution_comment": "Provided HW specific comments for Extended Description"
			},
			{
				"type": "Content",
				"contribution_name": "Mohan Lal",
				"contribution_organization": "NVIDIA",
				"contribution_date": "2023-10-13",
				"contribution_comment": "Provided HW specific comments for Extended Description"
			},
			{
				"type": "Content",
				"contribution_name": "Chen Chen, Rahul Kande, Jeyavijayan Rajendran",
				"contribution_organization": "Texas A&M University",
				"contribution_date": "2023-11-07",
				"contribution_comment": "suggested demonstrative example"
			},
			{
				"type": "Content",
				"contribution_name": "Shaza Zeitouni, Mohamadreza Rostami, Ahmad-Reza Sadeghi",
				"contribution_organization": "Technical University of Darmstadt",
				"contribution_date": "2023-11-07",
				"contribution_comment": "suggested demonstrative example"
			}
		]
	}
}
