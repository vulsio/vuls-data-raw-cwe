{
  "id": "482",
  "name": "Comparing instead of Assigning",
  "abstraction": "Variant",
  "structure": "Simple",
  "status": "Draft",
  "description": "The code uses an operator for comparison when the intention was to perform an assignment.",
  "extended_description": "In many languages, the compare statement is very close in appearance to the assignment statement; they are often confused.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "480",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "prevalence": "Undetermined",
        "name": "C"
      },
      {
        "prevalence": "Undetermined",
        "name": "C++"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation",
      "note": [
        "This bug primarily originates from a typo."
      ]
    }
  ],
  "likelihood_of_exploit": "Low",
  "common_consequences": [
    {
      "scope": [
        "Availability",
        "Integrity"
      ],
      "impact": [
        "Unexpected State"
      ],
      "note": "The assignment will not take place, which should cause obvious program execution problems."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Testing"
      ],
      "description": [
        "Many IDEs and static analysis products will detect this problem."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>void called(int foo) {<xhtml:div style=\"margin-left:1em;\">foo==1;<xhtml:br/>if (foo==1) System.out.println(\"foo\\n\");</xhtml:div>}<xhtml:br/>int main() {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>called(2);<xhtml:br/>return 0;</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
    },
    {
      "demonstrative_example_id": "DX-103",
      "text": "\n               <Intro_Text>The following C/C++ example shows a simple implementation of a stack that includes methods for adding and removing integer values from the stack. The example uses pointers to add and remove integer values to the stack array variable.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>#define SIZE 50<xhtml:br/>int *tos, *p1, stack[SIZE];<xhtml:br/>\n                     <xhtml:br/>void push(int i) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>p1++;<xhtml:br/>if(p1==(tos+SIZE)) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>\n                                 <xhtml:i>// Print stack overflow error message and exit</xhtml:i>\n                                 <xhtml:br/>\n                              </xhtml:div>\n                           </xhtml:div>}<xhtml:br/>*p1 == i;</xhtml:div>\n                     </xhtml:div>}<xhtml:br/>\n                     <xhtml:br/>int pop(void) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>if(p1==tos) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>\n                                 <xhtml:i>// Print stack underflow error message and exit</xhtml:i>\n                                 <xhtml:br/>\n                              </xhtml:div>\n                           </xhtml:div>}<xhtml:br/>p1--;<xhtml:br/>return *(p1+1);</xhtml:div>\n                     </xhtml:div>}<xhtml:br/>\n                     <xhtml:br/>int main(int argc, char *argv[]) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// initialize tos and p1 to point to the top of stack</xhtml:i>\n                           <xhtml:br/>tos = stack;<xhtml:br/>p1 = stack;<xhtml:br/>\n                           <xhtml:i>// code to add and remove items from stack</xhtml:i>\n                           <xhtml:br/>...<xhtml:br/>return 0;</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>The push method includes an expression to assign the integer value to the location in the stack pointed to by the pointer variable.</Body_Text>\n               <Body_Text>However, this expression uses the comparison operator \"==\" rather than the assignment operator \"=\". The result of using the comparison operator instead of the assignment operator causes erroneous values to be entered into the stack and can cause unexpected results.</Body_Text>\n            "
    }
  ],
  "references": [
    {
      "reference_id": "REF-18",
      "author": [
        "Secure Software, Inc."
      ],
      "title": "The CLASP Application Security Process",
      "url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
      "publication_year": "2005"
    },
    {
      "section": "Chapter 6, \"Typos\", Page 289",
      "reference_id": "REF-62",
      "author": [
        "Mark Dowd",
        "John McDonald",
        "Justin Schuh"
      ],
      "title": "The Art of Software Security Assessment",
      "publication_year": "2006",
      "publisher": "Addison Wesley",
      "edition": "1st Edition"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CLASP",
      "submission_date": "2006-07-19"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01",
        "modification_comment": "updated Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08",
        "modification_comment": "updated Applicable_Platforms, Description, Relationships, Other_Notes, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-11-24",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-07-27",
        "modification_comment": "updated Common_Consequences, Modes_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-10-29",
        "modification_comment": "updated Other_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-27",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-09-13",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11",
        "modification_comment": "updated References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-10-30",
        "modification_comment": "updated Demonstrative_Examples, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30",
        "modification_comment": "updated Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-01-19",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08",
        "modification_comment": "updated Demonstrative_Examples, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24",
        "modification_comment": "updated References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Detection_Factors, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      }
    ]
  },
  "detection_methods": [
    {
      "detection_method_id": "DM-14",
      "method": "Automated Static Analysis",
      "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "effectiveness": "High"
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "CLASP",
      "entry_name": "Comparing instead of assigning"
    },
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Unused Entities",
      "entry_id": "SFP2"
    }
  ]
}
