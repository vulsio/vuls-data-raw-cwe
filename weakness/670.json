{
  "id": "670",
  "name": "Always-Incorrect Control Flow Implementation",
  "abstraction": "Class",
  "structure": "Simple",
  "status": "Draft",
  "description": "The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.",
  "extended_description": "This weakness captures cases in which a particular code segment is always incorrect with respect to the algorithm that it is implementing. For example, if a C programmer intends to include multiple statements in a single block but does not include the enclosing braces (CWE-483), then the logic is always incorrect. This issue is in contrast to most weaknesses in which the code usually behaves correctly, except when it is externally manipulated in malicious ways.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "691",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {},
  "modes_of_introduction": [
    {
      "phase": "Implementation",
      "note": [
        "This issue typically appears in rarely-tested code, since the \"always-incorrect\" nature will be detected as a bug during normal usage."
      ]
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Other"
      ],
      "impact": [
        "Other",
        "Alter Execution Logic"
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-180",
      "text": "\n             <Intro_Text>This code queries a server and displays its status when a request comes from an authorized IP address.</Intro_Text>\n             <Example_Code Nature=\"Bad\" Language=\"PHP\">\n               <xhtml:div>$requestingIP = $_SERVER['REMOTE_ADDR'];<xhtml:br/>if(!in_array($requestingIP,$ipAllowList)){<xhtml:div style=\"margin-left:1em;\">echo \"You are not authorized to view this page\";<xhtml:br/>http_redirect($errorPageURL);</xhtml:div>}<xhtml:br/>$status = getServerStatus();<xhtml:br/>echo $status;<xhtml:br/>\n               <xhtml:i>...</xhtml:i>\n               <xhtml:br/>\n               </xhtml:div>\n             </Example_Code>\n             <Body_Text>This code redirects unauthorized users, but continues to execute code after calling http_redirect(). This means even unauthorized users may be able to access the contents of the page or perform a DoS attack on the server being queried. Also, note that this code is vulnerable to an IP address spoofing attack (CWE-212).</Body_Text>\n           "
    },
    {
      "demonstrative_example_id": "DX-181",
      "text": "\n             <Intro_Text>In this example, the programmer has indented the statements to call Do_X() and Do_Y(), as if the intention is that these functions are only called when the condition is true. However, because there are no braces to signify the block, Do_Y() will always be executed, even if the condition is false.</Intro_Text>\n             <Example_Code Nature=\"Bad\" Language=\"C\">\n               <xhtml:div>if (condition==true)<xhtml:div style=\"margin-left:1em;\">Do_X();<xhtml:br/>Do_Y();</xhtml:div>\n               </xhtml:div>\n             </Example_Code>\n             <Body_Text>This might not be what the programmer intended. When the condition is critical for security, such as in making a security decision or detecting a critical error, this may produce a vulnerability.</Body_Text>\n           "
    },
    {
      "demonstrative_example_id": "DX-182",
      "text": "\n             <Intro_Text>In both of these examples, a message is printed based on the month passed into the function:</Intro_Text>\n             <Example_Code Nature=\"Bad\" Language=\"Java\">\n               <xhtml:div>public void printMessage(int month){<xhtml:div style=\"margin-left:1em;\">\n               <xhtml:div>switch (month) {<xhtml:div style=\"margin-left:1em;\">\n               <xhtml:div>\n               <xhtml:br/>case 1: print(\"January\");<xhtml:br/>case 2: print(\"February\");<xhtml:br/>case 3: print(\"March\");<xhtml:br/>case 4: print(\"April\");<xhtml:br/>case 5: print(\"May\");<xhtml:br/>case 6: print(\"June\");<xhtml:br/>case 7: print(\"July\");<xhtml:br/>case 8: print(\"August\");<xhtml:br/>case 9: print(\"September\");<xhtml:br/>case 10: print(\"October\");<xhtml:br/>case 11: print(\"November\");<xhtml:br/>case 12: print(\"December\");</xhtml:div>\n               </xhtml:div>}<xhtml:br/>println(\" is a great month\");</xhtml:div>\n               </xhtml:div>}</xhtml:div>\n             </Example_Code>\n             <Example_Code Nature=\"Bad\" Language=\"C\">\n               <xhtml:div>void printMessage(int month){<xhtml:div style=\"margin-left:1em;\">\n               <xhtml:div>switch (month) {<xhtml:div style=\"margin-left:1em;\">\n               <xhtml:div>\n               <xhtml:br/>case 1: printf(\"January\");<xhtml:br/>case 2: printf(\"February\");<xhtml:br/>case 3: printf(\"March\");<xhtml:br/>case 4: printf(\"April\");<xhtml:br/>case 5: printff(\"May\");<xhtml:br/>case 6: printf(\"June\");<xhtml:br/>case 7: printf(\"July\");<xhtml:br/>case 8: printf(\"August\");<xhtml:br/>case 9: printf(\"September\");<xhtml:br/>case 10: printf(\"October\");<xhtml:br/>case 11: printf(\"November\");<xhtml:br/>case 12: printf(\"December\");</xhtml:div>\n               </xhtml:div>}<xhtml:br/>printf(\" is a great month\");</xhtml:div>\n               </xhtml:div>}</xhtml:div>\n             </Example_Code>\n             <Body_Text>Both examples do not use a break statement after each case, which leads to unintended fall-through behavior. For example, calling \"printMessage(10)\" will result in the text \"OctoberNovemberDecember is a great month\" being printed.</Body_Text>\n           "
    },
    {
      "demonstrative_example_id": "DX-183",
      "text": "\n             <Intro_Text>In the excerpt below, an AssertionError (an unchecked exception) is thrown if the user hasn't entered an email address in an HTML form.</Intro_Text>\n             <Example_Code Nature=\"Bad\" Language=\"Java\">\n               <xhtml:div>String email = request.getParameter(\"email_address\");<xhtml:br/>assert email != null;</xhtml:div>\n             </Example_Code>\n           "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2021-3011",
      "description": "virtual interrupt controller in a virtualization product allows crash of host by writing a certain invalid value to a register, which triggers a fatal error instead of returning an error code",
      "link": "https://www.cve.org/CVERecord?id=CVE-2021-3011"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CWE Content Team",
      "submission_organization": "MITRE",
      "submission_date": "2008-04-11"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01",
        "modification_comment": "updated Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08",
        "modification_comment": "updated Description, Relationships, Other_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-07-27",
        "modification_comment": "updated Maintenance_Notes, Modes_of_Introduction, Other_Notes, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01",
        "modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-01-19",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-06-20",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24",
        "modification_comment": "updated Relationships, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28",
        "modification_comment": "updated Observed_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Relationships, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-10-26",
        "modification_comment": "updated Demonstrative_Examples"
      }
    ]
  },
  "notes": [
    {
      "type": "Maintenance",
      "text": "This node could possibly be split into lower-level nodes. \"Early Return\" is for returning control to the caller too soon (e.g., CWE-584). \"Excess Return\" is when control is returned too far up the call stack (CWE-600, CWE-395). \"Improper control limitation\" occurs when the product maintains control at a lower level of execution, when control should be returned \"further\" up the call stack (CWE-455). \"Incorrect syntax\" covers code that's \"just plain wrong\" such as CWE-484 and CWE-483."
    }
  ]
}
