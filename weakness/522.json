{
  "id": "522",
  "name": "Insufficiently Protected Credentials",
  "abstraction": "Class",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "1390",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "287",
      "view_id": "1003",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "668",
      "view_id": "1000"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Not Language-Specific",
        "prevalence": "Undetermined"
      }
    ],
    "technology": [
      {
        "class": "ICS/OT",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design",
      "note": [
        "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."
      ]
    },
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Access Control"
      ],
      "impact": [
        "Gain Privileges or Assume Identity"
      ],
      "note": "An attacker could gain access to user accounts and access sensitive data used by the user accounts."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "Use an appropriate security mechanism to protect the credentials."
      ]
    },
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "Make appropriate use of cryptography to protect the credentials."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.)."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-56",
      "text": "\n               <Intro_Text>This code changes a user's password.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"PHP\">\n                  <xhtml:div>$user = $_GET['user'];<xhtml:br/>$pass = $_GET['pass'];<xhtml:br/>$checkpass = $_GET['checkpass'];<xhtml:br/>if ($pass == $checkpass) {<xhtml:div style=\"margin-left:1em;\">SetUserPassword($user, $pass);</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed. An attacker can request a change of another user's password and gain control of the victim's account.</Body_Text>\n            "
    },
    {
      "demonstrative_example_id": "DX-57",
      "text": "\n               <Intro_Text>The following code reads a password from a properties file and uses the password to connect to a database.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>...<xhtml:br/>Properties prop = new Properties();<xhtml:br/>prop.load(new FileInputStream(\"config.properties\"));<xhtml:br/>String password = prop.getProperty(\"password\");<xhtml:br/>DriverManager.getConnection(url, usr, password);<xhtml:br/>...</xhtml:div>\n               </Example_Code>\n               <Body_Text>This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system.</Body_Text>\n            "
    },
    {
      "demonstrative_example_id": "DX-58",
      "text": "\n               <Intro_Text>The following code reads a password from the registry and uses the password to create a new network credential.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>...<xhtml:br/>String password = regKey.GetValue(passKey).toString();<xhtml:br/>NetworkCredential netCred = new NetworkCredential(username,password,domain);<xhtml:br/>...</xhtml:div>\n               </Example_Code>\n               <Body_Text>This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system</Body_Text>\n            "
    },
    {
      "demonstrative_example_id": "DX-59",
      "text": "\n               <Intro_Text>Both of these examples verify a password by comparing it to a stored compressed version.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style=\"margin-left:1em;\">if (strcmp(compress(password), compressed_password)) {<xhtml:div style=\"margin-left:1em;\">printf(\"Incorrect Password!\\n\");<xhtml:br/>return(0);</xhtml:div>}<xhtml:br/>printf(\"Entering Diagnostic Mode...\\n\");<xhtml:br/>return(1);</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style=\"margin-left:1em;\">if (passwd.Equals(compress(password), compressed_password)) {<xhtml:div style=\"margin-left:1em;\">return(0);</xhtml:div>}<xhtml:br/>\n                        <xhtml:i>//Diagnostic Mode</xhtml:i>\n                        <xhtml:br/>return(1);</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>Because a compression algorithm is used instead of a one way hashing algorithm, an attacker can recover compressed passwords stored in the database.</Body_Text>\n            "
    },
    {
      "demonstrative_example_id": "DX-43",
      "text": "\n               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.</Intro_Text>\n               <Body_Text>This Java example shows a properties file with a cleartext username / password pair.</Body_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>\n                     <xhtml:br/>\n                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>\n                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>\n               </Example_Code>\n               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.</Body_Text>\n               <Example_Code Nature=\"Bad\" Language=\"ASP.NET\">\n                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style=\"margin-left:1em;\">&lt;add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>\n               </Example_Code>\n               <Body_Text>Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.</Body_Text>\n            "
    },
    {
      "demonstrative_example_id": "DX-153",
      "text": "\n               <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were \"insecure by design\" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>\n               <Body_Text>Multiple vendors used cleartext transmission or storage of passwords in their OT products.</Body_Text>\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2022-30018",
      "description": "A messaging platform serializes all elements of User/Group objects, making private information available to adversaries",
      "link": "https://www.cve.org/CVERecord?id=CVE-2022-30018"
    },
    {
      "reference": "CVE-2022-29959",
      "description": "Initialization file contains  credentials that can be decoded using a \"simple string transformation\"",
      "link": "https://www.cve.org/CVERecord?id=CVE-2022-29959"
    },
    {
      "reference": "CVE-2022-35411",
      "description": "Python-based RPC framework enables pickle functionality by default, allowing clients to unpickle untrusted data.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2022-35411"
    },
    {
      "reference": "CVE-2022-29519",
      "description": "Programmable Logic Controller (PLC) sends sensitive information in plaintext, including passwords and session tokens.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2022-29519"
    },
    {
      "reference": "CVE-2022-30312",
      "description": "Building Controller uses a protocol that transmits authentication credentials in plaintext.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2022-30312"
    },
    {
      "reference": "CVE-2022-31204",
      "description": "Programmable Logic Controller (PLC) sends password in plaintext.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2022-31204"
    },
    {
      "reference": "CVE-2022-30275",
      "description": "Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2022-30275"
    },
    {
      "reference": "CVE-2007-0681",
      "description": "Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2007-0681"
    },
    {
      "reference": "CVE-2000-0944",
      "description": "Web application password change utility doesn't check the original password.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2000-0944"
    },
    {
      "reference": "CVE-2005-3435",
      "description": "product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2005-3435"
    },
    {
      "reference": "CVE-2005-0408",
      "description": "chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2005-0408"
    }
  ],
  "references": [
    {
      "section": "\"Sin 19: Use of Weak Password-Based Systems.\" Page 279",
      "reference_id": "REF-44",
      "author": [
        "Michael Howard",
        "David LeBlanc",
        "John Viega"
      ],
      "title": "24 Deadly Sins of Software Security",
      "publication_year": "2010",
      "publication": "McGraw-Hill"
    },
    {
      "reference_id": "REF-1283",
      "author": [
        "Forescout Vedere Labs"
      ],
      "title": "OT:ICEFALL: The legacy of \"insecure by design\" and its implications for certifications and risk management",
      "url": "https://www.forescout.com/resources/ot-icefall-report/",
      "publication_year": "2022",
      "publication_month": "--06",
      "publication_day": "---20"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "Anonymous Tool Vendor (under NDA)",
      "submission_date": "2006-07-19"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01",
        "modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08",
        "modification_comment": "updated Relationships, Other_Notes, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-05-27",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-03-29",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11",
        "modification_comment": "updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-10-30",
        "modification_comment": "updated Demonstrative_Examples, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-06-23",
        "modification_comment": "updated Other_Notes, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-05-03",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08",
        "modification_comment": "updated Demonstrative_Examples, Modes_of_Introduction, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2018-03-27",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-06-20",
        "modification_comment": "updated Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24",
        "modification_comment": "updated Description, Relationships, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-08-20",
        "modification_comment": "updated Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-07-20",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-10-13",
        "modification_comment": "updated Demonstrative_Examples, Observed_Examples, References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-01-31",
        "modification_comment": "updated Applicable_Platforms, Observed_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Detection_Factors, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-10-26",
        "modification_comment": "updated Observed_Examples"
      }
    ]
  },
  "detection_methods": [
    {
      "detection_method_id": "DM-14",
      "method": "Automated Static Analysis",
      "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "effectiveness": "High"
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "OWASP Top Ten 2007",
      "entry_name": "Broken Authentication and Session Management",
      "entry_id": "A7",
      "mapping_fit": "CWE More Specific"
    },
    {
      "taxonomy_name": "OWASP Top Ten 2004",
      "entry_name": "Broken Authentication and Session Management",
      "entry_id": "A3",
      "mapping_fit": "CWE More Specific"
    }
  ],
  "related_attack_patterns": [
    "102",
    "474",
    "50",
    "509",
    "551",
    "555",
    "560",
    "561",
    "600",
    "644",
    "645",
    "652",
    "653"
  ]
}
