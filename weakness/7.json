{
	"id": "7",
	"name": "J2EE Misconfiguration: Missing Custom Error Page",
	"abstraction": "Variant",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The default error page of a web application should not display sensitive information about the product.",
	"extended_description": "\n            <xhtml:p>A Web application must define a default error page for 4xx errors (e.g. 404), 5xx (e.g. 500) errors and catch java.lang.Throwable exceptions to prevent attackers from mining information from the application container's built-in error response.</xhtml:p>\n            <xhtml:p>When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks.</xhtml:p>\n         ",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "756",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"prevalence": "Undetermined",
				"name": "Java"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Confidentiality"
			],
			"impact": [
				"Read Application Data"
			],
			"note": "A stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Handle exceptions appropriately in source code."
			]
		},
		{
			"phase": [
				"Implementation",
				"System Configuration"
			],
			"description": [
				"Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Do not attempt to process an error or attempt to mask it."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Verify return values are correct and do not supply sensitive information about the system."
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-76",
			"text": "\n               <Intro_Text>In the snippet below, an unchecked runtime exception thrown from within the try block may cause the container to display its default error page (which may contain a full stack trace, among other things).</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>Public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:div style=\"margin-left:1em;\">try {<xhtml:div style=\"margin-left:1em;\">...</xhtml:div>} catch (ApplicationSpecificException ase) {<xhtml:div style=\"margin-left:1em;\">logger.error(\"Caught: \" + ase.toString());</xhtml:div>}</xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		}
	],
	"references": [
		{
			"reference_id": "REF-6",
			"author": [
				"Katrina Tsipenyuk",
				"Brian Chess",
				"Gary McGraw"
			],
			"title": "Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors",
			"url": "https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf",
			"publication_year": "2005",
			"publication_month": "--11",
			"publication_day": "---07",
			"publication": "NIST Workshop on Software Security Assurance Tools Techniques and Metrics",
			"publisher": "NIST"
		},
		{
			"reference_id": "REF-65",
			"author": [
				"M. Howard",
				"D. LeBlanc",
				"J. Viega"
			],
			"title": "19 Deadly Sins of Software Security",
			"publication_year": "2005",
			"publication_month": "--07",
			"publication_day": "---26",
			"publisher": "McGraw-Hill/Osborne"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "7 Pernicious Kingdoms",
			"submission_date": "2006-07-19"
		},
		"modification": [
			{
				"modification_name": "Sean Eidemiller",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "added/updated demonstrative examples"
			},
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Relationships, Other_Notes, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-10-14",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-03-10",
				"modification_comment": "updated Name, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Demonstrative_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-06-23",
				"modification_comment": "updated Common_Consequences, Description, Other_Notes, Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		],
		"previous_entry_name": [
			{
				"text": "J2EE Misconfiguration: Missing Error Handling",
				"date": "2009-03-10"
			}
		]
	},
	"taxonomy_mappings": [
		{
			"taxonomy_name": "7 Pernicious Kingdoms",
			"entry_name": "J2EE Misconfiguration: Missing Error Handling"
		}
	]
}
