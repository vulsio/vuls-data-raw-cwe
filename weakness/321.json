{
	"id": "321",
	"name": "Use of Hard-coded Cryptographic Key",
	"abstraction": "Variant",
	"structure": "Simple",
	"status": "Draft",
	"description": "The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "798",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "798",
			"view_id": "1305",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "798",
			"view_id": "1340",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"class": "ICS/OT",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Architecture and Design",
			"note": [
				"REALIZATION: This weakness is caused during implementation of an architectural security tactic."
			]
		}
	],
	"likelihood_of_exploit": "High",
	"common_consequences": [
		{
			"scope": [
				"Access Control"
			],
			"impact": [
				"Bypass Protection Mechanism",
				"Gain Privileges or Assume Identity"
			],
			"note": "If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Prevention schemes mirror that of hard-coded password storage."
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-92",
			"text": "\n               <Intro_Text>The following code examples attempt to verify a password using a hard-coded cryptographic key.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>if (strcmp(password,\"68af404b513073584c4b6f22b6c63e6b\")) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>printf(\"Incorrect Password!\\n\");<xhtml:br/>return(0);</xhtml:div>\n                           </xhtml:div>}<xhtml:br/>printf(\"Entering Diagnostic Mode...\\n\");<xhtml:br/>return(1);</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>public boolean VerifyAdmin(String password) {<xhtml:div style=\"margin-left:1em;\">if (password.equals(\"68af404b513073584c4b6f22b6c63e6b\")) {<xhtml:div style=\"margin-left:1em;\">System.out.println(\"Entering Diagnostic Mode...\");<xhtml:br/>return true;</xhtml:div>}<xhtml:br/>System.out.println(\"Incorrect Password!\");<xhtml:br/>return false;</xhtml:div>\n                  </xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"C#\">\n                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style=\"margin-left:1em;\">if (password.Equals(\"68af404b513073584c4b6f22b6c63e6b\")) {<xhtml:div style=\"margin-left:1em;\">Console.WriteLine(\"Entering Diagnostic Mode...\");<xhtml:br/>return(1);</xhtml:div>}<xhtml:br/>Console.WriteLine(\"Incorrect Password!\");<xhtml:br/>return(0);</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>The cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-153",
			"text": "\n\t         <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were \"insecure by design\" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>\n\t         <Body_Text>Multiple vendors used hard-coded keys for critical functionality in their OT products.</Body_Text>\n\t    "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2022-29960",
			"description": "Engineering Workstation uses hard-coded cryptographic keys that could allow for unathorized filesystem access and privilege escalation",
			"link": "https://www.cve.org/CVERecord?id=CVE-2022-29960"
		},
		{
			"reference": "CVE-2022-30271",
			"description": "Remote Terminal Unit (RTU) uses a hard-coded SSH private key that is likely to be used by default.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2022-30271"
		},
		{
			"reference": "CVE-2020-10884",
			"description": "WiFi router service has a hard-coded encryption key, allowing root access",
			"link": "https://www.cve.org/CVERecord?id=CVE-2020-10884"
		},
		{
			"reference": "CVE-2014-2198",
			"description": "Communications / collaboration product has a hardcoded SSH private key, allowing access to root account",
			"link": "https://www.cve.org/CVERecord?id=CVE-2014-2198"
		}
	],
	"references": [
		{
			"reference_id": "REF-18",
			"author": [
				"Secure Software, Inc."
			],
			"title": "The CLASP Application Security Process",
			"url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
			"publication_year": "2005",
			"url_date": "2024-11-17"
		},
		{
			"reference_id": "REF-1283",
			"author": [
				"Forescout Vedere Labs"
			],
			"title": "OT:ICEFALL: The legacy of \"insecure by design\" and its implications for certifications and risk management",
			"url": "https://www.forescout.com/resources/ot-icefall-report/",
			"publication_year": "2022",
			"publication_month": "--06",
			"publication_day": "---20"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CLASP",
			"submission_date": "2006-07-19"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_organization": "Veracode",
				"modification_date": "2008-08-15",
				"modification_comment": "Suggested OWASP Top Ten 2004 mapping"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-05-27",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-02-16",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-09-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-12-13",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Demonstrative_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Demonstrative_Examples, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Applicable_Platforms, Demonstrative_Examples, Modes_of_Introduction, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated References, Relationships, Type"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-12-10",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-10-13",
				"modification_comment": "updated Demonstrative_Examples, Observed_Examples, References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Applicable_Platforms, Maintenance_Notes, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes, Taxonomy_Mappings"
			}
		],
		"contribution": [
			{
				"type": "Content",
				"contribution_name": "\"Mapping CWE to 62443\" Sub-Working Group",
				"contribution_organization": "CWE-CAPEC ICS/OT SIG",
				"contribution_date": "2023-01-24",
				"contribution_comment": "Suggested mappings to ISA/IEC 62443."
			},
			{
				"type": "Content",
				"contribution_name": "\"Mapping CWE to 62443\" Sub-Working Group",
				"contribution_organization": "CWE-CAPEC ICS/OT SIG",
				"contribution_date": "2023-04-25",
				"contribution_comment": "Suggested mappings to ISA/IEC 62443."
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "CLASP",
			"entry_name": "Use of hard-coded cryptographic key"
		},
		{
			"taxonomy_name": "OWASP Top Ten 2007",
			"entry_name": "Insecure Cryptographic Storage",
			"entry_id": "A8",
			"mapping_fit": "CWE More Specific"
		},
		{
			"taxonomy_name": "OWASP Top Ten 2007",
			"entry_name": "Insecure Communications",
			"entry_id": "A9",
			"mapping_fit": "CWE More Specific"
		},
		{
			"taxonomy_name": "OWASP Top Ten 2004",
			"entry_name": "Insecure Storage",
			"entry_id": "A8",
			"mapping_fit": "CWE More Specific"
		},
		{
			"taxonomy_name": "Software Fault Patterns",
			"entry_name": "Hardcoded sensitive data",
			"entry_id": "SFP33"
		},
		{
			"taxonomy_name": "ISA/IEC 62443",
			"entry_name": "Req SP.03.10 RE(1)",
			"entry_id": "Part 2-4"
		},
		{
			"taxonomy_name": "ISA/IEC 62443",
			"entry_name": "Req SP.03.10 RE(3)",
			"entry_id": "Part 2-4"
		},
		{
			"taxonomy_name": "ISA/IEC 62443",
			"entry_name": "Req SR 1.5",
			"entry_id": "Part 3-3"
		},
		{
			"taxonomy_name": "ISA/IEC 62443",
			"entry_name": "Req SR 4.3",
			"entry_id": "Part 3-3"
		},
		{
			"taxonomy_name": "ISA/IEC 62443",
			"entry_name": "Req SD-1",
			"entry_id": "Part 4-1"
		},
		{
			"taxonomy_name": "ISA/IEC 62443",
			"entry_name": "Req SR 4.3",
			"entry_id": "Part 4-2"
		},
		{
			"taxonomy_name": "ISA/IEC 62443",
			"entry_name": "Req CR 7.3",
			"entry_id": "Part 4-2"
		}
	],
	"notes": [
		{
			"type": "Other",
			"text": "The main difference between the use of hard-coded passwords and the use of hard-coded cryptographic keys is the false sense of security that the former conveys. Many people believe that simply hashing a hard-coded password before storage will protect the information from malicious users. However, many hashes are reversible (or at least vulnerable to brute force attacks) -- and further, many authentication protocols simply request the hash itself, making it no better than a password."
		},
		{
			"type": "Maintenance",
			"text": "The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions."
		}
	]
}
