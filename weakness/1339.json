{
  "id": "1339",
  "name": "Insufficient Precision or Accuracy of a Real Number",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "The product processes a real number with an implementation in which the number's representation does not preserve required accuracy and precision in its fractional part, causing an incorrect result.",
  "extended_description": "<xhtml:p>When a security decision or calculation requires highly precise, accurate numbers such as financial calculations or prices, then small variations in the number could be exploited by an attacker.\n            </xhtml:p><xhtml:p>There are multiple ways to store the fractional part of a real number in a computer. In all of these cases, there is a limit to the accuracy of recording a fraction. If the fraction can be represented in a fixed number of digits (binary or decimal), there might not be enough digits assigned to represent the number. In other cases the number cannot be represented in a fixed number of digits due to repeating in decimal or binary notation (e.g. 0.333333...) or due to a transcendental number such as Π or √2. Rounding of numbers can lead to situations where the computer results do not adequately match the result of sufficiently accurate math. </xhtml:p>\n            ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "682",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "PeerOf",
      "cweid": "190",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "CanPrecede",
      "cweid": "834",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "CanPrecede",
      "cweid": "119",
      "view_id": "1000"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Not Language-Specific",
        "prevalence": "Undetermined"
      }
    ],
    "technology": [
      {
        "class": "Not Technology-Specific",
        "prevalence": "Undetermined"
      }
    ],
    "operating_system": [
      {
        "class": "Not OS-Specific",
        "prevalence": "Undetermined"
      }
    ],
    "architecture": [
      {
        "class": "Not Architecture-Specific",
        "prevalence": "Undetermined"
      }
    ]
  },
  "background_details": [
    "There are three major ways to store real numbers in computers. Each method is described along with the limitations of how they store their numbers.\n            <xhtml:ul>\n                        <xhtml:li>Fixed: Some implementations use a fixed number of binary bits to represent both the integer and the fraction.  In the demonstrative example about Muller's Recurrence, the fraction 108.0 - ((815.0 - 1500.0 / z) / y) cannot be represented in 8 binary digits. The numeric accuracy within languages such as PL/1, COBOL and Ada is expressed in decimal digits rather than binary digits. In SQL and most databases, the length of the integer and the fraction are specified by the programmer in decimal. In the language C, fixed reals are implemented according to ISO/IEC TR18037</xhtml:li>\n                        <xhtml:li>Floating: The number is stored in a version of scientific notation with a fixed length for the base and the significand. This allows flexibility for more accuracy when the integer portion is smaller. When dealing with large integers, the fractional accuracy is less. Languages such as PL/1, COBOL and Ada set the accuracy by decimal digit representation rather than using binary digits. Python also implements decimal floating-point numbers using the IEEE 754-2008 encoding method.</xhtml:li>\n                        <xhtml:li>Ratio: The number is stored as the ratio of two integers. These integers also have their limits. These integers can be stored in a fixed number of bits or in a vector of digits. While the vector of digits method provides for very large integers, they cannot truly represent a repeating or transcendental number as those numbers do not ever have a fixed length.</xhtml:li>\n                    </xhtml:ul>\n                "
  ],
  "modes_of_introduction": [
    {
      "phase": "Implementation",
      "note": [
        "This weakness is introduced when the developer picks a method to represent a real number. The weakness may only be visible with very specific numeric inputs."
      ]
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Availability"
      ],
      "impact": [
        "DoS: Crash, Exit, or Restart"
      ],
      "note": "This weakness will generally lead to undefined results and therefore crashes. In some implementations the program will halt if the weakness causes an overflow during a calculation."
    },
    {
      "scope": [
        "Integrity"
      ],
      "impact": [
        "Execute Unauthorized Code or Commands"
      ],
      "note": "The results of the math are not as expected. This could cause issues where a value would not be properly calculated and provide an incorrect answer."
    },
    {
      "scope": [
        "Confidentiality",
        "Availability",
        "Access Control"
      ],
      "impact": [
        "Read Application Data",
        "Modify Application Data"
      ],
      "note": "This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a product's implicit security policy."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Implementation",
        "Patching and Maintenance"
      ],
      "description": [
        "The developer or maintainer can move to a more accurate representation of real numbers.  In extreme cases, the programmer can move to representations such as ratios of BigInts which can represent real numbers to extremely fine precision. The programmer can also use the concept of an Unum real. The memory and CPU tradeoffs of this change must be examined. Since floating point reals are used in many products and many locations, they are implemented in hardware and most format changes will cause the calculations to be moved into software resulting in slower products. "
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n                    <Intro_Text>Muller's Recurrence is a series that is supposed to converge to the number 5. When running this series with the following code, different implementations of real numbers fail at specific iterations:</Intro_Text>\n                    <Example_Code Nature=\"Bad\" Language=\"Rust\">\n\t\t      fn rec_float(y: f64, z: f64) -&gt; f64 <xhtml:br/>\n\t\t      {<xhtml:br/>\n\t\t      <xhtml:div style=\"margin-left:1em;\">\n\t\t\t108.0 - ((815.0 - 1500.0 / z) / y);<xhtml:br/>\n\t\t      </xhtml:div>\n\t\t      }<xhtml:br/>\n\t\t      <xhtml:br/>\n\t\t      fn float_calc(turns: usize) -&gt; f64 <xhtml:br/>\n\t\t      {<xhtml:br/>\n\t\t      <xhtml:div style=\"margin-left:1em;\">\n\t\t\tlet mut x: Vec&lt;f64&gt; = vec![4.0, 4.25];<xhtml:br/>\n\t\t\t(2..turns + 1).for_each(|number| <xhtml:br/>\n\t\t\t{<xhtml:br/>\n\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t  x.push(rec_float(x[number - 1], x[number - 2]));<xhtml:br/>\n\t\t\t</xhtml:div>\n\t\t\t});<xhtml:br/>\n\t\t\t<xhtml:br/>\n\t\t\tx[turns]<xhtml:br/>\n\t\t      </xhtml:div>\n\t\t      }<xhtml:br/>\n                    </Example_Code>\n                    <Body_Text>\n\t\t      The chart below shows values for different data structures in the rust language when Muller's recurrence is executed to 80 iterations. The data structure f64 is a 64 bit float. The data structures I&lt;number&gt;F&lt;number&gt; are fixed representations 128 bits in length that use the first number as the size of the integer and the second size as the size of the fraction (e.g. I16F112 uses 16 bits for the integer and 112 bits for the fraction). The data structure of Ratio comes in three different implementations: i32 uses a ratio of 32 bit signed  integers,  i64 uses a ratio of 64 bit signed integers and BigInt uses a ratio of signed integer with up to 2^32 digits of base 256.  Notice how even with 112 bits of fractions or ratios of 64bit unsigned integers, this math still does not converge to an expected value of 5.\n\t\t      <xhtml:img src=\"https://cwe.mitre.org/data/images/Mullers-Recurrence-CWE-1339.png\" alt=\"Muller's Recurrence\"/>\n\t\t    </Body_Text>\n                    <Example_Code Nature=\"Good\" Language=\"Rust\">\n\t\t      Use num_rational::BigRational;<xhtml:br/>\n                      <xhtml:br/>\n\t\t      fn rec_big(y: BigRational, z: BigRational) -&gt; BigRational<xhtml:br/>\n\t\t      {<xhtml:br/>\n\t\t      <xhtml:div style=\"margin-left:1em;\">\n\t\t\tBigRational::from_integer(BigInt::from(108))<xhtml:br/>\n\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t  - ((BigRational::from_integer(BigInt::from(815))<xhtml:br/>\n\t\t\t  - BigRational::from_integer(BigInt::from(1500)) / z)<xhtml:br/>\n\t\t\t  / y)<xhtml:br/>\n\t\t\t</xhtml:div>\n\t\t      </xhtml:div>\n\t\t      }<xhtml:br/>\n\t\t      <xhtml:br/>\n\t\t      fn big_calc(turns: usize) -&gt; BigRational <xhtml:br/>\n\t\t      {<xhtml:br/>\n\t\t      <xhtml:div style=\"margin-left:1em;\">\n\t\t\tlet mut x: Vec&lt;BigRational&gt; = vec![BigRational::from_float(4.0).unwrap(), BigRational::from_float(4.25).unwrap(),];<xhtml:br/>\n\t\t\t<xhtml:br/>\n\t\t\t(2..turns + 1).for_each(|number| <xhtml:br/>\n\t\t\t{<xhtml:br/>\n\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t  x.push(rec_big(x[number - 1].clone(), x[number - 2].clone()));<xhtml:br/>\n\t\t\t</xhtml:div>\n\t\t\t});<xhtml:br/>\n\t\t\tx[turns].clone()<xhtml:br/>\n\t\t      </xhtml:div>\n\t\t      }<xhtml:br/>\n                    </Example_Code>\n                "
    },
    {
      "text": "\n                            <Intro_Text>On February 25, 1991, during the eve of the of an Iraqi invasion of Saudi Arabia, a Scud missile fired from Iraqi positions hit a US Army barracks in Dhahran, Saudi Arabia. It miscalculated time and killed 28 people [REF-1190].</Intro_Text>\n\t\t\t    <References>\n\t\t\t    <Reference External_Reference_ID=\"REF-1190\"/>\n\t\t\t    </References>\n                        "
    },
    {
      "text": "\n                            <Intro_Text>Sleipner A, an offshore drilling platform in the North Sea, was incorrectly constructed with an underestimate of 50% of strength in a critical cluster of buoyancy cells needed for construction. This led to a leak in buoyancy cells during lowering, causing a seismic event of 3.0 on the Richter Scale and about $700M loss [REF-1281].</Intro_Text>\n\t\t\t    <References>\n\t\t\t    <Reference External_Reference_ID=\"REF-1281\"/>\n\t\t\t    </References>\n                        "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2018-16069",
      "description": "Chain: series of floating-point precision errors\n\t\t\t(CWE-1339) in a web browser rendering engine causes out-of-bounds read\n\t\t\t(CWE-125), giving access to cross-origin data",
      "link": "https://www.cve.org/CVERecord?id=CVE-2018-16069"
    },
    {
      "reference": "CVE-2017-7619",
      "description": "Chain: rounding error in floating-point calculations\n\t\t\t(CWE-1339) in image processor leads to infinite loop (CWE-835)",
      "link": "https://www.cve.org/CVERecord?id=CVE-2017-7619"
    },
    {
      "reference": "CVE-2021-29529",
      "description": "Chain: machine-learning product can have a heap-based\n\t\t\tbuffer overflow (CWE-122) when some integer-oriented bounds are\n\t\t\tcalculated by using ceiling() and floor() on floating point values\n\t\t\t(CWE-1339)",
      "link": "https://www.cve.org/CVERecord?id=CVE-2021-29529"
    },
    {
      "reference": "CVE-2008-2108",
      "description": "Chain: insufficient precision (CWE-1339) in\n\t\t\trandom-number generator causes some zero bits to be reliably\n\t\t\tgenerated, reducing the amount of entropy (CWE-331)",
      "link": "https://www.cve.org/CVERecord?id=CVE-2008-2108"
    },
    {
      "reference": "CVE-2006-6499",
      "description": "Chain: web browser crashes due to infinite loop - \"bad\n\t\t\tlooping logic [that relies on] floating point math [CWE-1339] to exit\n\t\t\tthe loop [CWE-835]\"",
      "link": "https://www.cve.org/CVERecord?id=CVE-2006-6499"
    }
  ],
  "references": [
    {
      "reference_id": "REF-1186",
      "title": "Is COBOL holding you hostage with Math?",
      "url": "https://medium.com/the-technical-archaeologist/is-cobol-holding-you-hostage-with-math-5498c0eb428b",
      "publication_year": "2018",
      "publication_month": "--07",
      "publication_day": "---28"
    },
    {
      "reference_id": "REF-1187",
      "title": "Intermediate results and arithmetic precision",
      "url": "https://www.ibm.com/docs/en/cobol-zos/6.2?topic=appendixes-intermediate-results-arithmetic-precision",
      "publication_year": "2021",
      "publication_month": "--06",
      "publication_day": "---30"
    },
    {
      "reference_id": "REF-1188",
      "title": "8.1.2. Arbitrary Precision Numbers",
      "url": "https://www.postgresql.org/docs/8.3/datatype-numeric.html#DATATYPE-NUMERIC-DECIMAL",
      "publication_year": "2021",
      "publication_month": "--06",
      "publication_day": "---24"
    },
    {
      "reference_id": "REF-1189",
      "title": "Muller's Recurrence",
      "url": "https://scipython.com/blog/mullers-recurrence/",
      "publication_year": "2017",
      "publication_month": "--11",
      "publication_day": "---11"
    },
    {
      "reference_id": "REF-1190",
      "title": "An Improvement To Floating Point Numbers",
      "url": "https://hackaday.com/2015/10/22/an-improvement-to-floating-point-numbers/",
      "publication_year": "2015",
      "publication_month": "--10",
      "publication_day": "---22"
    },
    {
      "reference_id": "REF-1191",
      "title": "HIGH PERFORMANCE COMPUTING:  ARE WE JUST GETTING WRONG ANSWERS FASTER?",
      "url": "https://www3.nd.edu/~markst/cast-award-speech.pdf",
      "publication_year": "1999",
      "publication_month": "--06",
      "publication_day": "---23"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CWE Content Team",
      "submission_organization": "MITRE",
      "submission_date": "2021-07-08"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-10-13",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-01-31",
        "modification_comment": "updated Common_Consequences, Description, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      }
    ]
  }
}
