{
  "id": "1322",
  "name": "Use of Blocking Code in Single-threaded, Non-blocking Context",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The product uses a non-blocking model that relies on a single threaded process\n\t\t\tfor features such as scalability, but it contains code that can block when it is invoked.",
  "extended_description": "\n\t\t\t\t<xhtml:p>When an attacker can directly invoke the blocking code, or the blocking code can be affected by environmental conditions that can be influenced by an attacker, then this can lead to a denial of service by causing unexpected hang or freeze of the code. Examples of blocking code might be an expensive computation or calling\n\t\t\t\tblocking library calls, such as those that perform exclusive file operations or require a successful network operation.</xhtml:p>\n\t\t\t\t<xhtml:p>Due to limitations in multi-thread models, single-threaded\n\t\t\t\tmodels are used to overcome the resource constraints that are caused by using\n\t\t\t\tmany threads. In such a model, all code should generally be\n\t\t\t\tnon-blocking. If blocking code is called, then the event loop will\n\t\t\t\teffectively be stopped, which can be undesirable or dangerous.  Such\n\t\t\t\tmodels are used in Python asyncio, Vert.x, and Node.js, or other\n\t\t\t\tcustom event loop code.</xhtml:p>\n\t\t\t",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "834",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "CanPrecede",
      "cweid": "835",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {},
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Availability"
      ],
      "impact": [
        "DoS: Resource Consumption (CPU)"
      ],
      "note": "An unexpected call to blocking code can trigger an infinite loop, or a large loop that causes the software to pause and wait indefinitely."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Generally speaking, blocking calls should be\n\t\t\t\t\treplaced with non-blocking alternatives that can be used asynchronously.\n\t\t\t\t\tExpensive computations should be passed off to worker threads, although\n\t\t\t\t\tthe correct approach depends on the framework being used."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "For expensive computations, consider breaking them up into\n\t\t\t\t\tmultiple smaller computations. Refer to the documentation of the\n\t\t\t\t\tframework being used for guidance."
      ]
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "Joe Harvey",
      "submission_date": "2019-10-25"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      }
    ]
  },
  "related_attack_patterns": [
    "25"
  ]
}
