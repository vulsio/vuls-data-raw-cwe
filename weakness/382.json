{
	"id": "382",
	"name": "J2EE Bad Practices: Use of System.exit()",
	"abstraction": "Variant",
	"structure": "Simple",
	"status": "Draft",
	"description": "A J2EE application uses System.exit(), which also shuts down its container.",
	"extended_description": "It is never a good idea for a web application to attempt to shut down the application container. Access to a function that can shut down the application is an avenue for Denial of Service (DoS) attacks.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "705",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"prevalence": "Undetermined",
				"name": "Java"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation",
			"note": [
				"A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application."
			]
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Availability"
			],
			"impact": [
				"DoS: Crash, Exit, or Restart"
			]
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"The shutdown function should be a privileged function available only to a properly authorized administrative user"
			],
			"strategy": "Separation of Privilege"
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Web applications should not call methods that cause the virtual machine to exit, such as System.exit()"
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Web applications should also not throw any Throwables to the application server as this may adversely affect the container."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Non-web applications may have a main() method that contains a System.exit(), but generally should not call System.exit() from other locations in the code"
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-199",
			"text": "\n               <Intro_Text>Included in the doPost() method defined below is a call to System.exit() in the event of a specific exception.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>Public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:div style=\"margin-left:1em;\">try {<xhtml:div style=\"margin-left:1em;\">...</xhtml:div>} catch (ApplicationSpecificException ase) {<xhtml:div style=\"margin-left:1em;\">logger.error(\"Caught: \" + ase.toString());<xhtml:br/>System.exit(1);</xhtml:div>}</xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		}
	],
	"references": [
		{
			"reference_id": "REF-6",
			"author": [
				"Katrina Tsipenyuk",
				"Brian Chess",
				"Gary McGraw"
			],
			"title": "Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors",
			"url": "https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf",
			"publication_year": "2005",
			"publication_month": "--11",
			"publication_day": "---07",
			"publication": "NIST Workshop on Software Security Assurance Tools Techniques and Metrics",
			"publisher": "NIST"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "7 Pernicious Kingdoms",
			"submission_date": "2006-07-19"
		},
		"modification": [
			{
				"modification_name": "Sean Eidemiller",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "added/updated demonstrative examples"
			},
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Relationships, Other_Notes, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-06-23",
				"modification_comment": "updated Description, Modes_of_Introduction, Other_Notes, Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2024-02-29",
				"modification_comment": "updated Demonstrative_Examples"
			}
		],
		"previous_entry_name": [
			{
				"text": "J2EE Bad Practices: System.exit()",
				"date": "2008-04-11"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "7 Pernicious Kingdoms",
			"entry_name": "J2EE Bad Practices: System.exit()"
		},
		{
			"taxonomy_name": "OWASP Top Ten 2004",
			"entry_name": "Denial of Service",
			"entry_id": "A9",
			"mapping_fit": "CWE More Specific"
		},
		{
			"taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
			"entry_name": "Do not allow untrusted code to terminate the JVM",
			"entry_id": "ERR09-J"
		},
		{
			"taxonomy_name": "Software Fault Patterns",
			"entry_name": "Use of an improper API",
			"entry_id": "SFP3"
		}
	]
}
