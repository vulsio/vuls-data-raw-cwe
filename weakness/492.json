{
  "id": "492",
  "name": "Use of Inner Class Containing Sensitive Data",
  "abstraction": "Variant",
  "structure": "Simple",
  "status": "Draft",
  "description": "Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.",
  "extended_description": "Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with package level access to the original outer class. More insidiously, since an inner class can access private fields in its enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts private fields accessed by the inner class into protected fields.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "668",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "prevalence": "Undetermined",
        "name": "Java"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "likelihood_of_exploit": "Medium",
  "common_consequences": [
    {
      "scope": [
        "Confidentiality"
      ],
      "impact": [
        "Read Application Data"
      ],
      "note": "\"Inner Classes\" data confidentiality aspects can often be overcome."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Inner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n               <Intro_Text>The following Java Applet code mistakenly makes use of an inner class.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>public final class urlTool extends Applet {<xhtml:div style=\"margin-left:1em;\">private final class urlHelper {<xhtml:div style=\"margin-left:1em;\">...</xhtml:div>}<xhtml:br/>...</xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
    },
    {
      "text": "\n               <Intro_Text>The following example shows a basic use of inner classes. The class OuterClass contains the private member inner class InnerClass. The private inner class InnerClass includes the method concat that accesses the private member variables of the class OuterClass to output the value of one of the private member variables of the class OuterClass and returns a string that is a concatenation of one of the private member variables of the class OuterClass, the separator input parameter of the method and the private member variable of the class InnerClass.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>public class OuterClass {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:i>// private member variables of OuterClass</xhtml:i>\n                        <xhtml:br/>private String memberOne;<xhtml:br/>private String memberTwo;<xhtml:br/>\n                        <xhtml:br/>\n                        <xhtml:i>// constructor of OuterClass</xhtml:i>\n                        <xhtml:br/>public OuterClass(String varOne, String varTwo) {<xhtml:div style=\"margin-left:1em;\">this.memberOne = varOne;<xhtml:br/>this.memberTwo = varTwo;</xhtml:div>}<xhtml:br/>\n                        <xhtml:br/>\n                        <xhtml:i>// InnerClass is a member inner class of OuterClass</xhtml:i>\n                        <xhtml:br/>private class InnerClass {<xhtml:div style=\"margin-left:1em;\">private String innerMemberOne;<xhtml:br/>\n                           <xhtml:br/>public InnerClass(String innerVarOne) {<xhtml:div style=\"margin-left:1em;\">this.innerMemberOne = innerVarOne;</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>public String concat(String separator) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:i>// InnerClass has access to private member variables of OuterClass</xhtml:i>\n                              <xhtml:br/>System.out.println(\"Value of memberOne is: \" + memberOne);<xhtml:br/>return OuterClass.this.memberTwo + separator + this.innerMemberOne;</xhtml:div>}</xhtml:div>}</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>Although this is an acceptable use of inner classes it demonstrates one of the weaknesses of inner classes that inner classes have complete access to all member variables and methods of the enclosing class even those that are declared private and protected. When inner classes are compiled and translated into Java bytecode the JVM treats the inner class as a peer class with package level access to the enclosing class.</Body_Text>\n               <Body_Text>To avoid this weakness of inner classes, consider using either static inner classes, local inner classes, or anonymous inner classes.</Body_Text>\n               <Body_Text>The following Java example demonstrates the use of static inner classes using the previous example. The inner class InnerClass is declared using the static modifier that signifies that InnerClass is a static member of the enclosing class OuterClass. By declaring an inner class as a static member of the enclosing class, the inner class can only access other static members and methods of the enclosing class and prevents the inner class from accessing nonstatic member variables and methods of the enclosing class. In this case the inner class InnerClass can only access the static member variable memberTwo of the enclosing class OuterClass but cannot access the nonstatic member variable memberOne.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"Java\">\n                  <xhtml:div>public class OuterClass {<xhtml:br/>\n                     <xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// private member variables of OuterClass</xhtml:i>\n                           <xhtml:br/>private String memberOne;<xhtml:br/>private static String memberTwo;<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// constructor of OuterClass</xhtml:i>\n                           <xhtml:br/>public OuterClass(String varOne, String varTwo) {<xhtml:br/>\n                           <xhtml:div style=\"margin-left:1em;\">this.memberOne = varOne;<xhtml:br/>this.memberTwo = varTwo;</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// InnerClass is a static inner class of OuterClass</xhtml:i>\n                           <xhtml:br/>private static class InnerClass {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>private String innerMemberOne;<xhtml:br/>\n                                 <xhtml:br/>public InnerClass(String innerVarOne) {<xhtml:div style=\"margin-left:1em;\">this.innerMemberOne = innerVarOne;</xhtml:div>}<xhtml:br/>public String concat(String separator) {<xhtml:div style=\"margin-left:1em;\">\n                                    <xhtml:div>\n                                       <xhtml:i>// InnerClass only has access to static member variables of OuterClass</xhtml:i>\n                                       <xhtml:br/>return memberTwo + separator + this.innerMemberOne;</xhtml:div>\n                                 </xhtml:div>}</xhtml:div>\n                           </xhtml:div>}</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>The only limitation with using a static inner class is that as a static member of the enclosing class the inner class does not have a reference to instances of the enclosing class. For many situations this may not be ideal. An alternative is to use a local inner class or an anonymous inner class as shown in the next examples.</Body_Text>\n            "
    },
    {
      "text": "\n               <Intro_Text>In the following example the BankAccount class contains the private member inner class InterestAdder that adds interest to the bank account balance. The start method of the BankAccount class creates an object of the inner class InterestAdder, the InterestAdder inner class implements the ActionListener interface with the method actionPerformed. A Timer object created within the start method of the BankAccount class invokes the actionPerformed method of the InterestAdder class every 30 days to add the interest to the bank account balance based on the interest rate passed to the start method as an input parameter. The inner class InterestAdder needs access to the private member variable balance of the BankAccount class in order to add the interest to the bank account balance.</Intro_Text>\n               <Body_Text>However as demonstrated in the previous example, because InterestAdder is a non-static member inner class of the BankAccount class, InterestAdder also has access to the private member variables of the BankAccount class - including the sensitive data contained in the private member variables for the bank account owner's name, Social Security number, and the bank account number.</Body_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>public class BankAccount {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// private member variables of BankAccount class</xhtml:i>\n                           <xhtml:br/>private String accountOwnerName;<xhtml:br/>private String accountOwnerSSN;<xhtml:br/>private int accountNumber;<xhtml:br/>private double balance;<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// constructor for BankAccount class</xhtml:i>\n                           <xhtml:br/>public BankAccount(String accountOwnerName, String accountOwnerSSN,<xhtml:br/>int accountNumber, double initialBalance, int initialRate)<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">this.accountOwnerName = accountOwnerName;<xhtml:br/>this.accountOwnerSSN = accountOwnerSSN;<xhtml:br/>this.accountNumber = accountNumber;<xhtml:br/>this.balance = initialBalance;<xhtml:br/>this.start(initialRate);</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// start method will add interest to balance every 30 days</xhtml:i>\n                           <xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// creates timer object and interest adding action listener object</xhtml:i>\n                           <xhtml:br/>public void start(double rate)<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">ActionListener adder = new InterestAdder(rate);<xhtml:br/>Timer t = new Timer(1000 * 3600 * 24 * 30, adder);<xhtml:br/>t.start();</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// InterestAdder is an inner class of BankAccount class</xhtml:i>\n                           <xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// that implements the ActionListener interface</xhtml:i>\n                           <xhtml:br/>private class InterestAdder implements ActionListener<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>private double rate;<xhtml:br/>\n                                 <xhtml:br/>public InterestAdder(double aRate)<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">this.rate = aRate;</xhtml:div>}<xhtml:br/>\n                                 <xhtml:br/>public void actionPerformed(ActionEvent event)<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">\n                                    <xhtml:div>\n                                       <xhtml:i>// update interest</xhtml:i>\n                                       <xhtml:br/>double interest = BankAccount.this.balance * rate / 100;<xhtml:br/>BankAccount.this.balance += interest;</xhtml:div>\n                                 </xhtml:div>}<xhtml:br/>\n                              </xhtml:div>\n                           </xhtml:div>}</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>In the following example the InterestAdder class from the above example is declared locally within the start method of the BankAccount class. As a local inner class InterestAdder has its scope restricted to the method (or enclosing block) where it is declared, in this case only the start method has access to the inner class InterestAdder, no other classes including the enclosing class has knowledge of the inner class outside of the start method. This allows the inner class to access private member variables of the enclosing class but only within the scope of the enclosing method or block.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"Java\">\n                  <xhtml:div>public class BankAccount {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// private member variables of BankAccount class</xhtml:i>\n                           <xhtml:br/>private String accountOwnerName;<xhtml:br/>private String accountOwnerSSN;<xhtml:br/>private int accountNumber;<xhtml:br/>private double balance;<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// constructor for BankAccount class</xhtml:i>\n                           <xhtml:br/>public BankAccount(String accountOwnerName, String accountOwnerSSN,<xhtml:br/>int accountNumber, double initialBalance, int initialRate)<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">this.accountOwnerName = accountOwnerName;<xhtml:br/>this.accountOwnerSSN = accountOwnerSSN;<xhtml:br/>this.accountNumber = accountNumber;<xhtml:br/>this.balance = initialBalance;<xhtml:br/>this.start(initialRate);</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// start method will add interest to balance every 30 days</xhtml:i>\n                           <xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// creates timer object and interest adding action listener object</xhtml:i>\n                           <xhtml:br/>public void start(final double rate)<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>\n                                 <xhtml:i>// InterestAdder is a local inner class</xhtml:i>\n                                 <xhtml:br/>\n                                 <xhtml:br/>\n                                 <xhtml:i>// that implements the ActionListener interface</xhtml:i>\n                                 <xhtml:br/>class InterestAdder implements ActionListener<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">\n                                    <xhtml:div>public void actionPerformed(ActionEvent event)<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">\n                                          <xhtml:div>\n                                             <xhtml:i>// update interest</xhtml:i>\n                                             <xhtml:br/>double interest = BankAccount.this.balance * rate / 100;<xhtml:br/>BankAccount.this.balance += interest;</xhtml:div>\n                                       </xhtml:div>}</xhtml:div>\n                                 </xhtml:div>}<xhtml:br/>ActionListener adder = new InterestAdder();<xhtml:br/>Timer t = new Timer(1000 * 3600 * 24 * 30, adder);<xhtml:br/>t.start();</xhtml:div>\n                           </xhtml:div>}</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>A similar approach would be to use an anonymous inner class as demonstrated in the next example. An anonymous inner class is declared without a name and creates only a single instance of the inner class object. As in the previous example the anonymous inner class has its scope restricted to the start method of the BankAccount class.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"Java\">\n                  <xhtml:div>public class BankAccount {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// private member variables of BankAccount class</xhtml:i>\n                           <xhtml:br/>private String accountOwnerName;<xhtml:br/>private String accountOwnerSSN;<xhtml:br/>private int accountNumber;<xhtml:br/>private double balance;<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// constructor for BankAccount class</xhtml:i>\n                           <xhtml:br/>public BankAccount(String accountOwnerName, String accountOwnerSSN,<xhtml:br/>int accountNumber, double initialBalance, int initialRate)<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">this.accountOwnerName = accountOwnerName;<xhtml:br/>this.accountOwnerSSN = accountOwnerSSN;<xhtml:br/>this.accountNumber = accountNumber;<xhtml:br/>this.balance = initialBalance;<xhtml:br/>this.start(initialRate);</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// start method will add interest to balance every 30 days</xhtml:i>\n                           <xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// creates timer object and interest adding action listener object</xhtml:i>\n                           <xhtml:br/>public void start(final double rate)<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>\n                                 <xhtml:i>// anonymous inner class that implements the ActionListener interface</xhtml:i>\n                                 <xhtml:br/>ActionListener adder = new ActionListener()<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">\n                                    <xhtml:div>public void actionPerformed(ActionEvent event)<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">\n                                          <xhtml:div>\n                                             <xhtml:br/>\n                                             double interest = BankAccount.this.balance * rate / 100;\n                                             <xhtml:br/>BankAccount.this.balance += interest;</xhtml:div>\n                                       </xhtml:div>}</xhtml:div>\n                                 </xhtml:div>};<xhtml:br/>\n                                 <xhtml:br/>Timer t = new Timer(1000 * 3600 * 24 * 30, adder);<xhtml:br/>t.start();</xhtml:div>\n                           </xhtml:div>}</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
    },
    {
      "text": "\n               <Intro_Text>In the following Java example a simple applet provides the capability for a user to input a URL into a text field and have the URL opened in a new browser window. The applet contains an inner class that is an action listener for the submit button, when the user clicks the submit button the inner class action listener's actionPerformed method will open the URL entered into the text field in a new browser window. As with the previous examples using inner classes in this manner creates a security risk by exposing private variables and methods. Inner classes create an additional security risk with applets as applets are executed on a remote machine through a web browser within the same JVM and therefore may run side-by-side with other potentially malicious code.</Intro_Text>\n               <Example_Code Nature=\"Bad\">\n                  <xhtml:div>public class UrlToolApplet extends Applet {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// private member variables for applet components</xhtml:i>\n                           <xhtml:br/>private Label enterUrlLabel;<xhtml:br/>private TextField enterUrlTextField;<xhtml:br/>private Button submitButton;<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// init method that adds components to applet</xhtml:i>\n                           <xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// and creates button listener object</xhtml:i>\n                           <xhtml:br/>public void init() {<xhtml:div style=\"margin-left:1em;\">setLayout(new FlowLayout());<xhtml:br/>enterUrlLabel = new Label(\"Enter URL: \");<xhtml:br/>enterUrlTextField = new TextField(\"\", 20);<xhtml:br/>submitButton = new Button(\"Submit\");<xhtml:br/>add(enterUrlLabel);<xhtml:br/>add(enterUrlTextField);<xhtml:br/>add(submitButton);<xhtml:br/>ActionListener submitButtonListener = new SubmitButtonListener();<xhtml:br/>submitButton.addActionListener(submitButtonListener);</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// button listener inner class for UrlToolApplet class</xhtml:i>\n                           <xhtml:br/>private class SubmitButtonListener implements ActionListener {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>public void actionPerformed(ActionEvent evt) {<xhtml:div style=\"margin-left:1em;\">\n                                    <xhtml:div>if (evt.getSource() == submitButton) {<xhtml:div style=\"margin-left:1em;\">String urlString = enterUrlTextField.getText();<xhtml:br/>URL url = null;<xhtml:br/>try {<xhtml:div style=\"margin-left:1em;\">url = new URL(urlString);</xhtml:div>} catch (MalformedURLException e) {<xhtml:div style=\"margin-left:1em;\">System.err.println(\"Malformed URL: \" + urlString);</xhtml:div>}<xhtml:br/>if (url != null) {<xhtml:div style=\"margin-left:1em;\">getAppletContext().showDocument(url);</xhtml:div>}</xhtml:div>}</xhtml:div>\n                                 </xhtml:div>}</xhtml:div>\n                           </xhtml:div>}</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>As with the previous examples a solution to this problem would be to use a static inner class, a local inner class or an anonymous inner class. An alternative solution would be to have the applet implement the action listener rather than using it as an inner class as shown in the following example.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"Java\">\n                  <xhtml:div>public class UrlToolApplet extends Applet implements ActionListener {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// private member variables for applet components</xhtml:i>\n                           <xhtml:br/>private Label enterUrlLabel;<xhtml:br/>private TextField enterUrlTextField;<xhtml:br/>private Button submitButton;<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// init method that adds components to applet</xhtml:i>\n                           <xhtml:br/>public void init() {<xhtml:div style=\"margin-left:1em;\">setLayout(new FlowLayout());<xhtml:br/>enterUrlLabel = new Label(\"Enter URL: \");<xhtml:br/>enterUrlTextField = new TextField(\"\", 20);<xhtml:br/>submitButton = new Button(\"Submit\");<xhtml:br/>add(enterUrlLabel);<xhtml:br/>add(enterUrlTextField);<xhtml:br/>add(submitButton);<xhtml:br/>submitButton.addActionListener(this);</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// implementation of actionPerformed method of ActionListener interface</xhtml:i>\n                           <xhtml:br/>public void actionPerformed(ActionEvent evt) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>if (evt.getSource() == submitButton) {<xhtml:div style=\"margin-left:1em;\">String urlString = enterUrlTextField.getText();<xhtml:br/>URL url = null;<xhtml:br/>try {<xhtml:div style=\"margin-left:1em;\">url = new URL(urlString);</xhtml:div>} catch (MalformedURLException e) {<xhtml:div style=\"margin-left:1em;\">System.err.println(\"Malformed URL: \" + urlString);</xhtml:div>}<xhtml:br/>if (url != null) {<xhtml:div style=\"margin-left:1em;\">getAppletContext().showDocument(url);</xhtml:div>}</xhtml:div>}</xhtml:div>\n                           </xhtml:div>}</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
    }
  ],
  "references": [
    {
      "reference_id": "REF-6",
      "author": [
        "Katrina Tsipenyuk",
        "Brian Chess",
        "Gary McGraw"
      ],
      "title": "Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors",
      "url": "https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf",
      "publication_year": "2005",
      "publication_month": "--11",
      "publication_day": "---07",
      "publication": "NIST Workshop on Software Security Assurance Tools Techniques and Metrics",
      "publisher": "NIST"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "7 Pernicious Kingdoms",
      "submission_date": "2006-07-19"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01",
        "modification_comment": "updated Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08",
        "modification_comment": "updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-03-10",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-12-28",
        "modification_comment": "updated Demonstrative_Examples, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01",
        "modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-06-23",
        "modification_comment": "updated Description, Other_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24",
        "modification_comment": "updated Description, References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-10-13",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Detection_Factors, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Mobile Code: Use of Inner Class",
        "date": "2008-04-11"
      }
    ]
  },
  "detection_methods": [
    {
      "detection_method_id": "DM-14",
      "method": "Automated Static Analysis",
      "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "effectiveness": "High"
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "7 Pernicious Kingdoms",
      "entry_name": "Mobile Code: Use of Inner Class"
    },
    {
      "taxonomy_name": "CLASP",
      "entry_name": "Publicizing of private data when using inner classes"
    },
    {
      "taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
      "entry_name": "Do not expose private members of an outer class from within a nested class",
      "entry_id": "OBJ08-J"
    }
  ],
  "notes": [
    {
      "type": "Other",
      "text": "Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running."
    }
  ]
}
