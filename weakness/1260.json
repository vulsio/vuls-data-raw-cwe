{
  "id": "1260",
  "name": "Improper Handling of Overlap Between Protected Memory Ranges",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Stable",
  "description": "The product allows address regions to overlap, which can result in the bypassing of intended memory protection.",
  "extended_description": "\n            <xhtml:p>Isolated memory regions and access control (read/write) policies are used by hardware to protect privileged software. Software components are often allowed to change or remap memory region definitions in order to enable flexible and dynamically changeable memory management by system software.</xhtml:p>\n            <xhtml:p>If a software component running at lower privilege can program a memory address region to overlap with other memory regions used by software running at higher privilege, privilege escalation may be available to attackers. The memory protection unit (MPU) logic can incorrectly handle such an address overlap and allow the lower-privilege software to read or write into the protected memory region, resulting in privilege escalation attack. An address overlap weakness can also be used to launch a denial of service attack on the higher-privilege software memory regions.</xhtml:p>\n         ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "284",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "CanPrecede",
      "cweid": "119",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Not Language-Specific",
        "prevalence": "Undetermined"
      }
    ],
    "technology": [
      {
        "prevalence": "Undetermined",
        "name": "Memory Hardware"
      },
      {
        "prevalence": "Undetermined",
        "name": "Processor Hardware"
      }
    ],
    "operating_system": [
      {
        "class": "Not OS-Specific",
        "prevalence": "Undetermined"
      }
    ],
    "architecture": [
      {
        "class": "Not Architecture-Specific",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design",
      "note": [
        "Such issues could be introduced during hardware architecture and design or implementation and identified later during the Testing phase."
      ]
    },
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Confidentiality",
        "Integrity",
        "Availability"
      ],
      "impact": [
        "Modify Memory",
        "Read Memory",
        "DoS: Instability"
      ],
      "likelihood": "High"
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "\n                   <xhtml:p>Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software.</xhtml:p>\n               "
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "\n                 <xhtml:p>For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme.</xhtml:p>\n                 <xhtml:p>For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied.  In some MPU designs, the priority scheme can also be programmed by trusted software.</xhtml:p>\n                 <xhtml:p>Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. </xhtml:p>\n                 <xhtml:p>The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.</xhtml:p>\n               "
      ],
      "effectiveness": "High"
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n\t      <Intro_Text>\n\t\t<xhtml:p>For example, consider a design with a 16-bit address that has two software privilege levels: Privileged_SW and Non_privileged_SW. To isolate the system memory regions accessible by these two privilege levels, the design supports three memory regions: Region_0, Region_1, and Region_2.</xhtml:p>\n\t\t<xhtml:p>Each region is defined by two 32 bit registers: its range and its access policy.</xhtml:p>\n\t\t<xhtml:ul>\n\t\t  <xhtml:li>Address_range[15:0]: specifies the Base address of the region</xhtml:li>\n\t\t  <xhtml:li>Address_range[31:16]: specifies the size of the region</xhtml:li>\n\t\t  <xhtml:li>Access_policy[31:0]: specifies what types of software can access a region and which actions are allowed</xhtml:li>\n\t\t</xhtml:ul>\n\t\t<xhtml:p>Certain bits of the access policy are defined symbolically as follows:</xhtml:p>\n\t\t<xhtml:ul>\n\t\t  <xhtml:li>Access_policy.read_np: if set to one, allows reads from Non_privileged_SW</xhtml:li>\n\t\t  <xhtml:li>Access_policy.write_np: if set to one, allows writes from Non_privileged_SW</xhtml:li>\n\t\t  <xhtml:li>Access_policy.execute_np: if set to one, allows code execution by Non_privileged_SW</xhtml:li>\n\t\t  <xhtml:li>Access_policy.read_p: if set to one, allows reads from Privileged_SW</xhtml:li>\n\t\t  <xhtml:li>Access_policy.write_p: if set to one, allows writes from Privileged_SW</xhtml:li>\n\t\t  <xhtml:li>Access_policy.execute_p: if set to one, allows code execution by Privileged_SW</xhtml:li>\n\t\t</xhtml:ul>\n\t\t<xhtml:p>For any requests from software, an address-protection filter checks the address range and access policies for each of the three regions, and only allows software access if all three filters allow access.</xhtml:p>\n\t\t<xhtml:p>Consider the following goals for access control as intended by the designer:</xhtml:p>\n\t\t<xhtml:ul>\n\t\t  <xhtml:li>Region_0 &amp; Region_1: registers are programmable by Privileged_SW</xhtml:li>\n\t\t  <xhtml:li>Region_2: registers are programmable by Non_privileged_SW</xhtml:li>\n\t\t</xhtml:ul>\n\t\t<xhtml:p>The intention is that Non_privileged_SW cannot modify memory region and policies defined by Privileged_SW in Region_0 and Region_1. Thus, it cannot read or write the memory regions that Privileged_SW is using.</xhtml:p>\n\t      </Intro_Text>\n            <Example_Code Nature=\"Bad\">\n               <xhtml:p>Non_privileged_SW can program the Address_range register for Region_2 so that its address overlaps with the ranges defined by Region_0 or Region_1. Using this capability, it is possible for Non_privileged_SW to block any memory region from being accessed by Privileged_SW, i.e., Region_0 and Region_1.</xhtml:p>\n            </Example_Code>\n\t    <Body_Text>This design could be improved in several ways.</Body_Text>\n            <Example_Code Nature=\"Good\">Ensure that software accesses to memory regions are only permitted if all three filters permit access. Additionally, the scheme could define a memory region priority to ensure that Region_2 (the memory region defined by Non_privileged_SW) cannot overlap Region_0 or Region_1 (which are used by Privileged_SW).</Example_Code>\n\t    "
    },
    {
      "text": "\n               <Intro_Text>The example code below is taken from the IOMMU controller module of the HACK@DAC'19 buggy CVA6 SoC [REF-1338]. The static memory map is composed of a set of Memory-Mapped Input/Output (MMIO) regions covering different IP agents within the SoC. Each region is defined by two 64-bit variables representing the base address and size of the memory region (XXXBase and XXXLength).</Intro_Text>\n               <Body_Text>In this example, we have 12 IP agents, and only 4 of them are called out for illustration purposes in the code snippets. Access to the AES IP MMIO region is considered privileged as it provides access to AES secret key, internal states, or decrypted data.</Body_Text>\n\t\t\t   <Example_Code Nature=\"Bad\" Language=\"Verilog\">\n                \t<xhtml:div>...\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\tlocalparam logic[63:0] PLICLength = 64'h03FF_FFFF;<xhtml:br/>\n\t\t\t\t\t\t\t<xhtml:b>localparam logic[63:0] UARTLength = 64'h0011_1000;</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t\t<xhtml:b>localparam logic[63:0] AESLength = 64'h0000_1000;</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t\tlocalparam logic[63:0] SPILength = 64'h0080_0000;<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t<xhtml:div>...<xhtml:br/></xhtml:div>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\ttypedef enum logic [63:0] {<xhtml:br/>\n\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t\t\tPLICBase = 64'h0C00_0000,<xhtml:br/>\n\t\t\t\t\t\t\t\t<xhtml:b>UARTBase = 64'h1000_0000,</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t\t\t<xhtml:b>AESBase = 64'h1010_0000,</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t\t\tSPIBase = 64'h2000_0000,<xhtml:br/>\n\t\t\t\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t</xhtml:div>       \n                \t</xhtml:div>\n               </Example_Code>\n               <Body_Text>The vulnerable code allows the overlap between the protected MMIO region of the AES peripheral and the unprotected UART MMIO region. As a result, unprivileged users can access the protected region of the AES IP. In the given vulnerable example UART MMIO region starts at address 64'h1000_0000 and ends at address 64'h1011_1000 (UARTBase is 64'h1000_0000, and the size of the region is provided by the UARTLength of 64'h0011_1000).</Body_Text>\n\t\t\t   <Body_Text>On the other hand, the AES MMIO region starts at address 64'h1010_0000 and ends at address 64'h1010_1000, which implies an overlap between the two peripherals' memory regions. Thus, any user with access to the UART can read or write the AES MMIO region, e.g., the AES secret key.</Body_Text>\n\t\t\t\t<Body_Text>To mitigate this issue, remove the overlapping address regions by decreasing the size of the UART memory region or adjusting memory bases for all the remaining peripherals. [REF-1339]</Body_Text>\n\t\t\t\t<Example_Code Nature=\"Good\" Language=\"Verilog\">\n\t\t\t\t\t<xhtml:div>...\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\tlocalparam logic[63:0] PLICLength = 64'h03FF_FFFF;<xhtml:br/>\n\t\t\t\t\t\t\t<xhtml:b>localparam logic[63:0] UARTLength = 64'h0000_1000;</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t\tlocalparam logic[63:0] AESLength = 64'h0000_1000;<xhtml:br/>\n\t\t\t\t\t\t\tlocalparam logic[63:0] SPILength = 64'h0080_0000;<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t<xhtml:div>...<xhtml:br/></xhtml:div>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\ttypedef enum logic [63:0] {<xhtml:br/>\n\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t\t\tPLICBase = 64'h0C00_0000,<xhtml:br/>\n\t\t\t\t\t\t\t\tUARTBase = 64'h1000_0000,<xhtml:br/>\n\t\t\t\t\t\t\t\tAESBase = 64'h1010_0000,<xhtml:br/>\n\t\t\t\t\t\t\t\tSPIBase = 64'h2000_0000,<xhtml:br/>\n\t\t\t\t\t\t\t\t...<xhtml:br/>\n\t\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t</xhtml:div>       \n\t\t\t\t\t</xhtml:div>\n               </Example_Code>\n\t\t\t"
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2008-7096",
      "description": "virtualization product allows compromise of hardware product by accessing certain remapping registers.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2008-7096"
    },
    {
      "reference": "[REF-1100]",
      "description": "processor design flaw allows ring 0 code to access more privileged rings by causing a register window to overlap a range of protected system RAM [REF-1100]",
      "link": "https://github.com/xoreaxeaxeax/sinkhole/blob/master/us-15-Domas-TheMemorySinkhole-wp.pdf"
    }
  ],
  "references": [
    {
      "reference_id": "REF-1100",
      "author": [
        "Christopher Domas"
      ],
      "title": "The Memory Sinkhole",
      "url": "https://github.com/xoreaxeaxeax/sinkhole/blob/master/us-15-Domas-TheMemorySinkhole-wp.pdf",
      "publication_year": "2015",
      "publication_month": "--07",
      "publication_day": "---20"
    },
    {
      "reference_id": "REF-1338",
      "title": "Hackatdac19 ariane_soc_pkg.sv",
      "url": "https://github.com/HACK-EVENT/hackatdac19/blob/619e9fb0ef32ee1e01ad76b8732a156572c65700/tb/ariane_soc_pkg.sv#L44:L62",
      "publication_year": "2019",
      "url_date": "2023-06-21"
    },
    {
      "reference_id": "REF-1339",
      "author": [
        "Florian Zaruba",
        "Michael Schaffner",
        "Andreas Traber"
      ],
      "title": "csr_regfile.sv",
      "url": "https://github.com/openhwgroup/cva6/blob/7951802a0147aedb21e8f2f6dc1e1e9c4ee857a2/src/csr_regfile.sv#L45",
      "publication_year": "2019",
      "url_date": "2023-06-21"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi",
      "submission_organization": "Intel Corporation",
      "submission_date": "2020-02-10"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-08-20",
        "modification_comment": "updated Demonstrative_Examples, Description, Modes_of_Introduction, Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-12-10",
        "modification_comment": "updated Maintenance_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28",
        "modification_comment": "updated Demonstrative_Examples, Description, Detection_Factors, Maintenance_Notes, Observed_Examples, Relationships, Weakness_Ordinalities"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-04-28",
        "modification_comment": "updated Applicable_Platforms, Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-06-28",
        "modification_comment": "updated Applicable_Platforms"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-01-31",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Demonstrative_Examples, Mapping_Notes, References"
      }
    ],
    "contribution": [
      {
        "type": "Feedback",
        "contribution_name": "Narasimha Kumar V Mangipudi",
        "contribution_organization": "Lattice Semiconductor",
        "contribution_date": "2021-10-20",
        "contribution_comment": "suggested content improvements"
      },
      {
        "type": "Content",
        "contribution_name": "Hareesh Khattri",
        "contribution_organization": "Intel Corporation",
        "contribution_date": "2021-10-22",
        "contribution_comment": "suggested observed examples"
      },
      {
        "type": "Content",
        "contribution_name": "Shaza Zeitoni",
        "contribution_organization": "Technical University of Darmstadt",
        "contribution_date": "2023-06-21",
        "contribution_comment": "suggested demonstrative example"
      },
      {
        "type": "Content",
        "contribution_name": "Mohamadreza Rostami",
        "contribution_organization": "Technical University of Darmstadt",
        "contribution_date": "2023-06-21",
        "contribution_comment": "suggested demonstrative example"
      },
      {
        "type": "Content",
        "contribution_name": "Pouya Mahmoody",
        "contribution_organization": "Technical University of Darmstadt",
        "contribution_date": "2023-06-21",
        "contribution_comment": "suggested demonstrative example"
      },
      {
        "type": "Content",
        "contribution_name": "Ahmad-Reza Sadeghi",
        "contribution_organization": "Technical University of Darmstadt",
        "contribution_date": "2023-06-21",
        "contribution_comment": "suggested demonstrative example"
      },
      {
        "type": "Content",
        "contribution_name": "Rahul Kande",
        "contribution_organization": "Texas A&M University",
        "contribution_date": "2023-06-21",
        "contribution_comment": "suggested demonstrative example"
      },
      {
        "type": "Content",
        "contribution_name": "Chen Chen",
        "contribution_organization": "Texas A&M University",
        "contribution_date": "2023-06-21",
        "contribution_comment": "suggested demonstrative example"
      },
      {
        "type": "Content",
        "contribution_name": "Jeyavijayan Rajendran",
        "contribution_organization": "Texas A&M University",
        "contribution_date": "2023-06-21",
        "contribution_comment": "suggested demonstrative example"
      }
    ]
  },
  "weakness_ordinalities": [
    {
      "ordinality": "Primary"
    },
    {
      "ordinality": "Resultant"
    }
  ],
  "detection_methods": [
    {
      "method": "Manual Analysis",
      "description": "Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.",
      "effectiveness": "High"
    }
  ],
  "related_attack_patterns": [
    "456",
    "679"
  ],
  "notes": [
    {
      "type": "Maintenance",
      "text": "As of CWE 4.6, CWE-1260 and CWE-1316 are siblings under view 1000, but CWE-1260 might be a parent of CWE-1316. More analysis is warranted."
    }
  ]
}
