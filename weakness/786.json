{
	"id": "786",
	"name": "Access of Memory Location Before Start of Buffer",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The product reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.",
	"extended_description": "This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "119",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "119",
			"view_id": "1305",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "119",
			"view_id": "1340",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {},
	"common_consequences": [
		{
			"scope": [
				"Confidentiality"
			],
			"impact": [
				"Read Memory"
			],
			"note": "For an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences."
		},
		{
			"scope": [
				"Integrity",
				"Availability"
			],
			"impact": [
				"Modify Memory",
				"DoS: Crash, Exit, or Restart"
			],
			"note": "Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash."
		},
		{
			"scope": [
				"Integrity"
			],
			"impact": [
				"Modify Memory",
				"Execute Unauthorized Code or Commands"
			],
			"note": "If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy."
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-87",
			"text": "\n               <Intro_Text>In the following C/C++ example, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>char* trimTrailingWhitespace(char *strMessage, int length) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>char *retMessage;<xhtml:br/>char *message = malloc(sizeof(char)*(length+1));<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// copy input string to a temporary string</xhtml:i>\n                           <xhtml:br/>char message[length+1];<xhtml:br/>int index;<xhtml:br/>for (index = 0; index &lt; length; index++) {<xhtml:div style=\"margin-left:1em;\">message[index] = strMessage[index];</xhtml:div>}<xhtml:br/>message[index] = '\\0';<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// trim trailing whitespace</xhtml:i>\n                           <xhtml:br/>int len = index-1;<xhtml:br/>while (isspace(message[len])) {<xhtml:div style=\"margin-left:1em;\">message[len] = '\\0';<xhtml:br/>len--;</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// return string without trailing whitespace</xhtml:i>\n                           <xhtml:br/>retMessage = message;<xhtml:br/>return retMessage;</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character string and will call the isspace() function on an address outside of the bounds of the local buffer.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-90",
			"text": "\n               <Intro_Text>The following example asks a user for an offset into an array to select an item.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>\n                     <xhtml:br/>int main (int argc, char **argv) {<xhtml:div style=\"margin-left:1em;\">char *items[] = {\"boat\", \"car\", \"truck\", \"train\"};<xhtml:br/>int index = GetUntrustedOffset();<xhtml:br/>printf(\"You selected %s\\n\", items[index-1]);</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read (CWE-126).</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-88",
			"text": "\n               <Intro_Text>The following is an example of code that may result in a buffer underwrite. This code is attempting to replace the substring \"Replace Me\" in destBuf with the string stored in srcBuf. It does so by using the function strstr(), which returns a pointer to the found substring in destBuf.  Using pointer arithmetic, the starting index of the substring is found.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>int main() {\n                     <xhtml:div style=\"margin-left:1em;\">...<xhtml:br/>\n                     char *result = strstr(destBuf, \"Replace Me\");<xhtml:br/>\n                     int idx = result - destBuf;<xhtml:br/>\n                     strcpy(&amp;destBuf[idx], srcBuf);<xhtml:br/>\n                     ...</xhtml:div>}\n                  </xhtml:div>\n               </Example_Code>\n               <Body_Text>In the case where the substring is not found in destBuf, strstr() will return NULL, causing the pointer arithmetic to be undefined, potentially setting the value of idx to a negative number.  If idx is negative, this will result in a buffer underwrite of destBuf.</Body_Text>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2002-2227",
			"description": "Unchecked length of SSLv2 challenge value leads to buffer underflow.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2002-2227"
		},
		{
			"reference": "CVE-2007-4580",
			"description": "Buffer underflow from a small size value with a large buffer (length parameter inconsistency, CWE-130)",
			"link": "https://www.cve.org/CVERecord?id=CVE-2007-4580"
		},
		{
			"reference": "CVE-2007-1584",
			"description": "Buffer underflow from an all-whitespace string, which causes a counter to be decremented before the buffer while looking for a non-whitespace character.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2007-1584"
		},
		{
			"reference": "CVE-2007-0886",
			"description": "Buffer underflow resultant from encoded data that triggers an integer overflow.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2007-0886"
		},
		{
			"reference": "CVE-2006-6171",
			"description": "Product sets an incorrect buffer size limit, leading to \"off-by-two\" buffer underflow.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2006-6171"
		},
		{
			"reference": "CVE-2006-4024",
			"description": "Negative value is used in a memcpy() operation, leading to buffer underflow.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2006-4024"
		},
		{
			"reference": "CVE-2004-2620",
			"description": "Buffer underflow due to mishandled special characters",
			"link": "https://www.cve.org/CVERecord?id=CVE-2004-2620"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2009-10-21"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Common_Consequences, Demonstrative_Examples, Observed_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Common_Consequences, Demonstrative_Examples, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-12-10",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2024-02-29",
				"modification_comment": "updated Demonstrative_Examples"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-13",
			"method": "Fuzzing",
			"description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not form or use out-of-bounds pointers or array subscripts",
			"entry_id": "ARR30-C",
			"mapping_fit": "CWE More Specific"
		}
	]
}
