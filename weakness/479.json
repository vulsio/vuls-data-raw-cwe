{
	"id": "479",
	"name": "Signal Handler Use of a Non-reentrant Function",
	"abstraction": "Variant",
	"structure": "Simple",
	"status": "Draft",
	"description": "The product defines a signal handler that calls a non-reentrant function.",
	"extended_description": "\n            <xhtml:p>Non-reentrant functions are functions that cannot safely be called, interrupted, and then recalled before the first call has finished without resulting in memory corruption. This can lead to an unexpected system state and unpredictable results with a variety of potential consequences depending on context, including denial of service and code execution.</xhtml:p>\n            <xhtml:p>Many functions are not reentrant, but some of them can result in the corruption of memory if they are used in a signal handler. The function call syslog() is an example of this. In order to perform its functionality, it allocates a small amount of memory as \"scratch space.\" If syslog() is suspended by a signal call and the signal handler calls syslog(), the memory used by both of these functions enters an undefined, and possibly, exploitable state. Implementations of malloc() and free() manage metadata in global structures in order to track which memory is allocated versus which memory is available, but they are non-reentrant. Simultaneous calls to these functions can cause corruption of the metadata.</xhtml:p>\n         ",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "828",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "663",
			"view_id": "1000"
		},
		{
			"nature": "CanPrecede",
			"cweid": "123",
			"view_id": "1000"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"prevalence": "Undetermined",
				"name": "C"
			},
			{
				"prevalence": "Undetermined",
				"name": "C++"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"likelihood_of_exploit": "Low",
	"common_consequences": [
		{
			"scope": [
				"Integrity",
				"Confidentiality",
				"Availability"
			],
			"impact": [
				"Execute Unauthorized Code or Commands"
			],
			"note": "It may be possible to execute arbitrary code through the use of a write-what-where condition."
		},
		{
			"scope": [
				"Integrity"
			],
			"impact": [
				"Modify Memory",
				"Modify Application Data"
			],
			"note": "Signal race conditions often result in data corruption."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Requirements"
			],
			"description": [
				"Require languages or libraries that provide reentrant functionality, or otherwise make it easier to avoid this weakness."
			]
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Design signal handlers to only set flags rather than perform complex functionality."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Ensure that non-reentrant functions are not found in signal handlers."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally."
			],
			"effectiveness": "Defense in Depth"
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-171",
			"text": "\n               <Intro_Text>In this example, a signal handler uses syslog() to log a message:</Intro_Text>\n               <Example_Code Nature=\"Bad\">\n                  <xhtml:div>char *message;<xhtml:br/>void sh(int dummy) {<xhtml:div style=\"margin-left:1em;\">syslog(LOG_NOTICE,\"%s\\n\",message);<xhtml:br/>sleep(10);<xhtml:br/>exit(0);</xhtml:div>}<xhtml:br/>int main(int argc,char* argv[]) {<xhtml:div style=\"margin-left:1em;\">...<xhtml:br/>signal(SIGHUP,sh);<xhtml:br/>signal(SIGTERM,sh);<xhtml:br/>sleep(10);<xhtml:br/>exit(0);</xhtml:div>}<xhtml:div>If the execution of the first call to the signal handler is suspended after invoking syslog(), and the signal handler is called a second time, the memory allocated by syslog() enters an undefined, and possibly, exploitable state.</xhtml:div>\n                  </xhtml:div>\n               </Example_Code>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2005-0893",
			"description": "signal handler calls function that ultimately uses malloc()",
			"link": "https://www.cve.org/CVERecord?id=CVE-2005-0893"
		},
		{
			"reference": "CVE-2004-2259",
			"description": "SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2004-2259"
		}
	],
	"references": [
		{
			"reference_id": "REF-18",
			"author": [
				"Secure Software, Inc."
			],
			"title": "The CLASP Application Security Process",
			"url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
			"publication_year": "2005",
			"url_date": "2024-11-17"
		},
		{
			"section": "Chapter 13, \"Signal Vulnerabilities\", Page 791",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CLASP",
			"submission_date": "2006-07-19"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Applicable_Platforms, Common_Consequences, Description, Relationships, Other_Notes, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-11-24",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-09-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-12-13",
				"modification_comment": "updated Demonstrative_Examples, Description, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-27",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-09-13",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Observed_Examples, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Description, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-12-10",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-10-26",
				"modification_comment": "updated Demonstrative_Examples"
			}
		],
		"previous_entry_name": [
			{
				"text": "Unsafe Function Call from a Signal Handler",
				"date": "2010-12-13"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "CLASP",
			"entry_name": "Unsafe function call from a signal handler"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Call only asynchronous-safe functions within signal handlers",
			"entry_id": "SIG30-C",
			"mapping_fit": "Exact"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not call signal() from within interruptible signal handlers",
			"entry_id": "SIG34-C"
		},
		{
			"taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
			"entry_name": "Never dereference null pointers",
			"entry_id": "EXP01-J"
		},
		{
			"taxonomy_name": "Software Fault Patterns",
			"entry_name": "Use of an improper API",
			"entry_id": "SFP3"
		}
	],
	"affected_resources": [
		"System Process"
	]
}
