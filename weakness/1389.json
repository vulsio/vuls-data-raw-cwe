{
	"id": "1389",
	"name": "Incorrect Parsing of Numbers with Different Radices",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The product parses numeric input assuming base 10 (decimal) values, but it does not account for inputs that use a different base number (radix).",
	"extended_description": "\n\t\t\t\t<xhtml:p>Frequently, a numeric input that begins with \"0\" is treated as octal, or \"0x\" causes it to be treated as hexadecimal, e.g. by the inet_addr() function. For example, \"023\" (octal) is 35 decimal, or \"0x31\" is 49 decimal. Other bases may be used as well. If the developer assumes decimal-only inputs, the code could produce incorrect numbers when the inputs are parsed using a different base. This can result in unexpected and/or dangerous behavior. For example, a \"0127.0.0.1\" IP address is parsed as octal due to the leading \"0\", whose numeric value would be the same as 87.0.0.1 (decimal), where the developer likely expected to use 127.0.0.1.</xhtml:p>\n\t\t\t\t<xhtml:p>The consequences vary depending on the surrounding code in which this weakness occurs, but they can include bypassing network-based access control using unexpected IP addresses or netmasks, or causing apparently-symbolic identifiers to be processed as if they are numbers. In web applications, this can enable bypassing of SSRF restrictions.</xhtml:p>\n\t\t\t",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "704",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"class": "Not Technology-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation",
			"note": [
				"Input validation used may assume decimal bases during conditional checks, when it may not always be the case."
			]
		},
		{
			"phase": "Implementation",
			"note": [
				"The application may rely on a service that supports different numerical bases."
			]
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Confidentiality"
			],
			"impact": [
				"Read Application Data"
			],
			"note": "An attacker may use an unexpected numerical base to access private application resources.",
			"likelihood": "Unknown"
		},
		{
			"scope": [
				"Integrity"
			],
			"impact": [
				"Bypass Protection Mechanism",
				"Alter Execution Logic"
			],
			"note": "An attacker may use an unexpected numerical base to bypass or manipulate access control mechanisms.",
			"likelihood": "Unknown"
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"If only decimal-based values are expected in the application, conditional checks should be created in a way that prevent octal or hexadecimal strings from being checked. This can be achieved by converting any numerical string to an explicit base-10 integer prior to the conditional check, to prevent octal or hex values from ever being checked against the condition."
			],
			"strategy": "Enforcement by Conversion"
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"If various numerical bases do need to be supported, check for leading values indicating the non-decimal base you wish to support (such as 0x for hex) and convert the numeric strings to integers of the respective base. Reject any other alternative-base string that is not intentionally supported by the application."
			],
			"strategy": "Input Validation"
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"If regular expressions are used to validate IP addresses, ensure that they are bounded using ^ and $ to prevent base-prepended IP addresses from being matched."
			],
			"strategy": "Input Validation"
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n\t\t\t\t\t<Intro_Text>The below demonstrative example uses an IP validator that splits up an IP address by octet, tests to ensure each octet can be casted into an integer, and then returns the original IP address if no exceptions are raised. This validated IP address is then tested using the \"ping\" command.</Intro_Text>\n\t\t\t\t\t<Example_Code Nature=\"Bad\" Language=\"Python\">\n\t\t\t\t\t<xhtml:div>\n\t\t\t\t\t  import subprocess<xhtml:br/>\n\t\t\t\t\t  <xhtml:br/>\n\t\t\t\t\t  def validate_ip(ip: str):<xhtml:br/>\n\t\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t    split_ip = ip.split('.')<xhtml:br/>\n\t\t\t\t\t\tif len(split_ip) &gt; 4 or len(split_ip) == 0:<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t  raise ValueError(\"Invalid IP length\")<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t<xhtml:br/>\n\t\t\t\t\t\tfor octet in split_ip:<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t  try:<xhtml:br/>\n\t\t\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t    int(octet, 10)<xhtml:br/>\n\t\t\t\t\t\t  </xhtml:div>\n\t\t\t\t\t\t  except ValueError as e:<xhtml:br/>\n\t\t\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t    raise ValueError(f\"Cannot convert IP octet to int - {e}\")<xhtml:br/>\n\t\t\t\t\t\t  </xhtml:div>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\t<xhtml:br/>\n\t\t\t\t\t\t<xhtml:i># Returns original IP after ensuring no exceptions are raised</xhtml:i><xhtml:br/>\n\t\t\t\t\t\treturn ip<xhtml:br/>\n\n\t\t\t\t\t  </xhtml:div>\n\t\t\t\t\t  <xhtml:br/>\n\t\t\t\t\t  def run_ping(ip: str):<xhtml:br/>\n\t\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t    validated = validate_ip(ip)<xhtml:br/>\n\t\t\t\t\t\t<xhtml:i># The ping command treats zero-prepended IP addresses as octal</xhtml:i><xhtml:br/>\n\t\t\t\t\t\tresult = subprocess.call([\"ping\", validated])<xhtml:br/>\n\t\t\t\t\t\tprint(result)<xhtml:br/>\n\t\t\t\t\t  </xhtml:div>\n\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t</Example_Code>\n\t\t\t\t\t<Body_Text>If run_ping() were to be called with one or more zero-prepended octets, validate_ip() will succeed as zero-prepended numerical strings can be interpreted as decimal by a cast (\"012\" would cast to 12). However, as the original IP with the prepended zeroes is returned rather than the casted IP, it will be used in the call to the ping command. Ping DOES check and support octal-based IP octets, so the IP reached via ping may be different than the IP assumed by the validator. For example, ping would considered \"0127.0.0.1\" the same as \"87.0.0.1\".</Body_Text>\n\t\t\t\t"
		},
		{
			"demonstrative_example_id": "DX-154",
			"text": "\n\t\t\t\t\t<Intro_Text>This code uses a regular expression to validate an IP string prior to using it in a call to the \"ping\" command.</Intro_Text>\n\t\t\t\t\t<Example_Code Nature=\"Bad\" Language=\"Python\">\n\t\t\t\t\t<xhtml:div>\n\t\t\t\t\t  import subprocess<xhtml:br/>\n\t\t\t\t\t  import re<xhtml:br/>\n\t\t\t\t\t  <xhtml:br/>\n\t\t\t\t\t  def validate_ip_regex(ip: str):<xhtml:br/>\n\t\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t    ip_validator = re.compile(r\"((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}\")<xhtml:br/>\n\t\t\t\t\t\tif ip_validator.match(ip):<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t  return ip<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\telse:<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t  raise ValueError(\"IP address does not match valid pattern.\")<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t  </xhtml:div>\n\t\t\t\t\t<xhtml:br/>\n\t\t\t\t\tdef run_ping_regex(ip: str):<xhtml:br/>\n\t\t\t\t      <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\tvalidated = validate_ip_regex(ip)<xhtml:br/>\n\t\t\t\t\t\t<xhtml:i># The ping command treats zero-prepended IP addresses as octal</xhtml:i><xhtml:br/>\n\t\t\t\t\t\tresult = subprocess.call([\"ping\", validated])<xhtml:br/>\n\t\t\t\t\t\tprint(result)<xhtml:br/>\n\t\t\t\t\t  </xhtml:div>\n\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t</Example_Code>\n\t\t\t\t\t<Body_Text>Since the regular expression does not have anchors (CWE-777), i.e. is unbounded without ^ or $ characters, then prepending a 0 or 0x to the beginning of the IP address will still result in a matched regex pattern. Since the ping command supports octal and hex prepended IP addresses, it will use the unexpectedly valid IP address (CWE-1389). For example, \"0x63.63.63.63\" would be considered equivalent to \"99.63.63.63\". As a result, the attacker could potentially ping systems that the attacker cannot reach directly.</Body_Text>\n\t\t\t\t"
		},
		{
			"text": "\n\t\t\t\t\t<Intro_Text><xhtml:p>Consider the following scenario, inspired by CWE team member Kelly Todd.</xhtml:p>\n\t\t\t\t\t<xhtml:p>Kelly wants to set up monitoring systems for his two cats, who pose very different threats. One cat, Night, tweets embarrassing or critical comments about his owner in ways that could cause reputational damage, so Night's blog needs to be monitored regularly. The other cat, Taki, likes to distract Kelly and his coworkers during business meetings with cute meows, so Kelly monitors Taki's location using a different web site.</xhtml:p>\n\t\t\t\t\t<xhtml:p>Suppose /etc/hosts provides the site info as follows:</xhtml:p>\n\t\t\t\t\t</Intro_Text>\n\t\t\t\t\t<Example_Code Nature=\"Bad\" Language=\"Other\">\n\t\t\t\t\t<xhtml:div>\n\t\t\t\t\t  taki.example.com 10.1.0.7<xhtml:br/>\n\t\t\t\t\t  night.example.com 010.1.0.8\n\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t</Example_Code>\n\t\t\t\t\t<Body_Text>The entry for night.example.com has a typo \"010\" in the first octet. When using ping to ensure the servers are up, the leading 0 causes the IP address to be converted using octal.  So when Kelly's script attempts to access night.example.com, it inadvertently scans 8.1.0.8 instead of 10.1.0.8 (since \"010\" in octal is 8 in decimal), and Night is free to send new Tweets without being immediately detected.</Body_Text>\n\t\t\t\t"
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2021-29662",
			"description": "Chain: Use of zero-prepended IP addresses in Perl-based IP validation module can lead to an access control bypass.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2021-29662"
		},
		{
			"reference": "CVE-2021-28918",
			"description": "Chain: Use of zero-prepended IP addresses in a product that manages IP blocks can lead to an SSRF.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2021-28918"
		},
		{
			"reference": "CVE-2021-29921",
			"description": "Chain: Use of zero-prepended IP addresses in a Python standard library package can lead to an SSRF.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2021-29921"
		},
		{
			"reference": "CVE-2021-29923",
			"description": "Chain: Use of zero-prepended IP addresses in the net Golang library can lead to an access control bypass.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2021-29923"
		},
		{
			"reference": "CVE-2021-29424",
			"description": "Chain: Use of zero-prepended IP addresses in Perl netmask module allows bypass of IP-based access control.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2021-29424"
		},
		{
			"reference": "CVE-2016-4029",
			"description": "Chain: incorrect validation of intended decimal-based IP address format (CWE-1286) enables parsing of octal or hexadecimal formats (CWE-1389), allowing bypass of an SSRF protection mechanism (CWE-918).",
			"link": "https://www.cve.org/CVERecord?id=CVE-2016-4029"
		},
		{
			"reference": "CVE-2020-13776",
			"description": "Mishandling of hex-valued usernames leads to unexpected decimal conversion and privilege escalation in the systemd Linux suite.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2020-13776"
		}
	],
	"references": [
		{
			"reference_id": "REF-1284",
			"author": [
				"Sick Codes"
			],
			"title": "Universal \"netmask\" npm package, used by 270,000+ projects, vulnerable to octal input data",
			"url": "https://sick.codes/universal-netmask-npm-package-used-by-270000-projects-vulnerable-to-octal-input-data-server-side-request-forgery-remote-file-inclusion-local-file-inclusion-and-more-cve-2021-28918/",
			"publication_year": "2021",
			"publication_month": "--03",
			"publication_day": "---28"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "Anonymous External Contributor",
			"submission_date": "2021-05-28"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		]
	}
}
