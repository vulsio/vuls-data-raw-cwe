{
	"id": "597",
	"name": "Use of Wrong Operator in String Comparison",
	"abstraction": "Variant",
	"structure": "Simple",
	"status": "Draft",
	"description": "The product uses the wrong operator when comparing a string, such as using \"==\" when the .equals() method should be used instead.",
	"extended_description": "In Java, using == or != to compare two strings for equality actually compares two objects for equality rather than their string values for equality. Chances are good that the two references will never be equal. While this weakness often only affects program correctness, if the equality is used for a security decision, the unintended comparison result could be leveraged to affect program security.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "595",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "595",
			"view_id": "1305",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "480",
			"view_id": "1000"
		}
	],
	"applicable_platforms": {},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Other"
			],
			"impact": [
				"Other"
			]
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Within Java, use .equals() to compare string values.<xhtml:br/>\n               Within JavaScript, use == to compare string values.<xhtml:br/>\n               Within PHP, use == to compare a numeric value to a string value. (PHP converts the string to a number.)\n               "
			],
			"effectiveness": "High"
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-60",
			"text": "\n               <Intro_Text>In the example below, two Java String objects are declared and initialized with the same string values. An if statement is used to determine if the strings are equivalent.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>String str1 = new String(\"Hello\");<xhtml:br/>String str2 = new String(\"Hello\");<xhtml:br/>if (str1 == str2) {<xhtml:div style=\"margin-left:1em;\">System.out.println(\"str1 == str2\");</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, the if statement will not be executed as the strings are compared using the \"==\" operator. For Java objects, such as String objects, the \"==\" operator compares object references, not object values. While the two String objects above contain the same string values, they refer to different object references, so the System.out.println statement will not be executed. To compare object values, the previous code could be modified to use the equals method:</Body_Text>\n               <Example_Code Nature=\"Good\">\n                  <xhtml:div>if (str1.equals(str2)) {<xhtml:div style=\"margin-left:1em;\">System.out.println(\"str1 equals str2\");</xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		},
		{
			"text": "\n               <Intro_Text>In the example below, three JavaScript variables are declared and initialized with the same values. Note that JavaScript will change a value between numeric and string as needed, which is the reason an integer is included with the strings. An if statement is used to determine whether the values are the same.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"JavaScript\">\n                  &lt;p id=\"ieq3s1\" type=\"text\"&gt;(i === s1) is FALSE&lt;/p&gt;<xhtml:br/>\n                  &lt;p id=\"s4eq3i\" type=\"text\"&gt;(s4 === i) is FALSE&lt;/p&gt;<xhtml:br/>\n                  &lt;p id=\"s4eq3s1\" type=\"text\"&gt;(s4 === s1) is FALSE&lt;/p&gt;<xhtml:br/>\n                  <xhtml:br/>\n                  var i = 65;<xhtml:br/>\n                  var s1 = '65';<xhtml:br/>\n                  var s4 = new String('65');<xhtml:br/>\n                  <xhtml:br/>\n                  if (i === s1)<xhtml:br/>\n                  {<xhtml:br/>\n                  <xhtml:div style=\"margin-left:1em;\">document.getElementById(\"ieq3s1\").innerHTML = \"(i === s1) is TRUE\";</xhtml:div>\n                  }<xhtml:br/>\n                  <xhtml:br/>\n                  if (s4 === i)<xhtml:br/>\n                  {<xhtml:br/>\n                  <xhtml:div style=\"margin-left:1em;\">document.getElementById(\"s4eq3i\").innerHTML = \"(s4 === i) is TRUE\";</xhtml:div>\n                  }<xhtml:br/>\n                  <xhtml:br/>\n                  if (s4 === s1)<xhtml:br/>\n                  {<xhtml:br/>\n                  <xhtml:div style=\"margin-left:1em;\">document.getElementById(\"s4eq3s1\").innerHTML = \"(s4 === s1) is TRUE\";</xhtml:div>\n                  }<xhtml:br/>\n               </Example_Code>\n               <Body_Text><xhtml:p>However, the body of the if statement will not be executed, as the \"===\" compares both the type of the variable AND the value. As the types of the first comparison are number and string, it fails. The types in the second are int and reference, so this one fails as well. The types in the third are reference and string, so it also fails.</xhtml:p>\n               <xhtml:p>While the variables above contain the same values, they are contained in different types, so the document.getElementById... statement will not be executed in any of the cases.</xhtml:p>\n               <xhtml:p>To compare object values, the previous code is modified and shown below to use the \"==\" for value comparison so the comparison in this example executes the HTML statement:</xhtml:p></Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"JavaScript\">\n                  &lt;p id=\"ieq2s1\" type=\"text\"&gt;(i == s1) is FALSE&lt;/p&gt;<xhtml:br/>\n                  &lt;p id=\"s4eq2i\" type=\"text\"&gt;(s4 == i) is FALSE&lt;/p&gt;<xhtml:br/>\n                  &lt;p id=\"s4eq2s1\" type=\"text\"&gt;(s4 == s1) is FALSE&lt;/p&gt;<xhtml:br/>\n                  <xhtml:br/>\n                  var i = 65;<xhtml:br/>\n                  var s1 = '65';<xhtml:br/>\n                  var s4 = new String('65');<xhtml:br/>\n                  <xhtml:br/>\n                  if (i == s1)<xhtml:br/>\n                  {<xhtml:br/>\n                  <xhtml:div style=\"margin-left:1em;\">document.getElementById(\"ieq2s1\").innerHTML = \"(i == s1) is TRUE\";</xhtml:div>\n                  }<xhtml:br/>\n                  <xhtml:br/>\n                  if (s4 == i)<xhtml:br/>\n                  {<xhtml:br/>\n                  <xhtml:div style=\"margin-left:1em;\">document.getElementById(\"s4eq2i\").innerHTML = \"(s4 == i) is TRUE\";</xhtml:div>\n                  }<xhtml:br/>\n                  <xhtml:br/>\n                  if (s4 == s1)<xhtml:br/>\n                  {<xhtml:br/>\n                  <xhtml:div style=\"margin-left:1em;\">document.getElementById(\"s4eq2s1\").innerHTML = \"(s4 == s1) is TRUE\";</xhtml:div>\n                  }<xhtml:br/>\n               </Example_Code>\n            "
		},
		{
			"text": "\n               <Intro_Text>In the example below, two PHP variables are declared and initialized with the same numbers - one as a string, the other as an integer. Note that PHP will change the string value to a number for a comparison. An if statement is used to determine whether the values are the same.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"PHP\">\n                  var $i = 65;<xhtml:br/>\n                  var $s1 = \"65\";<xhtml:br/>\n                  <xhtml:br/>\n                  if ($i === $s1)<xhtml:br/>\n                  {<xhtml:br/>\n                  <xhtml:div style=\"margin-left:1em;\">echo '($i === $s1) is TRUE'. \"\\n\";</xhtml:div>\n                  }<xhtml:br/>\n                  else<xhtml:br/>\n                  {<xhtml:br/>\n                  <xhtml:div style=\"margin-left:1em;\">echo '($i === $s1) is FALSE'. \"\\n\";</xhtml:div>\n                  }<xhtml:br/>\n               </Example_Code>\n               <Body_Text><xhtml:p>However, the body of the if statement will not be executed, as the \"===\" compares both the type of the variable AND the value. As the types of the first comparison are number and string, it fails.</xhtml:p>\n               <xhtml:p>While the variables above contain the same values, they are contained in different types, so the TRUE portion of the if statement will not be executed.</xhtml:p>\n               <xhtml:p>To compare object values, the previous code is modified and shown below to use the \"==\" for value comparison (string converted to number) so the comparison in this example executes the TRUE statement:</xhtml:p></Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"PHP\">\n                  var $i = 65;<xhtml:br/>\n                  var $s1 = \"65\";<xhtml:br/>\n                  <xhtml:br/>\n                  if ($i == $s1)<xhtml:br/>\n                  {<xhtml:br/>\n                  <xhtml:div style=\"margin-left:1em;\">echo '($i == $s1) is TRUE'. \"\\n\";</xhtml:div>\n                  }<xhtml:br/>\n                  else<xhtml:br/>\n                  {<xhtml:br/>\n                  <xhtml:div style=\"margin-left:1em;\">echo '($i == $s1) is FALSE'. \"\\n\";</xhtml:div>\n                  }<xhtml:br/>\n               </Example_Code>\n            "
		}
	],
	"references": [
		{
			"section": "Chapter 6, \"Typos\", Page 289",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2006-12-15"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Description, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-10-14",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-05-27",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-03-29",
				"modification_comment": "updated Demonstrative_Examples, Description, Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-03-15",
				"modification_comment": "updated Demonstrative_Examples, Description, Potential_Mitigations, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		],
		"previous_entry_name": [
			{
				"text": "Erroneous String Compare",
				"date": "2008-04-11"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
			"entry_name": "Do not use the equality operators when comparing values of boxed primitives",
			"entry_id": "EXP03-J"
		},
		{
			"taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
			"entry_name": "Do not use the equality operators when comparing values of boxed primitives",
			"entry_id": "EXP03-J"
		},
		{
			"taxonomy_name": "SEI CERT Perl Coding Standard",
			"entry_name": "Use the correct operator type for comparing values",
			"entry_id": "EXP35-PL",
			"mapping_fit": "CWE More Specific"
		},
		{
			"taxonomy_name": "Software Fault Patterns",
			"entry_name": "Glitch in computation",
			"entry_id": "SFP1"
		}
	]
}
