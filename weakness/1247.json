{
  "id": "1247",
  "name": "Improper Protection Against Voltage and Clock Glitches",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Stable",
  "description": "The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.",
  "extended_description": "\n        <xhtml:p>A device might support features such as secure boot which are supplemented with hardware and firmware support. This involves establishing a chain of trust, starting with an immutable root of trust by checking the signature of the next stage (culminating with the OS and runtime software) against a golden value before transferring control. The intermediate stages typically set up the system in a secure state by configuring several access control settings. Similarly, security logic for exercising a debug or testing interface may be implemented in hardware, firmware, or both. A device needs to guard against fault attacks such as voltage glitches and clock glitches that an attacker may employ in an attempt to compromise the system.</xhtml:p>\n      ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "1384",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Not Language-Specific",
        "prevalence": "Undetermined"
      }
    ],
    "technology": [
      {
        "class": "ICS/OT",
        "prevalence": "Undetermined"
      },
      {
        "class": "System on Chip",
        "prevalence": "Undetermined"
      },
      {
        "prevalence": "Undetermined",
        "name": "Power Management Hardware"
      },
      {
        "prevalence": "Undetermined",
        "name": "Clock/Counter Hardware"
      },
      {
        "prevalence": "Undetermined",
        "name": "Sensor Hardware"
      }
    ],
    "operating_system": [
      {
        "class": "Not OS-Specific",
        "prevalence": "Undetermined"
      }
    ],
    "architecture": [
      {
        "class": "Not Architecture-Specific",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Operation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Confidentiality",
        "Integrity",
        "Availability",
        "Access Control"
      ],
      "impact": [
        "Gain Privileges or Assume Identity",
        "Bypass Protection Mechanism",
        "Read Memory",
        "Modify Memory",
        "Execute Unauthorized Code or Commands"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design",
        "Implementation"
      ],
      "description": [
        "\n            <xhtml:p>At the circuit-level, using Tunable Replica Circuits (TRCs) or special flip-flops such as Razor flip-flops helps mitigate glitch attacks. Working at the SoC or platform base, level sensors may be implemented to detect glitches. Implementing redundancy in security-sensitive code (e.g., where checks are performed)also can help with mitigation of glitch attacks.</xhtml:p>\n          "
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n          <Intro_Text>Below is a representative snippet of C code that is part of the secure-boot flow. A signature of the runtime-firmware image is calculated and compared against a golden value. If the signatures match, the bootloader loads runtime firmware. If there is no match, an error halt occurs. If the underlying hardware executing this code does not contain any circuitry or sensors to detect voltage or clock glitches, an attacker might launch a fault-injection attack right when the signature check is happening (at the location marked with the comment), causing a bypass of the signature-checking process.</Intro_Text>\n          <Example_Code Nature=\"Bad\" Language=\"C\">\n            ...<xhtml:br/>\n            if (signature_matches)  // &lt;-Glitch Here<xhtml:br/>\n            {<xhtml:br/>\n\t\t\t<xhtml:div style=\"margin-left:1em;\">\n              load_runtime_firmware();<xhtml:br/>\n\t\t\t</xhtml:div>\n            }<xhtml:br/>\n            else<xhtml:br/>\n            {<xhtml:br/>\n\t\t\t<xhtml:div style=\"margin-left:1em;\">\n              do_not_load_runtime_firmware();<xhtml:br/>\n\t\t\t</xhtml:div>\n            }<xhtml:br/>\n            <xhtml:br/>\t\n            ...<xhtml:br/>\n          </Example_Code>\n          <Body_Text>After bypassing secure boot, an attacker can gain access to system assets to which the attacker should not have access.</Body_Text>\n        \t<Example_Code Nature=\"Good\">\n         \t\t<xhtml:div>If the underlying hardware detects a voltage or clock glitch, the information can be used to prevent the glitch from being successful.</xhtml:div>\n        \t\t</Example_Code>\n      \t"
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2019-17391",
      "description": "Lack of anti-glitch protections allows an attacker to launch a physical attack to bypass the secure boot and read protected eFuses.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2019-17391"
    },
    {
      "reference": "CVE-2021-33478",
      "description": "IP communication firmware allows access to a boot shell via certain impulses",
      "link": "https://www.cve.org/CVERecord?id=CVE-2021-33478"
    }
  ],
  "references": [
    {
      "reference_id": "REF-1061",
      "author": [
        "Keith Bowman",
        "James Tschanz",
        "Chris Wilkerson",
        "Shih-Lien Lu",
        "Tanay Karnik",
        "Vivek De",
        "Shekhar Borkar"
      ],
      "title": "Circuit Techniques for Dynamic Variation Tolerance",
      "url": "https://dl.acm.org/doi/10.1145/1629911.1629915",
      "url_date": "2023-04-07"
    },
    {
      "reference_id": "REF-1062",
      "author": [
        "Dan Ernst",
        "Nam Sung Kim",
        "Shidhartha Das",
        "Sanjay Pant",
        "Rajeev Rao",
        "Toan Pham",
        "Conrad Ziesler",
        "David Blaauw",
        "Todd Austin",
        "Krisztian Flautner",
        "Trevor Mudge"
      ],
      "title": "Razor: A Low-Power Pipeline Based on Circuit-Level Timing Speculation",
      "url": "https://web.eecs.umich.edu/~taustin/papers/MICRO36-Razor.pdf"
    },
    {
      "reference_id": "REF-1063",
      "author": [
        "James Tschanz",
        "Keith Bowman",
        "Steve Walstra",
        "Marty Agostinelli",
        "Tanay Karnik",
        "Vivek De"
      ],
      "title": "Tunable Replica Circuits and Adaptive Voltage-Frequency Techniques for Dynamic Voltage, Temperature, and Aging Variation Tolerance",
      "url": "https://ieeexplore.ieee.org/document/5205410"
    },
    {
      "reference_id": "REF-1064",
      "author": [
        "Bilgiday Yuce",
        "Nahid F. Ghalaty",
        "Chinmay Deshpande",
        "Conor Patrick",
        "Leyla Nazhandali",
        "Patrick Schaumont"
      ],
      "title": "FAME: Fault-attack Aware Microprocessor Extensions for Hardware Fault Detection and Software Fault Response",
      "url": "https://dl.acm.org/doi/10.1145/2948618.2948626",
      "url_date": "2023-04-07"
    },
    {
      "reference_id": "REF-1065",
      "author": [
        "Keith A. Bowman",
        "James W. Tschanz",
        "Shih-Lien L. Lu",
        "Paolo A. Aseron",
        "Muhammad M. Khellah",
        "Arijit Raychowdhury",
        "Bibiche M. Geuskens",
        "Carlos Tokunaga",
        "Chris B. Wilkerson",
        "Tanay Karnik",
        "Vivek De"
      ],
      "title": "A 45 nm Resilient Microprocessor Core for Dynamic Variation Tolerance",
      "url": "https://ieeexplore.ieee.org/document/5654663"
    },
    {
      "reference_id": "REF-1066",
      "author": [
        "Niek Timmers",
        "Albert Spruyt"
      ],
      "title": "Bypassing Secure Boot Using Fault Injection",
      "url": "https://www.blackhat.com/docs/eu-16/materials/eu-16-Timmers-Bypassing-Secure-Boot-Using-Fault-Injection.pdf"
    },
    {
      "section": "14.6.2 Security Evolution, page 291",
      "reference_id": "REF-1217",
      "author": [
        "Ross Anderson"
      ],
      "title": "Security Engineering",
      "url": "https://www.cl.cam.ac.uk/~rja14/musicfiles/manuscripts/SEv1.pdf",
      "publication_year": "2001"
    },
    {
      "section": "15.5.3 Glitching, page 317",
      "reference_id": "REF-1217",
      "author": [
        "Ross Anderson"
      ],
      "title": "Security Engineering",
      "url": "https://www.cl.cam.ac.uk/~rja14/musicfiles/manuscripts/SEv1.pdf",
      "publication_year": "2001"
    },
    {
      "reference_id": "REF-1081",
      "author": [
        "Kit Murdock",
        "David Oswald",
        "Flavio D Garcia",
        "Jo Van Bulck",
        "Frank Piessens",
        "Daniel Gruss"
      ],
      "title": "Plundervolt",
      "url": "https://plundervolt.com/"
    },
    {
      "reference_id": "REF-1082",
      "author": [
        "Adrian Tang",
        "Simha Sethumadhavan",
        "Salvatore Stolfo"
      ],
      "title": "CLKSCREW: Exposing the Perils of Security-Oblivious Energy Management",
      "url": "https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-tang.pdf"
    },
    {
      "reference_id": "REF-1285",
      "author": [
        "Texas Instruments"
      ],
      "title": "Physical Security Attacks Against Silicon Devices",
      "url": "https://www.ti.com/lit/an/swra739/swra739.pdf?ts=1644234570420",
      "publication_year": "2022",
      "publication_month": "--01",
      "publication_day": "---31"
    },
    {
      "section": "1.2 / 4",
      "reference_id": "REF-1286",
      "author": [
        "Lennert Wouters",
        "Benedikt Gierlichs",
        "Bart Preneel"
      ],
      "title": "On The Susceptibility of Texas Instruments SimpleLink Platform Microcontrollers to Non-Invasive Physical Attacks",
      "url": "https://eprint.iacr.org/2022/328.pdf",
      "publication_year": "2022",
      "publication_month": "--03",
      "publication_day": "---14"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi",
      "submission_organization": "Intel Corporation",
      "submission_date": "2020-02-12"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-08-20",
        "modification_comment": "updated Demonstrative_Examples, Description, Name, Observed_Examples, Potential_Mitigations, Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-12-10",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15",
        "modification_comment": "updated Functional_Areas"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28",
        "modification_comment": "updated Description, Detection_Factors, Name, References, Weakness_Ordinalities"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-04-28",
        "modification_comment": "updated Applicable_Platforms, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-06-28",
        "modification_comment": "updated Applicable_Platforms, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-10-13",
        "modification_comment": "updated Demonstrative_Examples, References"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-01-31",
        "modification_comment": "updated Applicable_Platforms, Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-10-26",
        "modification_comment": "updated Observed_Examples"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Missing Protection Against Voltage and Clock Glitches",
        "date": "2020-08-20"
      },
      {
        "text": "Missing or Improperly Implemented Protection Against Voltage and Clock Glitches",
        "date": "2021-10-28"
      }
    ],
    "contribution": [
      {
        "type": "Content",
        "contribution_name": "Parbati K. Manna",
        "contribution_organization": "Intel Corporation",
        "contribution_date": "2021-10-18",
        "contribution_comment": "provided detection methods"
      }
    ]
  },
  "weakness_ordinalities": [
    {
      "ordinality": "Primary"
    }
  ],
  "detection_methods": [
    {
      "method": "Manual Analysis",
      "description": "\n\t\t\t\n\t\t\t<xhtml:p>Put the processor in an infinite\n\t\t\tloop, which is then followed by instructions\n\t\t\tthat should not ever be executed, since the\n\t\t\tloop is not expected to exit.  After the loop,\n\t\t\ttoggle an I/O bit (for oscilloscope monitoring\n\t\t\tpurposes), print a console message, and\n\t\t\treenter the loop.  Note that to ensure that\n\t\t\tthe loop exit is actually captured, many NOP\n\t\t\tinstructions should be coded after the loop\n\t\t\tbranch instruction and before the I/O bit\n\t\t\ttoggle and the print statement.</xhtml:p>\n\n\t\t\t<xhtml:p>Margining the clock consists of varying the clock\n\t\t\tfrequency until an anomaly occurs. This could be a\n\t\t\tcontinuous frequency change or it could be a single\n\t\t\tcycle. The single cycle method is described here. For\n\t\t\tevery 1000th clock pulse, the clock cycle is shortened by\n\t\t\t10 percent. If no effect is observed, the width is\n\t\t\tshortened by 20%. This process is continued in 10%\n\t\t\tincrements up to and including 50%. Note that the cycle\n\t\t\ttime may be increased as well, down to seconds per\n\t\t\tcycle.</xhtml:p>\n\n\t\t\t<xhtml:p>Separately, the voltage is margined. Note that\n\t\t\tthe voltage could be increased or decreased. Increasing\n\t\t\tthe voltage has limits, as the circuitry may not be able\n\t\t\tto withstand a drastically increased voltage. This process\n\t\t\tstarts with a 5% reduction of the DC supply to the CPU\n\t\t\tchip for 5 millisecond repeated at 1KHz. If this has no\n\t\t\teffect, the process is repeated, but a 10% reduction is\n\t\t\tused. This process is repeated at 10% increments down to a\n\t\t\t50% reduction. If no effects are observed at 5\n\t\t\tmillisecond, the whole process is repeated using a 10\n\t\t\tmillisecond pulse. If no effects are observed, the process\n\t\t\tis repeated in 10 millisecond increments out to 100\n\t\t\tmillisecond pulses.</xhtml:p>\n\n\t\t\t<xhtml:p>While these are suggested starting points for\n\t\t\ttesting circuitry for weaknesses, the limits may need to\n\t\t\tbe pushed further at the risk of device damage. See\n\t\t\t[REF-1217] for descriptions of Smart Card attacks against\n\t\t\ta clock (section 14.6.2) and using a voltage glitch\n\t\t\t(section 15.5.3).</xhtml:p>\n\t\t  ",
      "effectiveness": "Moderate"
    },
    {
      "method": "Dynamic Analysis with Manual Results Interpretation",
      "description": "\n\t\t    During the implementation phase where actual hardware is available, specialized hardware tools and apparatus such as ChipWhisperer may be used to check if the platform is indeed susceptible to voltage and clock glitching attacks.\n\t\t  "
    },
    {
      "method": "Architecture or Design Review",
      "description": "\n\t\t    Review if the protections against glitching merely transfer the attack target. For example, suppose a critical authentication routine that an attacker would want to bypass is given the protection of modifying certain artifacts from within that specific routine (so that if the routine is bypassed, one can examine the artifacts and figure out that an attack must have happened). However, if the attacker has the ability to bypass the critical authentication routine, they might also have the ability to bypass the other protection routine that checks the artifacts. Basically, depending on these kind of protections is akin to resorting to \"Security by Obscurity\".\n\t\t  "
    },
    {
      "method": "Architecture or Design Review",
      "description": "\n\t\t    Many SoCs come equipped with a built-in Dynamic Voltage and Frequency Scaling (DVFS) that can control the voltage and clocks via software alone. However, there have been demonstrated attacks (like Plundervolt and CLKSCREW) that target this DVFS [REF-1081] [REF-1082]. During the design and implementation phases, one needs to check if the interface to this power management feature is available from unprivileged SW (CWE-1256), which would make the attack very easy.\n\t\t  "
    }
  ],
  "related_attack_patterns": [
    "624",
    "625"
  ],
  "functional_areas": [
    "Power",
    "Clock"
  ]
}
