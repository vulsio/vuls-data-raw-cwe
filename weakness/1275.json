{
	"id": "1275",
	"name": "Sensitive Cookie with Improper SameSite Attribute",
	"abstraction": "Variant",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The SameSite attribute for sensitive cookies is not set, or an insecure value is used.",
	"extended_description": "The SameSite attribute controls how cookies are sent for cross-domain requests. This attribute may have three values: 'Lax', 'Strict', or 'None'. If the 'None' value is used, a website may create a cross-domain POST HTTP request to another website, and the browser automatically adds cookies to this request. This may lead to Cross-Site-Request-Forgery (CSRF) attacks if there are no additional protections in place (such as Anti-CSRF tokens).",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "923",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "CanPrecede",
			"cweid": "352",
			"view_id": "1000"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"class": "Web Based",
				"prevalence": "Undetermined"
			}
		],
		"operating_system": [
			{
				"class": "Not OS-Specific",
				"prevalence": "Undetermined"
			}
		],
		"architecture": [
			{
				"class": "Not Architecture-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation",
			"note": [
				"This weakness occurs during implementation when the coder does not properly set the SameSite attribute."
			]
		}
	],
	"likelihood_of_exploit": "Medium",
	"common_consequences": [
		{
			"scope": [
				"Confidentiality",
				"Integrity",
				"Non-Repudiation",
				"Access Control"
			],
			"impact": [
				"Modify Application Data"
			],
			"note": "If the website does not impose additional defense against CSRF attacks, failing to use the 'Lax' or 'Strict' values could increase the risk of exposure to CSRF attacks. The likelihood of the integrity breach is Low because a successful attack does not only depend on an insecure SameSite attribute. In order to perform a CSRF attack there are many conditions that must be met, such as the lack of CSRF tokens, no confirmations for sensitive actions on the website, a \"simple\" \"Content-Type\" header in the HTTP request and many more.",
			"likelihood": "Low"
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Set the SameSite attribute of a sensitive cookie to 'Lax' or 'Strict'. This instructs the browser to apply this cookie only to same-domain requests, which provides a good Defense in Depth against CSRF attacks. When the 'Lax' value is in use, cookies are also sent for top-level cross-domain navigation via HTTP GET, HEAD, OPTIONS, and TRACE methods, but not for other HTTP methods that are more like to cause side-effects of state mutation."
			],
			"effectiveness": "High",
			"effectiveness_notes": "While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie."
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n               <Intro_Text>In this example, a cookie is used to store a session ID for a client's interaction with a website. The snippet of code below establishes a new cookie to hold the sessionID.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"JavaScript\">\n\t\t let sessionId = generateSessionId()<xhtml:br/>\n                 let cookieOptions = { domain: 'example.com' }<xhtml:br/>\n                 response.cookie('sessionid', sessionId, cookieOptions)<xhtml:br/>\n               </Example_Code>\n               <Body_Text>Since the sameSite attribute is not specified, the cookie will be sent to the website with each request made by the client. An attacker can potentially perform a CSRF attack by using the following malicious page:</Body_Text>\n               <Example_Code Nature=\"Attack\" Language=\"HTML\">\n                  &lt;html&gt;<xhtml:br/>\n\t\t  <xhtml:div style=\"margin-left:1em;\">\n                    &lt;form id=evil action=\"http://local:3002/setEmail\" method=\"POST\"&gt;<xhtml:br/>\n\t\t    <xhtml:div style=\"margin-left:1em;\">\n\t\t      &lt;input type=\"hidden\" name=\"newEmail\" value=\"abc@example.com\" /&gt;<xhtml:br/>\n\t\t    </xhtml:div>\n                    &lt;/form&gt;<xhtml:br/>\n\t\t  </xhtml:div>\n                  &lt;script&gt;evil.submit()&lt;/script&gt;<xhtml:br/>\n                  &lt;/html&gt;<xhtml:br/>\n               </Example_Code>\n               <Body_Text>When the client visits this malicious web page, it submits a '/setEmail' POST HTTP request to the vulnerable website. Since the browser automatically appends the 'sessionid' cookie to the request, the website automatically performs a 'setEmail' action on behalf of the client.</Body_Text>\n               <Body_Text>To mitigate the risk, use the sameSite attribute of the 'sessionid' cookie set to 'Strict'.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"JavaScript\">\n                 let sessionId = generateSessionId()<xhtml:br/>\n                 let cookieOptions = { domain: 'example.com', sameSite: 'Strict' }<xhtml:br/>\n                 response.cookie('sessionid', sessionId, cookieOptions)<xhtml:br/>\n               </Example_Code>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2022-24045",
			"description": "Web application for a room automation system has client-side JavaScript that sets a sensitive cookie without the SameSite security attribute, allowing the cookie to be sniffed",
			"link": "https://www.cve.org/CVERecord?id=CVE-2022-24045"
		}
	],
	"references": [
		{
			"reference_id": "REF-1104",
			"author": [
				"M. West",
				"M. Goodwin"
			],
			"title": "SameSite attribute specification draft",
			"url": "https://datatracker.ietf.org/doc/html/draft-west-first-party-cookies-07",
			"publication_year": "2016",
			"publication_month": "--04",
			"publication_day": "---06",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-1105",
			"author": [
				"Mozilla"
			],
			"title": "SameSite attribute description on MDN Web Docs",
			"url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
			"publication_year": "2020",
			"publication_month": "--06",
			"publication_day": "---20"
		},
		{
			"reference_id": "REF-1106",
			"author": [
				"The Chromium Projects"
			],
			"title": "Chromium support for SameSite attribute",
			"url": "https://www.chromium.org/updates/same-site/",
			"publication_year": "2019",
			"publication_month": "--09",
			"publication_day": "---26",
			"url_date": "2023-04-07"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "Michael Stepankin",
			"submission_organization": "Veracode",
			"submission_date": "2020-06-19"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Demonstrative_Examples, Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-10-13",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-10-26",
				"modification_comment": "updated Demonstrative_Examples, Observed_Examples"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"related_attack_patterns": [
		"62"
	]
}
