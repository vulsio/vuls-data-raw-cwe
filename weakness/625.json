{
	"id": "625",
	"name": "Permissive Regular Expression",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Draft",
	"description": "The product uses a regular expression that does not sufficiently restrict the set of allowed values.",
	"extended_description": "\n            <xhtml:p>This effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include:</xhtml:p>\n               <xhtml:ul>\n                  <xhtml:li>not identifying the beginning and end of the target string</xhtml:li>\n                  <xhtml:li>using wildcards instead of acceptable character ranges</xhtml:li>\n                  <xhtml:li>others</xhtml:li>\n               </xhtml:ul>\n         ",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "185",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "PeerOf",
			"cweid": "187",
			"view_id": "1000"
		},
		{
			"nature": "PeerOf",
			"cweid": "184",
			"view_id": "1000"
		},
		{
			"nature": "PeerOf",
			"cweid": "183",
			"view_id": "1000"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"prevalence": "Undetermined",
				"name": "Perl"
			},
			{
				"prevalence": "Undetermined",
				"name": "PHP"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation",
			"note": [
				"This problem is frequently found when the regular expression is used in input validation or security features such as authentication."
			]
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Access Control"
			],
			"impact": [
				"Bypass Protection Mechanism"
			]
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"When applicable, ensure that the regular expression marks beginning and ending string patterns, such as \"/^string$/\" for Perl."
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-37",
			"text": "\n               <Intro_Text>The following code takes phone numbers as input, and uses a regular expression to reject invalid phone numbers.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Perl\">\n                  <xhtml:div>$phone = GetPhoneNumber();<xhtml:br/>if ($phone =~ /\\d+-\\d+/) {<xhtml:div style=\"margin-left:1em;\">\n                           <xhtml:i># looks like it only has hyphens and digits</xhtml:i>\n                           <xhtml:br/>system(\"lookup-phone $phone\");</xhtml:div>}\n                     <xhtml:br/>else {<xhtml:div style=\"margin-left:1em;\">error(\"malformed number!\");</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>An attacker could provide an argument such as: \"; ls -l ; echo 123-456\" This would pass the check, since \"123-456\" is sufficient to match the \"\\d+-\\d+\" portion of the regular expression.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-154",
			"text": "\n\t      <Intro_Text>This code uses a regular expression to validate an IP string prior to using it in a call to the \"ping\" command.</Intro_Text>\n\t      <Example_Code Nature=\"Bad\" Language=\"Python\">\n\t\t<xhtml:div>\n\t\t  import subprocess<xhtml:br/>\n\t\t  import re<xhtml:br/>\n\t\t  <xhtml:br/>\n\t\t  def validate_ip_regex(ip: str):<xhtml:br/>\n\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t    ip_validator = re.compile(r\"((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}\")<xhtml:br/>\n\t\t    if ip_validator.match(ip):<xhtml:br/>\n\t\t    <xhtml:div style=\"margin-left:1em;\">\n\t\t      return ip<xhtml:br/>\n\t\t    </xhtml:div>\n\t\t    else:<xhtml:br/>\n\t\t    <xhtml:div style=\"margin-left:1em;\">\n\t\t      raise ValueError(\"IP address does not match valid pattern.\")<xhtml:br/>\n\t\t    </xhtml:div>\n\t\t  </xhtml:div>\n\t\t  <xhtml:br/>\n\t\t  def run_ping_regex(ip: str):<xhtml:br/>\n\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t    validated = validate_ip_regex(ip)<xhtml:br/>\n\t\t    <xhtml:i># The ping command treats zero-prepended IP addresses as octal</xhtml:i><xhtml:br/>\n\t\t    result = subprocess.call([\"ping\", validated])<xhtml:br/>\n\t\t    print(result)<xhtml:br/>\n\t\t  </xhtml:div>\n\t\t</xhtml:div>\n\t      </Example_Code>\n\t      <Body_Text>Since the regular expression does not have anchors (CWE-777), i.e. is unbounded without ^ or $ characters, then prepending a 0 or 0x to the beginning of the IP address will still result in a matched regex pattern. Since the ping command supports octal and hex prepended IP addresses, it will use the unexpectedly valid IP address (CWE-1389). For example, \"0x63.63.63.63\" would be considered equivalent to \"99.63.63.63\". As a result, the attacker could potentially ping systems that the attacker cannot reach directly.</Body_Text>\n\t    "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2021-22204",
			"description": "Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2021-22204"
		},
		{
			"reference": "CVE-2006-1895",
			"description": "\".*\" regexp leads to static code injection",
			"link": "https://www.cve.org/CVERecord?id=CVE-2006-1895"
		},
		{
			"reference": "CVE-2002-2175",
			"description": "insertion of username into regexp results in partial comparison, causing wrong database entry to be updated when one username is a substring of another.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2002-2175"
		},
		{
			"reference": "CVE-2006-4527",
			"description": "regexp intended to verify that all characters are legal, only checks that at least one is legal, enabling file inclusion.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2006-4527"
		},
		{
			"reference": "CVE-2005-1949",
			"description": "Regexp for IP address isn't anchored at the end, allowing appending of shell metacharacters.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2005-1949"
		},
		{
			"reference": "CVE-2002-2109",
			"description": "Regexp isn't \"anchored\" to the beginning or end, which allows spoofed values that have trusted values as substrings.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2002-2109"
		},
		{
			"reference": "CVE-2006-6511",
			"description": "regexp in .htaccess file allows access of files whose names contain certain substrings",
			"link": "https://www.cve.org/CVERecord?id=CVE-2006-6511"
		},
		{
			"reference": "CVE-2006-6629",
			"description": "allow load of macro files whose names contain certain substrings.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2006-6629"
		}
	],
	"references": [
		{
			"section": "Chapter 8, \"Character Stripping Vulnerabilities\", Page 437",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2007-05-07"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Applicable_Platforms, Description, Relationships, Observed_Example, Other_Notes, Weakness_Ordinalities"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-03-10",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-05-27",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-07-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-06-23",
				"modification_comment": "updated Modes_of_Introduction, Other_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Demonstrative_Examples, Observed_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-03-15",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-06-28",
				"modification_comment": "updated Observed_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-10-13",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		]
	},
	"weakness_ordinalities": [
		{
			"ordinality": "Primary"
		}
	],
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
			"entry_name": "Sanitize untrusted data passed to a regex",
			"entry_id": "IDS08-J"
		}
	]
}
