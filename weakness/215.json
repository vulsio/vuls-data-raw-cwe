{
  "id": "215",
  "name": "Insertion of Sensitive Information Into Debugging Code",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "The product inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production.",
  "extended_description": "When debugging, it may be necessary to report detailed information to the programmer.  However, if the debugging code is not disabled when the product is operating in a production environment, then this sensitive information may be exposed to attackers.\n\t ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "200",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Not Language-Specific",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Confidentiality"
      ],
      "impact": [
        "Read Application Data"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software."
      ]
    },
    {
      "mitigation_id": "MIT-46",
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "\n                  <xhtml:p>Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>\n                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.</xhtml:p>\n               "
      ],
      "strategy": "Separation of Privilege"
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-131",
      "text": "\n               <Intro_Text>The following program changes its behavior based on a debug flag.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"JSP\">\n                  <xhtml:div>&lt;% if (Boolean.getBoolean(\"debugEnabled\")) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>%&gt;<xhtml:br/>User account number: &lt;%= acctNo %&gt;<xhtml:br/>&lt;%<xhtml:br/>} %&gt;<xhtml:br/>\n                        </xhtml:div>\n                     </xhtml:div>\n                  </xhtml:div>\n               </Example_Code>\n               <Body_Text>The code writes sensitive debug information to the client browser if the \"debugEnabled\" flag is set to true .</Body_Text>\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2004-2268",
      "description": "Password exposed in debug information.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2004-2268"
    },
    {
      "reference": "CVE-2002-0918",
      "description": "CGI script includes sensitive information in debug messages when an error is triggered.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2002-0918"
    },
    {
      "reference": "CVE-2003-1078",
      "description": "FTP client with debug option enabled shows password to the screen.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2003-1078"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "PLOVER",
      "submission_date": "2006-07-19"
    },
    "modification": [
      {
        "modification_name": "Sean Eidemiller",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01",
        "modification_comment": "added/updated demonstrative examples"
      },
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01",
        "modification_comment": "updated Time_of_Introduction"
      },
      {
        "modification_organization": "Veracode",
        "modification_date": "2008-08-15",
        "modification_comment": "Suggested OWASP Top Ten 2004 mapping"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08",
        "modification_comment": "updated Relationships, Relationship_Notes, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-05-27",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-09-27",
        "modification_comment": "updated Description, Name, Observed_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01",
        "modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-10-30",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-06-23",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30",
        "modification_comment": "updated Demonstrative_Examples, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08",
        "modification_comment": "updated Applicable_Platforms"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24",
        "modification_comment": "updated Demonstrative_Examples, Description, Name, Potential_Mitigations, Relationships, Time_of_Introduction, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-12-10",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-01-31",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Detection_Factors, Relationships, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Information Leak Through Debug Information",
        "date": "2010-09-27"
      },
      {
        "text": "Information Exposure Through Debug Information",
        "date": "2020-02-24"
      }
    ]
  },
  "detection_methods": [
    {
      "detection_method_id": "DM-14",
      "method": "Automated Static Analysis",
      "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "effectiveness": "High"
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "PLOVER",
      "entry_name": "Infoleak Using Debug Information"
    },
    {
      "taxonomy_name": "OWASP Top Ten 2007",
      "entry_name": "Information Leakage and Improper Error Handling",
      "entry_id": "A6",
      "mapping_fit": "CWE More Specific"
    },
    {
      "taxonomy_name": "OWASP Top Ten 2004",
      "entry_name": "Insecure Configuration Management",
      "entry_id": "A10",
      "mapping_fit": "CWE More Specific"
    },
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Exposed Data",
      "entry_id": "SFP23"
    }
  ],
  "notes": [
    {
      "type": "Relationship",
      "text": "This overlaps other categories."
    }
  ]
}
