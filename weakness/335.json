{
  "id": "335",
  "name": "Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "The product uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds.",
  "extended_description": "\n\t\t   <xhtml:p>\n\t\t   PRNGs are deterministic and, while their output appears\n\t\t   random, they cannot actually create entropy. They rely on\n\t\t   cryptographically secure and unique seeds for entropy so\n\t\t   proper seeding is critical to the secure operation of the\n\t\t   PRNG.</xhtml:p>\n\t\t   <xhtml:p>\n\t\t   Management of seeds could be broken down into two main areas:\n\t\t   </xhtml:p>\n\t\t   <xhtml:ul>\n\t\t\t <xhtml:li>\n\t\t   (1) protecting seeds as cryptographic material (such as a cryptographic key);\n\t\t\t </xhtml:li>\n\t\t\t <xhtml:li>\n\t\t   (2) whenever possible, using a uniquely generated seed from\n\t\t   a cryptographically secure source\n\t\t\t </xhtml:li>\n\t\t   </xhtml:ul>\n\t\t\t <xhtml:p>\n\t\t\t   PRNGs require a seed as input to generate a stream of\n\t\t\t   numbers that are functionally indistinguishable from\n\t\t\t   random numbers.  While the output is, in many cases,\n\t\t\t   sufficient for cryptographic uses, the output of any\n\t\t\t   PRNG is directly determined by the seed provided as\n\t\t\t   input. If the seed can be ascertained by a third party,\n\t\t\t   the entire output of the PRNG can be made known to\n\t\t\t   them. As such, the seed should be kept secret and\n\t\t\t   should ideally not be able to be guessed. For example,\n\t\t\t   the current time may be a poor seed. Knowing the\n\t\t\t   approximate time the PRNG was seeded greatly reduces\n\t\t\t   the possible key space.\n\t\t\t </xhtml:p>\n\t\t\t <xhtml:p>\n\t\t\t   Seeds do not necessarily need to be unique, but reusing seeds may open up attacks if the seed is discovered.\n\t\t\t </xhtml:p>\n\t\t ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "330",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "330",
      "view_id": "1003",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Not Language-Specific",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation",
      "note": [
        "REALIZATION: This weakness is caused during implementation of an architectural security tactic."
      ]
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Access Control",
        "Other"
      ],
      "impact": [
        "Bypass Protection Mechanism",
        "Other"
      ],
      "note": "If a PRNG is used incorrectly, such as using the same seed for each initialization or using a predictable seed, then an attacker may be able to easily guess the seed and thus the random numbers. This could lead to unauthorized access to a system if the seed is used for authentication and authorization."
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-177",
      "text": "\n               <Intro_Text>The following code uses a statistical PRNG to generate account IDs.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>private static final long SEED = 1234567890;<xhtml:br/>public int generateAccountID() {<xhtml:div style=\"margin-left:1em;\">Random random = new Random(SEED);<xhtml:br/>return random.nextInt();</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>Because the program uses the same seed value for every invocation of the PRNG, its values are predictable, making the system vulnerable to attack.</Body_Text>\n            "
    },
    {
      "demonstrative_example_id": "DX-102",
      "text": "\n               <Intro_Text>Both of these examples use a statistical PRNG seeded with the current value of the system clock to generate a random number:</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>Random random = new Random(System.currentTimeMillis());<xhtml:br/>int accountID = random.nextInt();</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>srand(time());<xhtml:br/>int randNum = rand();</xhtml:div>\n               </Example_Code>\n               <Body_Text>An attacker can easily predict the seed used by these PRNGs, and so also predict the stream of random numbers generated. Note these examples also exhibit CWE-338 (Use of Cryptographically Weak PRNG).</Body_Text>\n            "
    },
    {
      "demonstrative_example_id": "DX-178",
      "text": "\n\t\t\t  <Intro_Text>This code grabs some random bytes and uses them for a seed in a PRNG, in order to generate a new cryptographic key.</Intro_Text>\n\t\t\t  <Example_Code Nature=\"Bad\" Language=\"Python\">\n\t\t\t\t<xhtml:div>\n\t\t\t\t  <xhtml:i># getting 2 bytes of randomness for the seeding the PRNG </xhtml:i><xhtml:br/>\n\t\t\t\t  seed = os.urandom(2)<xhtml:br/>\n\t\t\t\t  random.seed(a=seed)<xhtml:br/>\n\t\t\t\t  key = random.getrandbits(128)<xhtml:br/>\n\t\t\t\t</xhtml:div>\n\t\t\t  </Example_Code>\n\t\t\t  <Body_Text>Since only 2 bytes are used as a seed, an attacker will only need to guess 2^16 (65,536) values before being able to replicate the state of the PRNG.</Body_Text>\n\t\t\t"
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2020-7010",
      "description": "Cloud application on Kubernetes generates passwords using a weak random number generator based on deployment time.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2020-7010"
    },
    {
      "reference": "CVE-2019-11495",
      "description": "server uses erlang:now() to seed the PRNG, which\n\t\t\t results in a small search space for potential random\n\t\t\t seeds",
      "link": "https://www.cve.org/CVERecord?id=CVE-2019-11495"
    },
    {
      "reference": "CVE-2018-12520",
      "description": "Product's PRNG is not seeded for the generation of session IDs",
      "link": "https://www.cve.org/CVERecord?id=CVE-2018-12520"
    },
    {
      "reference": "CVE-2016-10180",
      "description": "Router's PIN generation is based on rand(time(0)) seeding.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2016-10180"
    }
  ],
  "references": [
    {
      "section": "\"Sin 20: Weak Random Numbers.\" Page 299",
      "reference_id": "REF-44",
      "author": [
        "Michael Howard",
        "David LeBlanc",
        "John Viega"
      ],
      "title": "24 Deadly Sins of Software Security",
      "publication_year": "2010",
      "publication": "McGraw-Hill"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "PLOVER",
      "submission_date": "2006-07-19"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01",
        "modification_comment": "updated Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11",
        "modification_comment": "updated Common_Consequences, References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08",
        "modification_comment": "updated Applicable_Platforms, Description, Modes_of_Introduction, Name, Relationships, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-06-20",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-07-20",
        "modification_comment": "updated Description, Maintenance_Notes, Observed_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-10-13",
        "modification_comment": "updated Observed_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-01-31",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Relationships, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-10-26",
        "modification_comment": "updated Demonstrative_Examples"
      }
    ],
    "previous_entry_name": [
      {
        "text": "PRNG Seed Error",
        "date": "2017-11-08"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "PLOVER",
      "entry_name": "PRNG Seed Error"
    }
  ],
  "notes": [
    {
      "type": "Maintenance",
      "text": "As of CWE 4.5, terminology related to randomness, entropy, and\n\t   predictability can vary widely. Within the developer and other\n\t   communities, \"randomness\" is used heavily. However, within\n\t   cryptography, \"entropy\" is distinct, typically implied as a\n\t   measurement. There are no commonly-used definitions, even within\n\t   standards documents and cryptography papers. Future versions of\n\t   CWE will attempt to define these terms and, if necessary,\n\t   distinguish between them in ways that are appropriate for\n\t   different communities but do not reduce the usability of CWE for\n\t   mapping, understanding, or other scenarios."
    }
  ]
}
