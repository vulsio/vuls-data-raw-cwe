{
	"id": "1223",
	"name": "Race Condition for Write-Once Attributes",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.",
	"extended_description": "\n                <xhtml:p>Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make them write-once. This means the hardware implementation only allows writing to such registers once, and they become read-only after having been written once by software. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings.</xhtml:p>\n                <xhtml:p>Implementation issues in hardware design of such controls can expose such registers to a race condition security flaw. For example, consider a hardware design that has two different software/firmware modules executing in parallel. One module is trusted (module A) and another is untrusted (module B). In this design it could be possible for Module B to send write cycles to the write-once register before Module A. Since the field is write-once the programmed value from Module A will be ignored and the pre-empted value programmed by Module B will be used by hardware.</xhtml:p>\n            ",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "362",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"prevalence": "Undetermined",
				"name": "Verilog"
			},
			{
				"prevalence": "Undetermined",
				"name": "VHDL"
			}
		],
		"technology": [
			{
				"class": "System on Chip",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Architecture and Design",
			"note": [
				"This weakness can appear in designs that use register write-once attributes with two or more software/firmware modules with varying levels of trust executing in parallel."
			]
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Access Control"
			],
			"impact": [
				"Bypass Protection Mechanism"
			],
			"note": "System configuration cannot be programmed in a secure way."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"During hardware design all register write-once or sticky fields must be evaluated for proper configuration."
			]
		},
		{
			"phase": [
				"Testing"
			],
			"description": [
				"The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros."
			]
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n                    <Intro_Text>consider the example design module system verilog code shown below. register_write_once_example module is an example of register that has a write-once field defined. Bit 0 field captures the write_once_status value.</Intro_Text>\n                    <Example_Code Nature=\"Bad\" Language=\"Verilog\">\n                        module register_write_once_example<xhtml:br/>\n                        (<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n                          input [15:0] Data_in,<xhtml:br/>\n                          input Clk,<xhtml:br/>\n                          input ip_resetn,<xhtml:br/>\n                          input global_resetn,<xhtml:br/>\n                          input write,<xhtml:br/>\n                          output reg [15:0] Data_out<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n                        );<xhtml:br/>\n                        <xhtml:br/>\n                        reg Write_once_status;<xhtml:br/>\n                        <xhtml:br/>\n                        always @(posedge Clk or negedge ip_resetn)<xhtml:br/>\n                        if (~ip_resetn)<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n                          begin<xhtml:br/>\n\t\t\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\tData_out &lt;= 16'h0000; <xhtml:br/>\n\t\t\t\t\t\t\tWrite_once_status &lt;= 1'b0;<xhtml:br/>\n\t\t\t\t\t\t  </xhtml:div>\n\t\t\t\t\t\t  end<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n                        else if (write &amp; ~Write_once_status) <xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n                          begin<xhtml:br/>\n\t\t\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\tData_out &lt;= Data_in &amp; 16'hFFFE; // Input data written to register after masking bit 0<xhtml:br/>\n\t\t\t\t\t\t\tWrite_once_status &lt;= 1'b1; // Write once status set after first write.<xhtml:br/>\n\t\t\t\t\t\t  </xhtml:div>\n\t\t\t\t\t\t  end<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\telse if (~write)<xhtml:br/>\n\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">\n                          begin<xhtml:br/>\n\t\t\t\t\t\t  <xhtml:div style=\"margin-left:1em;\">\n\t\t\t\t\t\t\tData_out[15:1] &lt;= Data_out[15:1];<xhtml:br/>\n\t\t\t\t\t\t\tData_out[0] &lt;= Write_once_status;<xhtml:br/>\n\t\t\t\t\t\t  </xhtml:div>\n                          end<xhtml:br/>\n\t\t\t\t\t\t</xhtml:div>\n\t\t\t\t\t\tendmodule<xhtml:br/>\n                    </Example_Code>\n                    <Body_Text>The first system component that sends a write cycle to this register can program the value. This could result in a race condition security issue in the SoC design, if an untrusted agent is running in the system in parallel with the trusted component that is expected to program the register.</Body_Text>\n                    <Example_Code Nature=\"Good\">\n                        Trusted firmware or software trying to set the write-once field:\n\t\t\t\t\t\t<xhtml:ul>\n\t\t\t\t\t\t  <xhtml:li>Must confirm the Write_once_status (bit 0) value is zero, before programming register. If another agent has programmed the register before, then Write_once_status value will be one.</xhtml:li>\n\t\t\t\t\t\t  <xhtml:li>After writing to the register, the trusted software can issue a read to confirm that the valid setting has been programmed.</xhtml:li>\n\t\t\t\t\t\t</xhtml:ul>\n                    </Example_Code>\n                "
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi",
			"submission_organization": "Intel Corporation",
			"submission_date": "2019-12-12"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-10-13",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		]
	},
	"related_attack_patterns": [
		"26"
	]
}
