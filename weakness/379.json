{
	"id": "379",
	"name": "Creation of Temporary File in Directory with Insecure Permissions",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The product creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.",
	"extended_description": "On some operating systems, the fact that the temporary file exists may be apparent to any user with sufficient privileges to access that directory. Since the file is visible, the application that is using the temporary file could be known. If one has access to list the processes on the system, the attacker has gained information about what the user is doing at that time. By correlating this with the applications the user is running, an attacker could potentially discover what a user's actions are. From this, higher levels of security could be breached.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "377",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"likelihood_of_exploit": "Low",
	"common_consequences": [
		{
			"scope": [
				"Confidentiality"
			],
			"impact": [
				"Read Application Data"
			],
			"note": "Since the file is visible and the application which is using the temp file could be known, the attacker has gained information about what the user is doing at that time."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Requirements"
			],
			"description": [
				"Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Avoid using vulnerable temp file functions."
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-139",
			"text": "\n               <Intro_Text>In the following code examples a temporary file is created and written to.  After using the temporary file, the file is closed and deleted from the file system.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>FILE *stream;<xhtml:br/>if( (stream = tmpfile()) == NULL ) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>perror(\"Could not open new temporary file\\n\");<xhtml:br/>return (-1);</xhtml:div>\n                     </xhtml:div>}<xhtml:br/>\n                     <xhtml:i>// write data to tmp file</xhtml:i>\n                     <xhtml:br/>...<xhtml:br/>// remove tmp file<xhtml:br/>rmtmp();</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, within this C/C++ code the method tmpfile() is used to create and open the temp file. The tmpfile() method works the same way as the fopen() method would with read/write permission, allowing attackers to read potentially sensitive information contained in the temp file or modify the contents of the file.</Body_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>try {<xhtml:div style=\"margin-left:1em;\">File temp = File.createTempFile(\"pattern\", \".suffix\");<xhtml:br/>temp.deleteOnExit();<xhtml:br/>BufferedWriter out = new BufferedWriter(new FileWriter(temp));<xhtml:br/>out.write(\"aString\");<xhtml:br/>out.close();</xhtml:div>}<xhtml:br/>catch (IOException e) {<xhtml:br/>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>Similarly, the createTempFile() method used in the Java code creates a temp file that may be readable and writable to all users.</Body_Text>\n               <Body_Text>Additionally both methods used above place the file into a default directory. On UNIX systems the default directory is usually \"/tmp\" or \"/var/tmp\" and on Windows systems the default directory is usually \"C:\\\\Windows\\\\Temp\", which may be easily accessible to attackers, possibly enabling them to read and modify the contents of the temp file.</Body_Text>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2022-27818",
			"description": "A hotkey daemon written in Rust creates a domain socket file underneath /tmp, which is accessible by any user.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2022-27818"
		},
		{
			"reference": "CVE-2021-21290",
			"description": "A Java-based application for a rapid-development framework uses File.createTempFile() to create a random temporary file with insecure default permissions.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2021-21290"
		}
	],
	"references": [
		{
			"reference_id": "REF-18",
			"author": [
				"Secure Software, Inc."
			],
			"title": "The CLASP Application Security Process",
			"url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
			"publication_year": "2005",
			"url_date": "2024-11-17"
		},
		{
			"section": "Chapter 9, \"Temporary Files\", Page 538",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CLASP",
			"submission_date": "2006-07-19"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-11-24",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-05-27",
				"modification_comment": "updated Description, Name"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-07-27",
				"modification_comment": "updated Description, Other_Notes, Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-09-13",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Applicable_Platforms, Demonstrative_Examples, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-06-20",
				"modification_comment": "updated Type"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Name, References, Relationships, Type"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-03-15",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-10-26",
				"modification_comment": "updated Observed_Examples"
			}
		],
		"previous_entry_name": [
			{
				"text": "Guessed or Visible Temporary File",
				"date": "2008-04-11"
			},
			{
				"text": "Creation of Temporary File in Directory with Insecure Permissions",
				"date": "2009-05-27"
			},
			{
				"text": "Creation of Temporary File in Directory with Incorrect Permissions",
				"date": "2020-02-24"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "CLASP",
			"entry_name": "Guessed or visible temporary file"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Ensure that file operations are performed in a secure directory",
			"entry_id": "FIO15-C"
		}
	]
}
