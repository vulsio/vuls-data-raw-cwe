{
  "id": "378",
  "name": "Creation of Temporary File With Insecure Permissions",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "377",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Not Language-Specific",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "likelihood_of_exploit": "High",
  "common_consequences": [
    {
      "scope": [
        "Confidentiality"
      ],
      "impact": [
        "Read Application Data"
      ],
      "note": "If the temporary file can be read by the attacker, sensitive information may be in that file which could be revealed."
    },
    {
      "scope": [
        "Authorization",
        "Other"
      ],
      "impact": [
        "Other"
      ],
      "note": "If that file can be written to by the attacker, the file might be moved into a place to which the attacker does not have access. This will allow the attacker to gain selective resource access-control privileges."
    },
    {
      "scope": [
        "Integrity",
        "Other"
      ],
      "impact": [
        "Other"
      ],
      "note": "Depending on the data stored in the temporary file, there is the potential for an attacker to gain an additional input vector which is trusted as non-malicious. It may be possible to make arbitrary changes to data structures, user information, or even process ownership."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Requirements"
      ],
      "description": [
        "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Randomize temporary file names. This can also be achieved by using a safe temp-file function. This will ensure that temporary files will not be created in predictable places."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-139",
      "text": "\n               <Intro_Text>In the following code examples a temporary file is created and written to.  After using the temporary file, the file is closed and deleted from the file system.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>FILE *stream;<xhtml:br/>if( (stream = tmpfile()) == NULL ) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>perror(\"Could not open new temporary file\\n\");<xhtml:br/>return (-1);</xhtml:div>\n                     </xhtml:div>}<xhtml:br/>\n                     <xhtml:i>// write data to tmp file</xhtml:i>\n                     <xhtml:br/>...<xhtml:br/>// remove tmp file<xhtml:br/>rmtmp();</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, within this C/C++ code the method tmpfile() is used to create and open the temp file. The tmpfile() method works the same way as the fopen() method would with read/write permission, allowing attackers to read potentially sensitive information contained in the temp file or modify the contents of the file.</Body_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>try {<xhtml:div style=\"margin-left:1em;\">File temp = File.createTempFile(\"pattern\", \".suffix\");<xhtml:br/>temp.deleteOnExit();<xhtml:br/>BufferedWriter out = new BufferedWriter(new FileWriter(temp));<xhtml:br/>out.write(\"aString\");<xhtml:br/>out.close();</xhtml:div>}<xhtml:br/>catch (IOException e) {<xhtml:br/>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>Similarly, the createTempFile() method used in the Java code creates a temp file that may be readable and writable to all users.</Body_Text>\n               <Body_Text>Additionally both methods used above place the file into a default directory. On UNIX systems the default directory is usually \"/tmp\" or \"/var/tmp\" and on Windows systems the default directory is usually \"C:\\\\Windows\\\\Temp\", which may be easily accessible to attackers, possibly enabling them to read and modify the contents of the temp file.</Body_Text>\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2022-24823",
      "description": "A network application framework uses the Java function createTempFile(), which will create a file that is readable by other local users of the system",
      "link": "https://www.cve.org/CVERecord?id=CVE-2022-24823"
    }
  ],
  "references": [
    {
      "reference_id": "REF-18",
      "author": [
        "Secure Software, Inc."
      ],
      "title": "The CLASP Application Security Process",
      "url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
      "publication_year": "2005"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CLASP",
      "submission_date": "2006-07-19"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01",
        "modification_comment": "updated Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08",
        "modification_comment": "updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-10-29",
        "modification_comment": "updated Common_Consequences, Other_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-10-30",
        "modification_comment": "updated Demonstrative_Examples, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-06-23",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08",
        "modification_comment": "updated Applicable_Platforms, Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24",
        "modification_comment": "updated References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Relationships, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-10-26",
        "modification_comment": "updated Observed_Examples"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Improper Temporary File Opening",
        "date": "2008-04-11"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "CLASP",
      "entry_name": "Improper temp file opening"
    }
  ]
}
