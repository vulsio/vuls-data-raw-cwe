{
	"id": "672",
	"name": "Operation on a Resource after Expiration or Release",
	"abstraction": "Class",
	"structure": "Simple",
	"status": "Draft",
	"description": "The product uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "666",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"class": "Mobile",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		},
		{
			"phase": "Operation"
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Integrity",
				"Confidentiality"
			],
			"impact": [
				"Modify Application Data",
				"Read Application Data"
			],
			"note": "If a released resource is subsequently reused or reallocated, then an attempt to use the original resource might allow access to sensitive data that is associated with a different user or entity."
		},
		{
			"scope": [
				"Other",
				"Availability"
			],
			"impact": [
				"Other",
				"DoS: Crash, Exit, or Restart"
			],
			"note": "When a resource is released it might not be in an expected state, later attempts to access the resource may lead to resultant errors that may lead to a crash."
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-71",
			"text": "\n               <Intro_Text>The following code shows a simple example of a use after free error:</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>char* ptr = (char*)malloc (SIZE);<xhtml:br/>if (err) {<xhtml:div style=\"margin-left:1em;\">abrt = 1;<xhtml:br/>free(ptr);</xhtml:div>}<xhtml:br/>...<xhtml:br/>if (abrt) {<xhtml:div style=\"margin-left:1em;\">logError(\"operation aborted before commit\", ptr);</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>When an error occurs, the pointer is immediately freed. However, this pointer is later incorrectly used in the logError function.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-72",
			"text": "\n               <Intro_Text>The following code shows a simple example of a double free error:</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>char* ptr = (char*)malloc (SIZE);<xhtml:br/>...<xhtml:br/>if (abrt) {<xhtml:div style=\"margin-left:1em;\">free(ptr);</xhtml:div>}<xhtml:br/>...<xhtml:br/>free(ptr);</xhtml:div>\n               </Example_Code>\n               <Body_Text>Double free vulnerabilities have two common (and sometimes overlapping) causes:</Body_Text>\n               <Body_Text>\n                  <xhtml:ul>\n                     <xhtml:li>\n                        <xhtml:div>Error conditions and other exceptional circumstances</xhtml:div>\n                     </xhtml:li>\n                     <xhtml:li>\n                        <xhtml:div>Confusion over which part of the program is responsible for freeing the memory</xhtml:div>\n                     </xhtml:li>\n                  </xhtml:ul>\n               </Body_Text>\n               <Body_Text>Although some double free vulnerabilities are not much more complicated than the previous example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once.</Body_Text>\n            "
		},
		{
			"text": "\n               <Intro_Text>In the following C/C++ example the method processMessage is used to process a message received in the input array of char arrays. The input message array contains two char arrays: the first is the length of the message and the second is the body of the message. The length of the message is retrieved and used to allocate enough memory for a local char array, messageBody, to be created for the message body. The messageBody is processed in the method processMessageBody that will return an error if an error occurs while processing. If an error occurs then the return result variable is set to indicate an error and the messageBody char array memory is released using the method free and an error message is sent to the logError method.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>#define FAIL 0<xhtml:br/>#define SUCCESS 1<xhtml:br/>#define ERROR -1<xhtml:br/>#define MAX_MESSAGE_SIZE 32<xhtml:br/>\n                     <xhtml:br/>int processMessage(char **message)<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>int result = SUCCESS;<xhtml:br/>\n                           <xhtml:br/>int length = getMessageLength(message[0]);<xhtml:br/>char *messageBody;<xhtml:br/>\n                           <xhtml:br/>if ((length &gt; 0) &amp;&amp; (length &lt; MAX_MESSAGE_SIZE)) {<xhtml:br/>\n                           <xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>messageBody = (char*)malloc(length*sizeof(char));<xhtml:br/>messageBody = &amp;message[1][0];<xhtml:br/>\n                                 <xhtml:br/>int success = processMessageBody(messageBody);<xhtml:br/>\n                                 <xhtml:br/>if (success == ERROR) {<xhtml:div style=\"margin-left:1em;\">result = ERROR;<xhtml:br/>free(messageBody);</xhtml:div>}</xhtml:div>\n                           </xhtml:div>}<xhtml:br/>else {<xhtml:div style=\"margin-left:1em;\">printf(\"Unable to process message; invalid message length\");<xhtml:br/>result = FAIL;</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>if (result == ERROR) {<xhtml:div style=\"margin-left:1em;\">logError(\"Error processing message\", messageBody);</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>return result;</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, the call to the method logError includes the messageBody after the memory for messageBody has been released using the free method. This can cause unexpected results and may lead to system crashes. A variable should never be used after its memory resources have been released.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"C\">\n                  <xhtml:div>...<xhtml:br/>messageBody = (char*)malloc(length*sizeof(char));<xhtml:br/>messageBody = &amp;message[1][0];<xhtml:br/>\n                     <xhtml:br/>int success = processMessageBody(messageBody);<xhtml:br/>\n                     <xhtml:br/>if (success == ERROR) {<xhtml:div style=\"margin-left:1em;\">result = ERROR;<xhtml:br/>logError(\"Error processing message\", messageBody);<xhtml:br/>free(messageBody);</xhtml:div>}<xhtml:br/>...</xhtml:div>\n               </Example_Code>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2009-3547",
			"description": "Chain: race condition (CWE-362) might allow resource to be released before operating on it, leading to NULL dereference (CWE-476)",
			"link": "https://www.cve.org/CVERecord?id=CVE-2009-3547"
		}
	],
	"references": [
		{
			"section": "ASCSM-CWE-672",
			"reference_id": "REF-962",
			"author": [
				"Object Management Group (OMG)"
			],
			"title": "Automated Source Code Security Measure (ASCSM)",
			"url": "http://www.omg.org/spec/ASCSM/1.0/",
			"publication_year": "2016",
			"publication_month": "--01"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2008-04-11"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-02-16",
				"modification_comment": "updated Demonstrative_Examples, Description, Name, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-09-27",
				"modification_comment": "updated Observed_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Common_Consequences, Demonstrative_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2013-02-21",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-02-18",
				"modification_comment": "updated Applicable_Platforms"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Demonstrative_Examples, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-06-20",
				"modification_comment": "updated Relationships, Type"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Applicable_Platforms, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-12-10",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-10-26",
				"modification_comment": "updated Observed_Examples"
			}
		],
		"previous_entry_name": [
			{
				"text": "Use of a Resource after Expiration or Release",
				"date": "2010-02-16"
			}
		]
	},
	"taxonomy_mappings": [
		{
			"taxonomy_name": "Software Fault Patterns",
			"entry_name": "Faulty Resource Use",
			"entry_id": "SFP15"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not access a closed file",
			"entry_id": "FIO46-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not access freed memory",
			"entry_id": "MEM30-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "OMG ASCSM",
			"entry_id": "ASCSM-CWE-672"
		}
	]
}
