{
	"id": "456",
	"name": "Missing Initialization of a Variable",
	"abstraction": "Variant",
	"structure": "Simple",
	"status": "Draft",
	"description": "The product does not initialize critical variables, which causes the execution environment to use unexpected values.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "909",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "665",
			"view_id": "1305",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "665",
			"view_id": "1340",
			"ordinal": "Primary"
		},
		{
			"nature": "CanPrecede",
			"cweid": "89",
			"view_id": "1000"
		},
		{
			"nature": "CanPrecede",
			"cweid": "120",
			"view_id": "1000"
		},
		{
			"nature": "CanPrecede",
			"cweid": "98",
			"view_id": "1000"
		},
		{
			"nature": "CanPrecede",
			"cweid": "457",
			"view_id": "1000"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Integrity",
				"Other"
			],
			"impact": [
				"Unexpected State",
				"Quality Degradation",
				"Varies by Context"
			],
			"note": "The uninitialized data may be invalid, causing logic errors within the program. In some cases, this could result in a security problem."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Check that critical variables are initialized."
			]
		},
		{
			"phase": [
				"Testing"
			],
			"description": [
				"Use a static analysis tool to spot non-initialized variables."
			]
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n               <Intro_Text>This function attempts to extract a pair of numbers from a user-supplied string.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>void parse_data(char *untrusted_input){<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>int m, n, error;<xhtml:br/>error = sscanf(untrusted_input, \"%d:%d\", &amp;m, &amp;n);<xhtml:br/>if ( EOF == error ){<xhtml:div style=\"margin-left:1em;\">die(\"Did not specify integer value. Die evil hacker!\\n\");</xhtml:div>}<xhtml:br/>\n                           <xhtml:i>/* proceed assuming n and m are initialized correctly */</xhtml:i>\n                           <xhtml:br/>\n                        </xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>This code attempts to extract two integer values out of a formatted, user-supplied input. However, if an attacker were to provide an input of the form:</Body_Text>\n               <Example_Code Nature=\"Attack\">\n                  <xhtml:div>123:</xhtml:div>\n               </Example_Code>\n               <Body_Text>then only the m variable will be initialized. Subsequent use of n may result in the use of an uninitialized variable (CWE-457).</Body_Text>\n            "
		},
		{
			"text": "\n               <Intro_Text>Here, an uninitialized field in a Java class is used in a seldom-called method, which would cause a NullPointerException to be thrown.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>private User user;<xhtml:br/>public void someMethod() {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// Do something interesting.</xhtml:i>\n                           <xhtml:br/>...<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// Throws NPE if user hasn't been properly initialized.</xhtml:i>\n                           <xhtml:br/>String username = user.getName();</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		},
		{
			"text": "\n               <Intro_Text>This code first authenticates a user, then allows a delete command if the user is an administrator.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"PHP\">\n                  <xhtml:div>if (authenticate($username,$password) &amp;&amp; setAdmin($username)){<xhtml:div style=\"margin-left:1em;\">$isAdmin = true;</xhtml:div>}<xhtml:br/>\n                     <xhtml:i>/.../</xhtml:i>\n                     <xhtml:br/>\n                     <xhtml:br/>if ($isAdmin){<xhtml:div style=\"margin-left:1em;\">deleteUser($userToDelete);</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>The $isAdmin variable is set to true if the user is an admin, but is uninitialized otherwise. If PHP's register_globals feature is enabled, an attacker can set uninitialized variables like $isAdmin to arbitrary values, in this case gaining administrator privileges by setting $isAdmin to true.</Body_Text>\n            "
		},
		{
			"text": "\n               <Intro_Text>In the following Java code the BankManager class uses the user variable of the class User to allow authorized users to perform bank manager tasks. The user variable is initialized within the method setUser that retrieves the User from the User database. The user is then authenticated as unauthorized user through the method authenticateUser.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>public class BankManager {<xhtml:br/>\n                     <xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// user allowed to perform bank manager tasks</xhtml:i>\n                           <xhtml:br/>private User user = null;<xhtml:br/>private boolean isUserAuthentic = false;<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// constructor for BankManager class</xhtml:i>\n                           <xhtml:br/>public BankManager() {<xhtml:div style=\"margin-left:1em;\">...</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// retrieve user from database of users</xhtml:i>\n                           <xhtml:br/>public User getUserFromUserDatabase(String username){<xhtml:div style=\"margin-left:1em;\">...</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// set user variable using username</xhtml:i>\n                           <xhtml:br/>public void setUser(String username) {<xhtml:div style=\"margin-left:1em;\">this.user = getUserFromUserDatabase(username);</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// authenticate user</xhtml:i>\n                           <xhtml:br/>public boolean authenticateUser(String username, String password) {<xhtml:div style=\"margin-left:1em;\">if (username.equals(user.getUsername()) &amp;&amp; password.equals(user.getPassword())) {<xhtml:div style=\"margin-left:1em;\">isUserAuthentic = true;</xhtml:div>}<xhtml:br/>return isUserAuthentic;</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// methods for performing bank manager tasks</xhtml:i>\n                           <xhtml:br/>...</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, if the method setUser is not called before authenticateUser then the user variable will not have been initialized and will result in a NullPointerException. The code should verify that the user variable has been initialized before it is used, as in the following code.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"Java\">\n                  <xhtml:div>public class BankManager {<xhtml:br/>\n                     <xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// user allowed to perform bank manager tasks</xhtml:i>\n                           <xhtml:br/>private User user = null;<xhtml:br/>private boolean isUserAuthentic = false;<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// constructor for BankManager class</xhtml:i>\n                           <xhtml:br/>public BankManager(String username) {<xhtml:div style=\"margin-left:1em;\">user = getUserFromUserDatabase(username);</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// retrieve user from database of users</xhtml:i>\n                           <xhtml:br/>public User getUserFromUserDatabase(String username) {...}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// authenticate user</xhtml:i>\n                           <xhtml:br/>public boolean authenticateUser(String username, String password) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>if (user == null) {<xhtml:div style=\"margin-left:1em;\">System.out.println(\"Cannot find user \" + username);</xhtml:div>}<xhtml:br/>else {<xhtml:div style=\"margin-left:1em;\">if (password.equals(user.getPassword())) {<xhtml:div style=\"margin-left:1em;\">isUserAuthentic = true;</xhtml:div>}</xhtml:div>}<xhtml:br/>return isUserAuthentic;</xhtml:div>\n                           </xhtml:div>}<xhtml:br/>\n                           <xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>\n                                 <xhtml:i>// methods for performing bank manager tasks</xhtml:i>\n                                 <xhtml:br/>...</xhtml:div>\n                           </xhtml:div>\n                           <xhtml:br/>\n                        </xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		},
		{
			"demonstrative_example_id": "DX-144",
			"text": "\n\t\t\t  <Intro_Text>This example will leave test_string in an\n\t\t\t  unknown condition when i is the same value as err_val,\n\t\t\t  because test_string is not initialized\n\t\t\t  (CWE-456). Depending on where this code segment appears\n\t\t\t  (e.g. within a function body), test_string might be\n\t\t\t  random if it is stored on the heap or stack. If the\n\t\t\t  variable is declared in static memory, it might be zero\n\t\t\t  or NULL. Compiler optimization might contribute to the\n\t\t\t  unpredictability of this address.</Intro_Text>\n\t\t\t  <Example_Code Nature=\"Bad\" Language=\"C\">\n                char *test_string;<xhtml:br/>\n                if (i != err_val)<xhtml:br/>\n                {<xhtml:br/>\n                <xhtml:div style=\"margin-left:1em;\">test_string = \"Hello World!\";</xhtml:div>\n                }<xhtml:br/>\n                printf(\"%s\", test_string);\n              </Example_Code>\n              <Body_Text><xhtml:p>When the printf() is reached,\n              test_string might be an unexpected address, so the\n              printf might print junk strings (CWE-457).</xhtml:p>\n\t\t\t  <xhtml:p>\n\t\t\t  To fix this code, there are a couple approaches to\n\t\t\t  making sure that test_string has been properly set once\n\t\t\t  it reaches the printf().</xhtml:p>\n\t\t\t  <xhtml:p>One solution would be to set test_string to an\n\t\t\t  acceptable default before the conditional:</xhtml:p>\n\t\t\t  </Body_Text>\n\t\t\t  <Example_Code Nature=\"Good\" Language=\"C\">\n\t\t\t\tchar *test_string = \"Done at the beginning\";<xhtml:br/>\n\t\t\t\tif (i != err_val)<xhtml:br/>\n\t\t\t\t{<xhtml:br/>\n\t\t\t\t<xhtml:div style=\"margin-left:1em;\">test_string = \"Hello World!\";</xhtml:div>\n\t\t\t\t}<xhtml:br/>\n\t\t\t\tprintf(\"%s\", test_string);\n\t\t\t  </Example_Code>\n\t\t\t  <Body_Text>Another solution is to ensure that each\n\t\t\t  branch of the conditional - including the default/else\n\t\t\t  branch - could ensure that test_string is set:</Body_Text>\n\t\t\t  <Example_Code Nature=\"Good\" Language=\"C\">\n\t\t\t\tchar *test_string;<xhtml:br/>\n\t\t\t\tif (i != err_val)<xhtml:br/>\n\t\t\t\t{<xhtml:br/>\n\t\t\t\t<xhtml:div style=\"margin-left:1em;\">test_string = \"Hello World!\";</xhtml:div>\n\t\t\t\t}<xhtml:br/>\n\t\t\t\telse {<xhtml:br/>\n\t\t\t\t<xhtml:div style=\"margin-left:1em;\">test_string = \"Done on the other side!\";</xhtml:div>\n\t\t\t\t}<xhtml:br/>\n\t\t\t\tprintf(\"%s\", test_string);\n\t\t\t  </Example_Code>\n\t\t\t"
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2020-6078",
			"description": "Chain: The return value of a function returning a pointer is not checked for success (CWE-252) resulting in the later use of an uninitialized variable (CWE-456) and a null pointer dereference (CWE-476)",
			"link": "https://www.cve.org/CVERecord?id=CVE-2020-6078"
		},
		{
			"reference": "CVE-2009-2692",
			"description": "Chain: Use of an unimplemented network socket operation pointing to an uninitialized handler function (CWE-456) causes a crash because of a null pointer dereference (CWE-476).",
			"link": "https://www.cve.org/CVERecord?id=CVE-2009-2692"
		},
		{
			"reference": "CVE-2020-20739",
			"description": "A variable that has its value set in a conditional statement is sometimes used when the conditional fails, sometimes causing data leakage",
			"link": "https://www.cve.org/CVERecord?id=CVE-2020-20739"
		},
		{
			"reference": "CVE-2005-2978",
			"description": "Product uses uninitialized variables for size and index, leading to resultant buffer overflow.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2005-2978"
		},
		{
			"reference": "CVE-2005-2109",
			"description": "Internal variable in PHP application is not initialized, allowing external modification.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2005-2109"
		},
		{
			"reference": "CVE-2005-2193",
			"description": "Array variable not initialized in PHP application, leading to resultant SQL injection.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2005-2193"
		}
	],
	"references": [
		{
			"section": "Chapter 7, \"Variable Initialization\", Page 312",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		},
		{
			"section": "ASCRM-CWE-456",
			"reference_id": "REF-961",
			"author": [
				"Object Management Group (OMG)"
			],
			"title": "Automated Source Code Reliability Measure (ASCRM)",
			"url": "http://www.omg.org/spec/ASCRM/1.0/",
			"publication_year": "2016",
			"publication_month": "--01"
		},
		{
			"section": "ASCSM-CWE-456",
			"reference_id": "REF-962",
			"author": [
				"Object Management Group (OMG)"
			],
			"title": "Automated Source Code Security Measure (ASCSM)",
			"url": "http://www.omg.org/spec/ASCSM/1.0/",
			"publication_year": "2016",
			"publication_month": "--01"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "PLOVER",
			"submission_date": "2006-07-19"
		},
		"modification": [
			{
				"modification_name": "Sean Eidemiller",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "added/updated demonstrative examples"
			},
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Relationships, Other_Notes, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-02-16",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-04-05",
				"modification_comment": "updated Applicable_Platforms, Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-06-21",
				"modification_comment": "updated Other_Notes, Relationship_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-03-29",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-27",
				"modification_comment": "updated Common_Consequences, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2013-02-21",
				"modification_comment": "updated Name, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-06-20",
				"modification_comment": "updated Relationships, Type"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-06-25",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-12-10",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-03-15",
				"modification_comment": "updated Demonstrative_Examples, Observed_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		],
		"previous_entry_name": [
			{
				"text": "Missing Initialization",
				"date": "2013-02-21"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "PLOVER",
			"entry_name": "Missing Initialization"
		},
		{
			"taxonomy_name": "Software Fault Patterns",
			"entry_name": "Glitch in computation",
			"entry_id": "SFP1"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Set errno to zero before calling a library function known to set errno,  and check errno only after the function returns a value indicating failure",
			"entry_id": "ERR30-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "SEI CERT Perl Coding Standard",
			"entry_name": "Always initialize local variables",
			"entry_id": "DCL04-PL",
			"mapping_fit": "Exact"
		},
		{
			"taxonomy_name": "SEI CERT Perl Coding Standard",
			"entry_name": "Declare identifiers before using them",
			"entry_id": "DCL33-PL",
			"mapping_fit": "Imprecise"
		},
		{
			"taxonomy_name": "OMG ASCSM",
			"entry_id": "ASCSM-CWE-456"
		},
		{
			"taxonomy_name": "OMG ASCRM",
			"entry_id": "ASCRM-CWE-456"
		}
	],
	"notes": [
		{
			"type": "Relationship",
			"text": "This weakness is a major factor in a number of resultant weaknesses, especially in web applications that allow global variable initialization (such as PHP) with libraries that can be directly requested."
		},
		{
			"type": "Research Gap",
			"text": "It is highly likely that a large number of resultant weaknesses have missing initialization as a primary factor, but researcher reports generally do not provide this level of detail."
		}
	]
}
