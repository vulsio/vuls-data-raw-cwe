{
	"id": "296",
	"name": "Improper Following of a Certificate's Chain of Trust",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Draft",
	"description": "The product does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.",
	"extended_description": "\n            <xhtml:p>If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate.</xhtml:p>\n            <xhtml:p>In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate.</xhtml:p>\n            <xhtml:p>There are several ways in which the chain of trust might be broken, including but not limited to:</xhtml:p>\n            <xhtml:ul>\n              <xhtml:li>Any certificate in the chain is self-signed, unless it the root.</xhtml:li>\n              <xhtml:li>Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate.</xhtml:li>\n              <xhtml:li>An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions.</xhtml:li>\n              <xhtml:li>The root certificate has been compromised or authorized to the wrong party.</xhtml:li>\n            </xhtml:ul>\n         ",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "295",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "573",
			"view_id": "1000"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation",
			"note": [
				"When the product uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete."
			]
		},
		{
			"phase": "Implementation",
			"note": [
				"REALIZATION: This weakness is caused during implementation of an architectural security tactic."
			]
		}
	],
	"likelihood_of_exploit": "Low",
	"common_consequences": [
		{
			"scope": [
				"Non-Repudiation"
			],
			"impact": [
				"Hide Activities"
			],
			"note": "Exploitation of this flaw can lead to the trust of data that may have originated with a spoofed source."
		},
		{
			"scope": [
				"Integrity",
				"Confidentiality",
				"Availability",
				"Access Control"
			],
			"impact": [
				"Gain Privileges or Assume Identity",
				"Execute Unauthorized Code or Commands"
			],
			"note": "Data, requests, or actions taken by the attacking entity can be carried out as a spoofed benign entity."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"Ensure that proper certificate checking is included in the system design."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Understand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity."
			]
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust."
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-121",
			"text": "\n               <Intro_Text>This code checks the certificate of a connected peer.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>if ((cert = SSL_get_peer_certificate(ssl)) &amp;&amp; host)<xhtml:div style=\"margin-left:1em;\">foo=SSL_get_verify_result(ssl);</xhtml:div>\n                     <xhtml:br/>if ((X509_V_OK==foo) || X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN==foo))<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// certificate looks good, host can be trusted</xhtml:i>\n                           <xhtml:br/>\n                        </xhtml:div>\n                     </xhtml:div>\n                  </xhtml:div>\n               </Example_Code>\n               <Body_Text>In this case, because the certificate is self-signed, there was no external authority that could prove the identity of the host. The program could be communicating with a different system that is spoofing the host, e.g. by poisoning the DNS cache or using an Adversary-in-the-Middle (AITM) attack to modify the traffic from server to client.</Body_Text>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2016-2402",
			"description": "Server allows bypass of certificate pinning by sending a chain of trust that includes a trusted CA that is not pinned.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2016-2402"
		},
		{
			"reference": "CVE-2008-4989",
			"description": "Verification function trusts certificate chains in which the last certificate is self-signed.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2008-4989"
		},
		{
			"reference": "CVE-2012-5821",
			"description": "Chain: Web browser uses a TLS-related function incorrectly, preventing it from verifying that a server's certificate is signed by a trusted certification authority (CA).",
			"link": "https://www.cve.org/CVERecord?id=CVE-2012-5821"
		},
		{
			"reference": "CVE-2009-3046",
			"description": "Web browser does not check if any intermediate certificates are revoked.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2009-3046"
		},
		{
			"reference": "CVE-2009-0265",
			"description": "chain: DNS server does not correctly check return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2009-0265"
		},
		{
			"reference": "CVE-2009-0124",
			"description": "chain: incorrect check of return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2009-0124"
		},
		{
			"reference": "CVE-2002-0970",
			"description": "File-transfer software does not validate Basic Constraints of an intermediate CA-signed certificate.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2002-0970"
		},
		{
			"reference": "CVE-2002-0862",
			"description": "Cryptographic API, as used in web browsers, mail clients, and other software, does not properly validate Basic Constraints.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2002-0862"
		}
	],
	"references": [
		{
			"reference_id": "REF-18",
			"author": [
				"Secure Software, Inc."
			],
			"title": "The CLASP Application Security Process",
			"url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
			"publication_year": "2005"
		},
		{
			"reference_id": "REF-245",
			"author": [
				"Martin Georgiev",
				"Subodh Iyengar",
				"Suman Jana",
				"Rishita Anubhai",
				"Dan Boneh",
				"Vitaly Shmatikov"
			],
			"title": "The Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser Software",
			"url": "http://www.cs.utexas.edu/~shmat/shmat_ccs12.pdf",
			"publication_year": "2012",
			"publication_month": "--10",
			"publication_day": "---25"
		},
		{
			"section": "\"Sin 23: Improper Use of PKI, Especially SSL.\" Page 347",
			"reference_id": "REF-44",
			"author": [
				"Michael Howard",
				"David LeBlanc",
				"John Viega"
			],
			"title": "24 Deadly Sins of Software Security",
			"publication_year": "2010",
			"publication": "McGraw-Hill"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CLASP",
			"submission_date": "2006-07-19"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-03-10",
				"modification_comment": "updated Description, Name, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-05-27",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-07-27",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-12-13",
				"modification_comment": "updated Other_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2013-02-21",
				"modification_comment": "updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Observed_Examples, Other_Notes, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2013-07-17",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Demonstrative_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Demonstrative_Examples, Modes_of_Introduction, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2018-03-27",
				"modification_comment": "updated Modes_of_Introduction, Observed_Examples, Potential_Mitigations, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-09-19",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Demonstrative_Examples, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-07-20",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-04-28",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description, Modes_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		],
		"previous_entry_name": [
			{
				"text": "Failure to Follow Chain of Trust in Certificate Validation",
				"date": "2009-03-10"
			},
			{
				"text": "Improper Following of Chain of Trust for Certificate Validation",
				"date": "2013-02-21"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "CLASP",
			"entry_name": "Failure to follow chain of trust in certificate validation"
		}
	]
}
