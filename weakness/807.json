{
	"id": "807",
	"name": "Reliance on Untrusted Inputs in a Security Decision",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.",
	"extended_description": "\n            <xhtml:p>Developers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. However, an attacker could change these inputs using customized clients or other attacks. This change might not be detected. When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the software.</xhtml:p>\n            <xhtml:p>Without sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted.</xhtml:p>\n         ",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "693",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Architecture and Design",
			"note": [
				"COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."
			]
		},
		{
			"phase": "Implementation"
		}
	],
	"likelihood_of_exploit": "High",
	"common_consequences": [
		{
			"scope": [
				"Confidentiality",
				"Access Control",
				"Availability",
				"Other"
			],
			"impact": [
				"Bypass Protection Mechanism",
				"Gain Privileges or Assume Identity",
				"Varies by Context"
			],
			"note": "Attackers can bypass the security decision to access whatever is being protected. The consequences will depend on the associated functionality, but they can range from granting additional privileges to untrusted users to bypassing important security checks. Ultimately, this weakness may lead to exposure or modification of sensitive data, system crash, or execution of arbitrary code."
		}
	],
	"potential_mitigations": [
		{
			"mitigation_id": "MIT-14",
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"\n                  <xhtml:p>Store state information and sensitive data on the server side only.</xhtml:p>\n                  <xhtml:p>Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.</xhtml:p>\n                  <xhtml:p>If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).</xhtml:p>\n               "
			],
			"strategy": "Attack Surface Reduction"
		},
		{
			"mitigation_id": "MIT-4.2",
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"\n                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>\n                  <xhtml:p>With a stateless protocol such as HTTP, use a framework that maintains the state for you.</xhtml:p>\n                  <xhtml:p>Examples include ASP.NET View State [REF-756] and the OWASP ESAPI Session Management feature [REF-45].</xhtml:p>\n                  <xhtml:p>Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.</xhtml:p>\n               "
			],
			"strategy": "Libraries or Frameworks"
		},
		{
			"mitigation_id": "MIT-15",
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."
			]
		},
		{
			"mitigation_id": "MIT-16",
			"phase": [
				"Operation",
				"Implementation"
			],
			"description": [
				"When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."
			],
			"strategy": "Environment Hardening"
		},
		{
			"mitigation_id": "MIT-6",
			"phase": [
				"Architecture and Design",
				"Implementation"
			],
			"description": [
				"\n                  <xhtml:p>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</xhtml:p>\n                  <xhtml:p>Identify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to keep critical information about the user's session on the server side instead of recording it within external data.</xhtml:p>\n               "
			],
			"strategy": "Attack Surface Reduction"
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-15",
			"text": "\n               <Intro_Text>The following code excerpt reads a value from a browser cookie to determine the role of the user.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style=\"margin-left:1em;\">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals(\"role\")) {<xhtml:div style=\"margin-left:1em;\">userRole = c.getValue();</xhtml:div>}</xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		},
		{
			"demonstrative_example_id": "DX-16",
			"text": "\n               <Intro_Text>The following code could be for a medical records application. It performs authentication by checking if a cookie has been set.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"PHP\">\n                  <xhtml:div>$auth = $_COOKIES['authenticated'];<xhtml:br/>if (! $auth) {<xhtml:div style=\"margin-left:1em;\">if (AuthenticateUser($_POST['user'], $_POST['password']) == \"success\") {<xhtml:div style=\"margin-left:1em;\">// save the cookie to send out in future responses<xhtml:br/>setcookie(\"authenticated\", \"1\", time()+60*60*2);</xhtml:div>}<xhtml:br/>else {<xhtml:div style=\"margin-left:1em;\">ShowLoginScreen();<xhtml:br/>die(\"\\n\");</xhtml:div>}</xhtml:div>}<xhtml:br/>DisplayMedicalHistory($_POST['patient_ID']);</xhtml:div>\n               </Example_Code>\n               <Body_Text>The programmer expects that the AuthenticateUser() check will always be applied, and the \"authenticated\" cookie will only be set when authentication succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie.</Body_Text>\n               <Body_Text>However, the attacker can set the \"authenticated\" cookie to a non-zero value such as 1. As a result, the $auth variable is 1, and the AuthenticateUser() check is not even performed. The attacker has bypassed the authentication.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-17",
			"text": "\n               <Intro_Text>In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style=\"margin-left:1em;\">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals(\"authenticated\") &amp;&amp; Boolean.TRUE.equals(c.getValue())) {<xhtml:div style=\"margin-left:1em;\">authenticated = true;</xhtml:div>}</xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		},
		{
			"demonstrative_example_id": "DX-93",
			"text": "\n               <Intro_Text>The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>struct hostent *hp;struct in_addr myaddr;<xhtml:br/>char* tHost = \"trustme.example.com\";<xhtml:br/>myaddr.s_addr=inet_addr(ip_addr_string);<xhtml:br/>\n                     <xhtml:br/>hp = gethostbyaddr((char *) &amp;myaddr, sizeof(struct in_addr), AF_INET);<xhtml:br/>if (hp &amp;&amp; !strncmp(hp-&gt;h_name, tHost, sizeof(tHost))) {<xhtml:div style=\"margin-left:1em;\">trusted = true;</xhtml:div>} else {<xhtml:div style=\"margin-left:1em;\">trusted = false;</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>String ip = request.getRemoteAddr();<xhtml:br/>InetAddress addr = InetAddress.getByName(ip);<xhtml:br/>if (addr.getCanonicalHostName().endsWith(\"trustme.com\")) {<xhtml:div style=\"margin-left:1em;\">trusted = true;</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"C#\">\n                  <xhtml:div>IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);<xhtml:br/>IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);<xhtml:br/>if (hostInfo.HostName.EndsWith(\"trustme.com\")) {<xhtml:div style=\"margin-left:1em;\">trusted = true;</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.</Body_Text>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2009-1549",
			"description": "Attacker can bypass authentication by setting a cookie to a specific value.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2009-1549"
		},
		{
			"reference": "CVE-2009-1619",
			"description": "Attacker can bypass authentication and gain admin privileges by setting an \"admin\" cookie to 1.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2009-1619"
		},
		{
			"reference": "CVE-2009-0864",
			"description": "Content management system allows admin privileges by setting a \"login\" cookie to \"OK.\"",
			"link": "https://www.cve.org/CVERecord?id=CVE-2009-0864"
		},
		{
			"reference": "CVE-2008-5784",
			"description": "e-dating application allows admin privileges by setting the admin cookie to 1.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2008-5784"
		},
		{
			"reference": "CVE-2008-6291",
			"description": "Web-based email list manager allows attackers to gain admin privileges by setting a login cookie to \"admin.\"",
			"link": "https://www.cve.org/CVERecord?id=CVE-2008-6291"
		}
	],
	"references": [
		{
			"reference_id": "REF-754",
			"author": [
				"Frank Kim"
			],
			"title": "Top 25 Series - Rank 6 - Reliance on Untrusted Inputs in a Security Decision",
			"url": "https://www.sans.org/blog/top-25-series-rank-6-reliance-on-untrusted-inputs-in-a-security-decision/",
			"publication_year": "2010",
			"publication_month": "--03",
			"publication_day": "---05",
			"publisher": "SANS Software Security Institute",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-529",
			"title": "HMAC",
			"url": "https://en.wikipedia.org/wiki/HMAC",
			"publication_year": "2011",
			"publication_month": "--08",
			"publication_day": "---18",
			"publisher": "Wikipedia",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-756",
			"author": [
				"Scott Mitchell"
			],
			"title": "Understanding ASP.NET View State",
			"url": "https://learn.microsoft.com/en-us/previous-versions/dotnet/articles/ms972976(v=msdn.10)?redirectedfrom=MSDN",
			"publication_year": "2004",
			"publication_month": "--05",
			"publication_day": "---15",
			"publisher": "Microsoft",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-45",
			"author": [
				"OWASP"
			],
			"title": "OWASP Enterprise Security API (ESAPI) Project",
			"url": "http://www.owasp.org/index.php/ESAPI"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2010-01-18"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-06-21",
				"modification_comment": "updated Common_Consequences, Potential_Mitigations, References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-09-27",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-27",
				"modification_comment": "updated Common_Consequences, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-09-13",
				"modification_comment": "updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Demonstrative_Examples, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2013-07-17",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-02-18",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Detection_Factors"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-01-19",
				"modification_comment": "updated Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-04-28",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Potential_Mitigations, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes, Relationships"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-10",
			"method": "Manual Static Analysis",
			"description": "Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.",
			"effectiveness": "High",
			"effectiveness_notes": "The effectiveness and speed of manual analysis will be reduced if the there is not a centralized security mechanism, and the security logic is widely distributed throughout the software."
		},
		{
			"method": "Automated Static Analysis - Binary or Bytecode",
			"description": "\n                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>\n                  <xhtml:div style=\"margin-left:1em;\">\n                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>\n                        <xhtml:ul>\n                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>\n                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>\n                        </xhtml:ul>\n                  </xhtml:div>\n               ",
			"effectiveness": "SOAR Partial"
		},
		{
			"method": "Manual Static Analysis - Binary or Bytecode",
			"description": "\n                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>\n                  <xhtml:div style=\"margin-left:1em;\">\n                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>\n                        <xhtml:ul>\n                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>\n                        </xhtml:ul>\n                  </xhtml:div>\n               ",
			"effectiveness": "SOAR Partial"
		},
		{
			"method": "Dynamic Analysis with Automated Results Interpretation",
			"description": "\n                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>\n                  <xhtml:div style=\"margin-left:1em;\">\n                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>\n                        <xhtml:ul>\n                           <xhtml:li>Web Application Scanner</xhtml:li>\n                           <xhtml:li>Web Services Scanner</xhtml:li>\n                           <xhtml:li>Database Scanners</xhtml:li>\n                        </xhtml:ul>\n                  </xhtml:div>\n               ",
			"effectiveness": "SOAR Partial"
		},
		{
			"method": "Dynamic Analysis with Manual Results Interpretation",
			"description": "\n                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>\n                  <xhtml:div style=\"margin-left:1em;\">\n                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>\n                        <xhtml:ul>\n                           <xhtml:li>Fuzz Tester</xhtml:li>\n                           <xhtml:li>Framework-based Fuzzer</xhtml:li>\n                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>\n                        </xhtml:ul>\n                  </xhtml:div>\n               ",
			"effectiveness": "SOAR Partial"
		},
		{
			"method": "Manual Static Analysis - Source Code",
			"description": "\n                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>\n                  <xhtml:div style=\"margin-left:1em;\">\n                     <xhtml:div>Highly cost effective:</xhtml:div>\n                        <xhtml:ul>\n                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>\n                        </xhtml:ul>\n                  </xhtml:div>\n               ",
			"effectiveness": "High"
		},
		{
			"method": "Automated Static Analysis - Source Code",
			"description": "\n                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>\n                  <xhtml:div style=\"margin-left:1em;\">\n                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>\n                        <xhtml:ul>\n                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>\n                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>\n                        </xhtml:ul>\n                  </xhtml:div>\n               ",
			"effectiveness": "SOAR Partial"
		},
		{
			"method": "Architecture or Design Review",
			"description": "\n                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>\n                  <xhtml:div style=\"margin-left:1em;\">\n                     <xhtml:div>Highly cost effective:</xhtml:div>\n                        <xhtml:ul>\n                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>\n                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>\n                        </xhtml:ul>\n                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>\n                        <xhtml:ul>\n                           <xhtml:li>Attack Modeling</xhtml:li>\n                        </xhtml:ul>\n                  </xhtml:div>\n               ",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
			"entry_name": "Do not base security checks on untrusted sources",
			"entry_id": "SEC09-J"
		}
	]
}
