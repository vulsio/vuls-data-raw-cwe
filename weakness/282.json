{
	"id": "282",
	"name": "Improper Ownership Management",
	"abstraction": "Class",
	"structure": "Simple",
	"status": "Draft",
	"description": "The product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "284",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Architecture and Design",
			"note": [
				"REALIZATION: This weakness is caused during implementation of an architectural security tactic."
			]
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Access Control"
			],
			"impact": [
				"Gain Privileges or Assume Identity"
			]
		}
	],
	"potential_mitigations": [
		{
			"mitigation_id": "MIT-1",
			"phase": [
				"Architecture and Design",
				"Operation"
			],
			"description": [
				"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."
			]
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n               <Intro_Text>This function is part of a privileged program that takes input from users with potentially lower privileges.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Python\">\n                  <xhtml:div>def killProcess(processID):<xhtml:div style=\"margin-left:1em;\">os.kill(processID, signal.SIGKILL)</xhtml:div>\n                  </xhtml:div>\n               </Example_Code>\n               <Body_Text>This code does not confirm that the process to be killed is owned by the requesting user, thus allowing an attacker to kill arbitrary processes.</Body_Text>\n               <Body_Text>This function remedies the problem by checking the owner of the process before killing it:</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"Python\">\n                  <xhtml:div>def killProcess(processID):<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>user = getCurrentUser()<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>#Check process owner against requesting user</xhtml:i>\n                           <xhtml:br/>if getProcessOwner(processID) == user:<xhtml:div style=\"margin-left:1em;\">os.kill(processID, signal.SIGKILL)<xhtml:br/>return</xhtml:div>\n                           <xhtml:br/>else:<xhtml:div style=\"margin-left:1em;\">print(\"You cannot kill a process you don't own\")<xhtml:br/>return</xhtml:div>\n                        </xhtml:div>\n                     </xhtml:div>\n                  </xhtml:div>\n               </Example_Code>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-1999-1125",
			"description": "Program runs setuid root but relies on a configuration file owned by a non-root user.",
			"link": "https://www.cve.org/CVERecord?id=CVE-1999-1125"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "PLOVER",
			"submission_date": "2006-07-19"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Maintenance_Notes, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-12-28",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-06-21",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-03-29",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Affected_Resources, Applicable_Platforms, Modes_of_Introduction, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-09-19",
				"modification_comment": "updated Maintenance_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-10-26",
				"modification_comment": "updated Demonstrative_Examples"
			}
		],
		"previous_entry_name": [
			{
				"text": "Ownership Issues",
				"date": "2008-04-11"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "PLOVER",
			"entry_name": "Ownership errors"
		}
	],
	"related_attack_patterns": [
		"17",
		"35"
	],
	"notes": [
		{
			"type": "Maintenance",
			"text": "The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693)."
		}
	],
	"affected_resources": [
		"File or Directory"
	]
}
