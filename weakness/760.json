{
	"id": "760",
	"name": "Use of a One-Way Hash with a Predictable Salt",
	"abstraction": "Variant",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product uses a predictable salt as part of the input.",
	"extended_description": "\n            <xhtml:p>This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide.</xhtml:p>\n            <xhtml:p>It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.</xhtml:p>\n         ",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "916",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {},
	"background_details": [
		"In cryptography, salt refers to some random addition of data to an input before hashing to make dictionary attacks more difficult."
	],
	"modes_of_introduction": [
		{
			"phase": "Implementation",
			"note": [
				"REALIZATION: This weakness is caused during implementation of an architectural security tactic."
			]
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Access Control"
			],
			"impact": [
				"Bypass Protection Mechanism"
			]
		}
	],
	"potential_mitigations": [
		{
			"mitigation_id": "MIT-51",
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"\n                  <xhtml:p>Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.</xhtml:p>\n                  <xhtml:p>Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.</xhtml:p>\n                  <xhtml:p>Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.</xhtml:p>\n               "
			],
			"effectiveness": "High"
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password."
			],
			"effectiveness": "Limited",
			"effectiveness_notes": "Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware."
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2008-4905",
			"description": "Blogging software uses a hard-coded salt when calculating a password hash.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2008-4905"
		},
		{
			"reference": "CVE-2002-1657",
			"description": "Database server uses the username for a salt when encrypting passwords, simplifying brute force attacks.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2002-1657"
		},
		{
			"reference": "CVE-2001-0967",
			"description": "Server uses a constant salt when encrypting passwords, simplifying brute force attacks.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2001-0967"
		},
		{
			"reference": "CVE-2005-0408",
			"description": "chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2005-0408"
		}
	],
	"references": [
		{
			"reference_id": "REF-291",
			"author": [
				"Johnny Shelley"
			],
			"title": "bcrypt",
			"url": "http://bcrypt.sourceforge.net/"
		},
		{
			"reference_id": "REF-292",
			"author": [
				"Colin Percival"
			],
			"title": "Tarsnap - The scrypt key derivation function and encryption utility",
			"url": "http://www.tarsnap.com/scrypt.html"
		},
		{
			"section": "5.2 PBKDF2",
			"reference_id": "REF-293",
			"author": [
				"B. Kaliski"
			],
			"title": "RFC2898 - PKCS #5: Password-Based Cryptography Specification Version 2.0",
			"url": "https://www.rfc-editor.org/rfc/rfc2898",
			"publication_year": "2000",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-294",
			"author": [
				"Coda Hale"
			],
			"title": "How To Safely Store A Password",
			"url": "https://codahale.com/how-to-safely-store-a-password/",
			"publication_year": "2010",
			"publication_month": "--01",
			"publication_day": "---31",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-295",
			"author": [
				"Brian Krebs"
			],
			"title": "How Companies Can Beef Up Password Security (interview with Thomas H. Ptacek)",
			"url": "https://krebsonsecurity.com/2012/06/how-companies-can-beef-up-password-security/",
			"publication_year": "2012",
			"publication_month": "--06",
			"publication_day": "---11",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-296",
			"author": [
				"Solar Designer"
			],
			"title": "Password security: past, present, future",
			"url": "https://www.openwall.com/presentations/PHDays2012-Password-Security/",
			"publication_year": "2012",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-297",
			"author": [
				"Troy Hunt"
			],
			"title": "Our password hashing has no clothes",
			"url": "https://www.troyhunt.com/our-password-hashing-has-no-clothes/",
			"publication_year": "2012",
			"publication_month": "--06",
			"publication_day": "---26",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-298",
			"author": [
				"Joshbw"
			],
			"title": "Should we really use bcrypt/scrypt?",
			"url": "https://web.archive.org/web/20120629144851/http://www.analyticalengine.net/2012/06/should-we-really-use-bcryptscrypt/",
			"publication_year": "2012",
			"publication_month": "--06",
			"publication_day": "---08",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-631",
			"author": [
				"OWASP"
			],
			"title": "Password Storage Cheat Sheet",
			"url": "https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-632",
			"author": [
				"Thomas Ptacek"
			],
			"title": "Enough With The Rainbow Tables: What You Need To Know About Secure Password Schemes",
			"url": "http://hashphp.org/hashing.html",
			"publication_year": "2007",
			"publication_month": "--09",
			"publication_day": "---10",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-633",
			"author": [
				"Robert Graham"
			],
			"title": "The Importance of Being Canonical",
			"url": "https://blog.erratasec.com/2009/02/importance-of-being-canonical.html#.ZCbyY7LMJPY",
			"publication_year": "2009",
			"publication_month": "--02",
			"publication_day": "---02",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-634",
			"author": [
				"James McGlinn"
			],
			"title": "Password Hashing",
			"url": "https://privacyaustralia.net/phpsec/articles/password-hashing/",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-635",
			"author": [
				"Jeff Atwood"
			],
			"title": "Rainbow Hash Cracking",
			"url": "https://blog.codinghorror.com/rainbow-hash-cracking/",
			"publication_year": "2007",
			"publication_month": "--09",
			"publication_day": "---08",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-636",
			"author": [
				"Jeff Atwood"
			],
			"title": "Speed Hashing",
			"url": "https://blog.codinghorror.com/speed-hashing/",
			"publication_year": "2012",
			"publication_month": "--04",
			"publication_day": "---06",
			"url_date": "2023-04-07"
		},
		{
			"reference_id": "REF-637",
			"title": "Rainbow table",
			"url": "https://en.wikipedia.org/wiki/Rainbow_table",
			"publication_year": "2009",
			"publication_month": "--03",
			"publication_day": "---03",
			"publisher": "Wikipedia",
			"url_date": "2023-04-07"
		},
		{
			"section": "Chapter 9, \"Creating a Salted Hash\" Page 302",
			"reference_id": "REF-7",
			"author": [
				"Michael Howard",
				"David LeBlanc"
			],
			"title": "Writing Secure Code",
			"url": "https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223",
			"publication_year": "2002",
			"publication_month": "--12",
			"publication_day": "---04",
			"publisher": "Microsoft Press",
			"edition": "2nd Edition"
		},
		{
			"section": "Chapter 2, \"Salt Values\", Page 46",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2009-03-03"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-10-29",
				"modification_comment": "updated Observed_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-02-16",
				"modification_comment": "updated References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-03-29",
				"modification_comment": "updated Observed_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-10-30",
				"modification_comment": "updated Potential_Mitigations, References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2013-02-21",
				"modification_comment": "updated Description, Potential_Mitigations, References, Relationships, Type"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-02-18",
				"modification_comment": "updated Potential_Mitigations, References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-01-19",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Modes_of_Introduction, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2018-03-27",
				"modification_comment": "updated References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-06-20",
				"modification_comment": "updated Type"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-07-20",
				"modification_comment": "updated Maintenance_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Detection_Factors, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-14",
			"method": "Automated Static Analysis",
			"description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
			"effectiveness": "High"
		}
	],
	"notes": [
		{
			"type": "Maintenance",
			"text": "As of CWE 4.5, terminology related to randomness, entropy, and\n\t   predictability can vary widely. Within the developer and other\n\t   communities, \"randomness\" is used heavily. However, within\n\t   cryptography, \"entropy\" is distinct, typically implied as a\n\t   measurement. There are no commonly-used definitions, even within\n\t   standards documents and cryptography papers. Future versions of\n\t   CWE will attempt to define these terms and, if necessary,\n\t   distinguish between them in ways that are appropriate for\n\t   different communities but do not reduce the usability of CWE for\n\t   mapping, understanding, or other scenarios."
		}
	]
}
