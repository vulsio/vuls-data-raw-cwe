{
  "id": "663",
  "name": "Use of a Non-reentrant Function in a Concurrent Context",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "662",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {},
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Integrity",
        "Confidentiality",
        "Other"
      ],
      "impact": [
        "Modify Memory",
        "Read Memory",
        "Modify Application Data",
        "Read Application Data",
        "Alter Execution Logic"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Use reentrant functions if available."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Add synchronization to your non-reentrant function."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "In Java, use the ReentrantLock Class."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-171",
      "text": "\n               <Intro_Text>In this example, a signal handler uses syslog() to log a message:</Intro_Text>\n               <Example_Code Nature=\"Bad\">\n                  <xhtml:div>char *message;<xhtml:br/>void sh(int dummy) {<xhtml:div style=\"margin-left:1em;\">syslog(LOG_NOTICE,\"%s\\n\",message);<xhtml:br/>sleep(10);<xhtml:br/>exit(0);</xhtml:div>}<xhtml:br/>int main(int argc,char* argv[]) {<xhtml:div style=\"margin-left:1em;\">...<xhtml:br/>signal(SIGHUP,sh);<xhtml:br/>signal(SIGTERM,sh);<xhtml:br/>sleep(10);<xhtml:br/>exit(0);</xhtml:div>}<xhtml:div>If the execution of the first call to the signal handler is suspended after invoking syslog(), and the signal handler is called a second time, the memory allocated by syslog() enters an undefined, and possibly, exploitable state.</xhtml:div>\n                  </xhtml:div>\n               </Example_Code>\n            "
    },
    {
      "demonstrative_example_id": "DX-172",
      "text": "\n               <Intro_Text>The following code relies on getlogin() to determine whether or not a user is trusted. It is easily subverted.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>pwd = getpwnam(getlogin());<xhtml:br/>if (isTrustedGroup(pwd-&gt;pw_gid)) {<xhtml:div style=\"margin-left:1em;\">allow();</xhtml:div>} else {<xhtml:div style=\"margin-left:1em;\">deny();</xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2001-1349",
      "description": "unsafe calls to library functions from signal handler",
      "link": "https://www.cve.org/CVERecord?id=CVE-2001-1349"
    },
    {
      "reference": "CVE-2004-2259",
      "description": "SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2004-2259"
    }
  ],
  "references": [
    {
      "section": "Class ReentrantLock",
      "reference_id": "REF-547",
      "author": [
        "SUN"
      ],
      "title": "Java Concurrency API",
      "url": "https://docs.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/locks/ReentrantLock.html",
      "url_date": "2023-04-07"
    },
    {
      "reference_id": "REF-548",
      "author": [
        "Dipak Jha, Software Engineer, IBM"
      ],
      "title": "Use reentrant functions for safer signal handling",
      "url": "https://archive.ph/rl1XR",
      "url_date": "2023-04-07"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CWE Community",
      "submission_date": "2008-04-11",
      "submission_comment": "Submitted by members of the CWE community to extend early CWE versions"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01",
        "modification_comment": "updated References, Potential_Mitigations, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08",
        "modification_comment": "updated Relationships, References"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-03-10",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-09-27",
        "modification_comment": "updated Name, Observed_Examples, Potential_Mitigations, References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-12-13",
        "modification_comment": "updated Description, Name, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08",
        "modification_comment": "updated Observed_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-12-10",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-01-31",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated References, Relationships, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-10-26",
        "modification_comment": "updated Demonstrative_Examples"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Use of a Non-reentrant Function in an Unsynchronized Context",
        "date": "2010-09-27"
      },
      {
        "text": "Use of a Non-reentrant Function in a Multithreaded Context",
        "date": "2010-12-13"
      }
    ]
  },
  "related_attack_patterns": [
    "29"
  ]
}
