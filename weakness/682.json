{
	"id": "682",
	"name": "Incorrect Calculation",
	"abstraction": "Pillar",
	"structure": "Simple",
	"status": "Draft",
	"description": "The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.",
	"extended_description": "When product performs a security-critical calculation incorrectly, it might lead to incorrect resource allocations, incorrect privilege assignments, or failed comparisons among other things. Many of the direct results of an incorrect calculation can lead to even larger problems such as failed protection mechanisms or even arbitrary code execution.",
	"related_weaknesses": [
		{
			"nature": "CanPrecede",
			"cweid": "170",
			"view_id": "1000"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"class": "Not Technology-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Implementation"
		}
	],
	"likelihood_of_exploit": "High",
	"common_consequences": [
		{
			"scope": [
				"Availability"
			],
			"impact": [
				"DoS: Crash, Exit, or Restart"
			],
			"note": "If the incorrect calculation causes the program to move into an unexpected state, it may lead to a crash or impairment of service."
		},
		{
			"scope": [
				"Integrity",
				"Confidentiality",
				"Availability"
			],
			"impact": [
				"DoS: Crash, Exit, or Restart",
				"DoS: Resource Consumption (Other)",
				"Execute Unauthorized Code or Commands"
			],
			"note": "If the incorrect calculation is used in the context of resource allocation, it could lead to an out-of-bounds operation (CWE-119) leading to a crash or even arbitrary code execution. Alternatively, it may result in an integer overflow (CWE-190) and / or a resource consumption problem (CWE-400)."
		},
		{
			"scope": [
				"Access Control"
			],
			"impact": [
				"Gain Privileges or Assume Identity"
			],
			"note": "In the context of privilege or permissions assignment, an incorrect calculation can provide an attacker with access to sensitive resources."
		},
		{
			"scope": [
				"Access Control"
			],
			"impact": [
				"Bypass Protection Mechanism"
			],
			"note": "If the incorrect calculation leads to an insufficient comparison (CWE-697), it may compromise a protection mechanism such as a validation routine and allow an attacker to bypass the security-critical code."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Understand your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation."
			]
		},
		{
			"mitigation_id": "MIT-8",
			"phase": [
				"Implementation"
			],
			"description": [
				"Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range."
			],
			"strategy": "Input Validation"
		},
		{
			"phase": [
				"Implementation"
			],
			"description": [
				"Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity."
			]
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"\n                  <xhtml:p>Use languages, libraries, or frameworks that make it easier to handle numbers without unexpected consequences.</xhtml:p>\n                  <xhtml:p>Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++).</xhtml:p>\n               "
			],
			"strategy": "Language Selection"
		},
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"\n                  <xhtml:p>Use languages, libraries, or frameworks that make it easier to handle numbers without unexpected consequences.</xhtml:p>\n                  <xhtml:p>Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++).</xhtml:p>\n               "
			],
			"strategy": "Libraries or Frameworks"
		},
		{
			"mitigation_id": "MIT-26",
			"phase": [
				"Implementation"
			],
			"description": [
				"Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system."
			],
			"strategy": "Compilation or Build Hardening"
		},
		{
			"phase": [
				"Testing"
			],
			"description": [
				"Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."
			]
		},
		{
			"phase": [
				"Testing"
			],
			"description": [
				"Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results."
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-33",
			"text": "\n               <Intro_Text>The following image processing code allocates a table for images.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>img_t table_ptr; /*struct containing img data, 10kB each*/<xhtml:br/>int num_imgs;<xhtml:br/>...<xhtml:br/>num_imgs = get_num_imgs();<xhtml:br/>table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);<xhtml:br/>...</xhtml:div>\n               </Example_Code>\n               <Body_Text>This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow (CWE-190). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems (CWE-119).</Body_Text>\n            "
		},
		{
			"text": "\n               <Intro_Text>This code attempts to calculate a football team's average number of yards gained per touchdown.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>...<xhtml:br/>int touchdowns = team.getTouchdowns();<xhtml:br/>int yardsGained = team.getTotalYardage();<xhtml:br/>System.out.println(team.getName() + \" averages \" + yardsGained / touchdowns + \"yards gained for every touchdown scored\");<xhtml:br/>...</xhtml:div>\n               </Example_Code>\n               <Body_Text>The code does not consider the event that the team they are querying has not scored a touchdown, but has gained yardage. In that case, we should expect an ArithmeticException to be thrown by the JVM. This could lead to a loss of availability if our error handling code is not set up correctly.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-55",
			"text": "\n               <Intro_Text>This example attempts to calculate the position of the second byte of a pointer.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>int *p = x;<xhtml:br/>char * second_char = (char *)(p + 1);</xhtml:div>\n               </Example_Code>\n               <Body_Text>In this example, second_char is intended to point to the second byte of p. But, adding 1 to p actually adds sizeof(int) to p, giving a result that is incorrect (3 bytes off on 32-bit platforms). If the resulting memory address is read, this could potentially be an information leak. If it is a write, it could be a security-critical write to unauthorized memory-- whether or not it is a buffer overflow. Note that the above code may also be wrong in other ways, particularly in a little endian environment.</Body_Text>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2020-0022",
			"description": "chain: mobile phone Bluetooth implementation does not include offset when calculating packet length (CWE-682), leading to out-of-bounds write (CWE-787)",
			"link": "https://www.cve.org/CVERecord?id=CVE-2020-0022"
		},
		{
			"reference": "CVE-2004-1363",
			"description": "substitution overflow: buffer overflow using environment variables that are expanded after the length check is performed",
			"link": "https://www.cve.org/CVERecord?id=CVE-2004-1363"
		}
	],
	"references": [
		{
			"reference_id": "REF-106",
			"author": [
				"David LeBlanc",
				"Niels Dekker"
			],
			"title": "SafeInt",
			"url": "http://safeint.codeplex.com/"
		},
		{
			"section": "\"Sin 7: Integer Overflows.\" Page 119",
			"reference_id": "REF-44",
			"author": [
				"Michael Howard",
				"David LeBlanc",
				"John Viega"
			],
			"title": "24 Deadly Sins of Software Security",
			"publication_year": "2010",
			"publication": "McGraw-Hill"
		},
		{
			"section": "Chapter 6, \"Signed Integer Boundaries\", Page 220",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2008-04-11"
		},
		"modification": [
			{
				"modification_name": "Eric Dalci",
				"modification_organization": "Cigital",
				"modification_date": "2008-07-01",
				"modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-09-08",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-10-14",
				"modification_comment": "updated Type"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2008-11-24",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-01-12",
				"modification_comment": "updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Potential_Mitigations, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-03-10",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-05-27",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-07-27",
				"modification_comment": "updated Demonstrative_Examples, Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2009-10-29",
				"modification_comment": "updated Demonstrative_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-02-16",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-04-05",
				"modification_comment": "updated Detection_Factors, Potential_Mitigations, References"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-06-21",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2010-09-27",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-03-29",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-09-13",
				"modification_comment": "updated Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Demonstrative_Examples, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-02-18",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2014-07-30",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2015-12-07",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-01-19",
				"modification_comment": "updated Applicable_Platforms"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-06-20",
				"modification_comment": "updated Related_Attack_Patterns, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Applicable_Platforms, Observed_Examples, Relationships, Type"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-12-10",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-07-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description, Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships, Time_of_Introduction"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes, Research_Gaps"
			}
		]
	},
	"detection_methods": [
		{
			"detection_method_id": "DM-7",
			"method": "Manual Analysis",
			"description": "\n                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>\n                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program.</xhtml:p>\n               ",
			"effectiveness": "High",
			"effectiveness_notes": "These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."
		}
	],
	"taxonomy_mappings": [
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Prevent or detect domain and range errors in math functions",
			"entry_id": "FLP32-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Use only explicitly signed or unsigned char type for numeric values",
			"entry_id": "INT07-C"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Use bitwise operators only on unsigned operands",
			"entry_id": "INT13-C"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Ensure that division and remainder operations do not result in divide-by-zero errors",
			"entry_id": "INT33-C",
			"mapping_fit": "CWE More Abstract"
		},
		{
			"taxonomy_name": "CERT C Secure Coding",
			"entry_name": "Do not shift an expression by a negative number of bits or by greater than or equal  to the number of bits that exist in the operand",
			"entry_id": "INT34-C",
			"mapping_fit": "CWE More Abstract"
		}
	],
	"related_attack_patterns": [
		"128",
		"129"
	],
	"notes": [
		{
			"type": "Research Gap",
			"text": "\n\t\t\t  <xhtml:p>Weaknesses related to this Pillar appear to be under-studied, especially with respect to classification schemes. Input from academic and other communities could help identify and resolve gaps or organizational difficulties within CWE.</xhtml:p>\n\t\t\t"
		}
	]
}
