{
  "id": "226",
  "name": "Sensitive Information in Resource Not Removed Before Reuse",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.",
  "extended_description": "\n\t\t\t <xhtml:p>When resources are released, they can be made available for reuse. For example, after memory is de-allocated, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted. As removing information requires time and additional resources, operating systems do not usually clear the previously written information.</xhtml:p>\n\t\t\t <xhtml:p>Even when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, the information may be read by less trustworthy parties when the memory is reallocated.</xhtml:p>\n\t\t\t <xhtml:p>This weakness can apply in hardware, such as when a device or system switches between power, sleep, or debug states during normal operation, or when execution changes to different users or privilege levels.</xhtml:p>\n     ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "459",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "212",
      "view_id": "1000"
    },
    {
      "nature": "CanPrecede",
      "cweid": "201",
      "view_id": "1000"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Not Language-Specific",
        "prevalence": "Undetermined"
      }
    ],
    "technology": [
      {
        "class": "Not Technology-Specific",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Confidentiality"
      ],
      "impact": [
        "Read Application Data"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design",
        "Implementation"
      ],
      "description": [
        "During critical state transitions, information not needed in the next state should be removed or overwritten with fixed patterns (such as all 0's) or random data, before the transition to the next state."
      ],
      "effectiveness": "High"
    },
    {
      "phase": [
        "Architecture and Design",
        "Implementation"
      ],
      "description": [
        "When releasing, de-allocating, or deleting a resource, overwrite its data and relevant metadata with fixed patterns or random data. Be cautious about complex resource types whose underlying representation might be non-contiguous or change at a low level, such as how a file might be split into different chunks on a file system, even though \"logical\" file positions are contiguous at the application layer. Such resource types might require invocation of special modes or APIs to tell the underlying operating system to perform the necessary clearing, such as SDelete (Secure Delete) on Windows, although the appropriate functionality might not be available at the application layer."
      ],
      "effectiveness": "High"
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-147",
      "text": "\n\t <Intro_Text>This example shows how an attacker can take advantage of an incorrect state transition.</Intro_Text>\n\t <Body_Text>\n\t   <xhtml:p>Suppose a device is transitioning from state A to state B. During state A, it can read certain private keys from the hidden fuses that are only accessible in state A but not in state B. The device reads the keys, performs operations using those keys, then transitions to state B, where those private keys should no longer be accessible.</xhtml:p>\n\t </Body_Text>\n\t <Example_Code Nature=\"Bad\">\n\t <xhtml:p>During the transition from A to B, the device does not scrub the memory.</xhtml:p>\n\t </Example_Code>\n\t <Body_Text><xhtml:p>After the transition to state B, even though the private keys are no longer accessible directly from the fuses in state B, they can be accessed indirectly by reading the memory that contains the private keys.</xhtml:p></Body_Text>\n\t <Example_Code Nature=\"Good\">For transition from state A to state B, remove information which should not be available once the transition is complete.</Example_Code>\n       "
    },
    {
      "demonstrative_example_id": "DX-148",
      "text": "\n         <Intro_Text>The following code calls realloc() on a buffer containing sensitive data:</Intro_Text>\n         <Example_Code Nature=\"Bad\" Language=\"C\">\n           <xhtml:div>cleartext_buffer = get_secret();...<xhtml:br/>cleartext_buffer = realloc(cleartext_buffer, 1024);<xhtml:br/>...<xhtml:br/>scrub_memory(cleartext_buffer, 1024);</xhtml:div>\n         </Example_Code>\n         <Body_Text>There is an attempt to scrub the sensitive data from memory, but realloc() is used, so it could return a pointer to a different part of memory. The memory that was originally allocated for cleartext_buffer could still contain an uncleared copy of the data.</Body_Text>\n       "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2003-0001",
      "description": "Ethernet NIC drivers do not pad frames with null bytes, leading to infoleak from malformed packets.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2003-0001"
    },
    {
      "reference": "CVE-2003-0291",
      "description": "router does not clear information from DHCP packets that have been previously used",
      "link": "https://www.cve.org/CVERecord?id=CVE-2003-0291"
    },
    {
      "reference": "CVE-2005-1406",
      "description": "Products do not fully clear memory buffers when less data is stored into the buffer than previous.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2005-1406"
    },
    {
      "reference": "CVE-2005-1858",
      "description": "Products do not fully clear memory buffers when less data is stored into the buffer than previous.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2005-1858"
    },
    {
      "reference": "CVE-2005-3180",
      "description": "Products do not fully clear memory buffers when less data is stored into the buffer than previous.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2005-3180"
    },
    {
      "reference": "CVE-2005-3276",
      "description": "Product does not clear a data structure before writing to part of it, yielding information leak of previously used memory.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2005-3276"
    },
    {
      "reference": "CVE-2002-2077",
      "description": "Memory not properly cleared before reuse.",
      "link": "https://www.cve.org/CVERecord?id=CVE-2002-2077"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "PLOVER",
      "submission_date": "2006-07-19"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01",
        "modification_comment": "updated Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08",
        "modification_comment": "updated Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-10-14",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-11-24",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-03-10",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-05-27",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-10-29",
        "modification_comment": "updated Description, Other_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-02-16",
        "modification_comment": "updated Applicable_Platforms, Maintenance_Notes, Relationship_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-09-27",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-12-13",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01",
        "modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-09-13",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08",
        "modification_comment": "updated Causal_Nature, Functional_Areas, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24",
        "modification_comment": "updated Applicable_Platforms, Description, Name, Relationships, Time_of_Introduction, Weakness_Ordinalities"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-08-20",
        "modification_comment": "updated Description, Name, Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28",
        "modification_comment": "updated Demonstrative_Examples, Description, Detection_Factors, Maintenance_Notes, Potential_Mitigations, Relationships, Research_Gaps"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Detection_Factors, Relationships, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Sensitive Information Uncleared Before Use",
        "date": "2008-04-11"
      },
      {
        "text": "Sensitive Information Uncleared Before Release",
        "date": "2020-02-24"
      },
      {
        "text": "Sensitive Information Uncleared in Resource Before Release for Reuse",
        "date": "2020-08-20"
      }
    ]
  },
  "weakness_ordinalities": [
    {
      "ordinality": "Primary"
    }
  ],
  "detection_methods": [
    {
      "method": "Manual Analysis",
      "description": "Write a known pattern into each sensitive location. Trigger the release of the resource or cause the desired state transition to occur. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the product needs to be fixed. Note that this test can likely be automated.",
      "effectiveness": "High"
    },
    {
      "detection_method_id": "DM-14",
      "method": "Automated Static Analysis",
      "description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "effectiveness": "High"
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "PLOVER",
      "entry_name": "Sensitive Information Uncleared Before Use"
    },
    {
      "taxonomy_name": "CERT C Secure Coding",
      "entry_name": "Clear sensitive information stored in reusable resources returned for reuse",
      "entry_id": "MEM03-C"
    },
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Exposed Data",
      "entry_id": "SFP23"
    }
  ],
  "related_attack_patterns": [
    "37"
  ],
  "notes": [
    {
      "type": "Relationship",
      "text": "There is a close association between CWE-226 and CWE-212. The difference is partially that of perspective. CWE-226 is geared towards the final stage of the resource lifecycle, in which the resource is deleted, eliminated, expired, or otherwise released for reuse. Technically, this involves a transfer to a different control sphere, in which the original contents of the resource are no longer relevant. CWE-212, however, is intended for sensitive data in resources that are intentionally shared with others, so they are still active. This distinction is useful from the perspective of the CWE research view (CWE-1000)."
    },
    {
      "type": "Maintenance",
      "text": "This entry needs modification to clarify the differences with CWE-212. The description also combines two problems that are distinct from the CWE research perspective: the inadvertent transfer of information to another sphere, and improper initialization/shutdown. Some of the associated taxonomy mappings reflect these different uses."
    },
    {
      "type": "Research Gap",
      "text": "This is frequently found for network packets, but it can also exist in local memory allocation, files, etc."
    }
  ],
  "affected_resources": [
    "Memory"
  ],
  "functional_areas": [
    "Memory Management",
    "Networking"
  ]
}
