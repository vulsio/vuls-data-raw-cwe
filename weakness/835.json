{
	"id": "835",
	"name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
	"extended_description": "If the loop can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "834",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "834",
			"view_id": "1003",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"common_consequences": [
		{
			"scope": [
				"Availability"
			],
			"impact": [
				"DoS: Resource Consumption (CPU)",
				"DoS: Resource Consumption (Memory)",
				"DoS: Amplification"
			],
			"note": "An infinite loop will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond."
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n               <Intro_Text>In the following code the method processMessagesFromServer attempts to establish a connection to a server and read and process messages from the server. The method uses a do/while loop to continue trying to establish the connection to the server when an attempt fails.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"C\">\n                  <xhtml:div>int processMessagesFromServer(char *hostaddr, int port) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>...<xhtml:br/>int servsock;<xhtml:br/>int connected;<xhtml:br/>struct sockaddr_in servaddr;<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// create socket to connect to server</xhtml:i>\n                           <xhtml:br/>servsock = socket( AF_INET, SOCK_STREAM, 0);<xhtml:br/>memset( &amp;servaddr, 0, sizeof(servaddr));<xhtml:br/>servaddr.sin_family = AF_INET;<xhtml:br/>servaddr.sin_port = htons(port);<xhtml:br/>servaddr.sin_addr.s_addr = inet_addr(hostaddr);<xhtml:br/>\n                           <xhtml:br/>do {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>\n                                 <xhtml:i>// establish connection to server</xhtml:i>\n                                 <xhtml:br/>connected = connect(servsock, (struct sockaddr *)&amp;servaddr, sizeof(servaddr));<xhtml:br/>\n                                 <xhtml:br/>\n                                 <xhtml:i>// if connected then read and process messages from server</xhtml:i>\n                                 <xhtml:br/>if (connected &gt; -1) {<xhtml:div style=\"margin-left:1em;\">\n                                    <xhtml:div>\n                                       <xhtml:br/>\n                                       <xhtml:i>// read and process messages</xhtml:i>\n                                       <xhtml:br/>...</xhtml:div>\n                                 </xhtml:div>}<xhtml:br/>\n                              </xhtml:div>\n                           </xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// keep trying to establish connection to the server</xhtml:i>\n                           <xhtml:br/>} while (connected &lt; 0);<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// close socket and return success or failure</xhtml:i>\n                           <xhtml:br/>...</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, this will create an infinite loop if the server does not respond. This infinite loop will consume system resources and can be used to create a denial of service attack. To resolve this a counter should be used to limit the number of attempts to establish a connection to the server, as in the following code.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"C\">\n                  <xhtml:div>int processMessagesFromServer(char *hostaddr, int port) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>...<xhtml:br/>\n                           <xhtml:i>// initialize number of attempts counter</xhtml:i>\n                           <xhtml:br/>int count = 0;<xhtml:br/>do {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>\n                                 <xhtml:i>// establish connection to server</xhtml:i>\n                                 <xhtml:br/>connected = connect(servsock, (struct sockaddr *)&amp;servaddr, sizeof(servaddr));<xhtml:br/>\n                                 <xhtml:br/>\n                                 <xhtml:i>// increment counter</xhtml:i>\n                                 <xhtml:br/>count++;<xhtml:br/>\n                                 <xhtml:br/>\n                                 <xhtml:i>// if connected then read and process messages from server</xhtml:i>\n                                 <xhtml:br/>if (connected &gt; -1) {<xhtml:div style=\"margin-left:1em;\">\n                                    <xhtml:div>\n                                       <xhtml:br/>\n                                       <xhtml:i>// read and process messages</xhtml:i>\n                                       <xhtml:br/>...</xhtml:div>\n                                 </xhtml:div>}<xhtml:br/>\n                              </xhtml:div>\n                           </xhtml:div>\n                           <xhtml:br/>\n                           <xhtml:i>// keep trying to establish connection to the server</xhtml:i>\n                           <xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// up to a maximum number of attempts</xhtml:i>\n                           <xhtml:br/>} while (connected &lt; 0 &amp;&amp; count &lt; MAX_ATTEMPTS);<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// close socket and return success or failure</xhtml:i>\n                           <xhtml:br/>...</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		},
		{
			"text": "\n               <Intro_Text>For this example the method isReorderNeeded as part of a bookstore application that determines if a particular book needs to be reordered based on the current inventory count and the rate at which the book is being sold.</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>public boolean isReorderNeeded(String bookISBN, int rateSold) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:br/>boolean isReorder = false;<xhtml:br/>\n                           <xhtml:br/>int minimumCount = 10;<xhtml:br/>int days = 0;<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// get inventory count for book</xhtml:i>\n                           <xhtml:br/>int inventoryCount = inventory.getIventoryCount(bookISBN);<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// find number of days until inventory count reaches minimum</xhtml:i>\n                           <xhtml:br/>while (inventoryCount &gt; minimumCount) {<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>\n                                 <xhtml:br/>inventoryCount = inventoryCount - rateSold;<xhtml:br/>days++;<xhtml:br/>\n                              </xhtml:div>\n                           </xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// if number of days within reorder timeframe</xhtml:i>\n                           <xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// set reorder return boolean to true</xhtml:i>\n                           <xhtml:br/>if (days &gt; 0 &amp;&amp; days &lt; 5) {<xhtml:div style=\"margin-left:1em;\">isReorder = true;</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>return isReorder;</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>However, the while loop will become an infinite loop if the rateSold input parameter has a value of zero since the inventoryCount will never fall below the minimumCount. In this case the input parameter should be validated to ensure that a value of zero does not cause an infinite loop,as in the following code.</Body_Text>\n               <Example_Code Nature=\"Good\" Language=\"Java\">\n                  <xhtml:div>public boolean isReorderNeeded(String bookISBN, int rateSold) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>...<xhtml:br/>\n                           <xhtml:br/>\n                           <xhtml:i>// validate rateSold variable</xhtml:i>\n                           <xhtml:br/>if (rateSold &lt; 1) {<xhtml:div style=\"margin-left:1em;\">return isReorder;</xhtml:div>}<xhtml:br/>\n                           <xhtml:br/>...</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2022-22224",
			"description": "Chain: an operating system does not properly process malformed Open Shortest Path First (OSPF) Type/Length/Value Identifiers (TLV) (CWE-703), which can cause the process to enter an infinite loop (CWE-835)",
			"link": "https://www.cve.org/CVERecord?id=CVE-2022-22224"
		},
		{
			"reference": "CVE-2022-25304",
			"description": "A Python machine communication platform did not account for receiving a malformed packet with a null size, causing the receiving function to never update the message buffer and be caught in an infinite loop.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2022-25304"
		},
		{
			"reference": "CVE-2011-1027",
			"description": "Chain: off-by-one error (CWE-193) leads to infinite loop (CWE-835) using invalid hex-encoded characters.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2011-1027"
		},
		{
			"reference": "CVE-2011-1142",
			"description": "Chain: self-referential values in recursive definitions lead to infinite loop.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2011-1142"
		},
		{
			"reference": "CVE-2011-1002",
			"description": "NULL UDP packet is never cleared from a queue, leading to infinite loop.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2011-1002"
		},
		{
			"reference": "CVE-2006-6499",
			"description": "Chain: web browser crashes due to infinite loop - \"bad\n\t      looping logic [that relies on] floating point math [CWE-1339] to exit\n\t      the loop [CWE-835]\"",
			"link": "https://www.cve.org/CVERecord?id=CVE-2006-6499"
		},
		{
			"reference": "CVE-2010-4476",
			"description": "Floating point conversion routine cycles back and forth between two different values.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2010-4476"
		},
		{
			"reference": "CVE-2010-4645",
			"description": "Floating point conversion routine cycles back and forth between two different values.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2010-4645"
		},
		{
			"reference": "CVE-2010-2534",
			"description": "Chain: improperly clearing a pointer in a linked list leads to infinite loop.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2010-2534"
		},
		{
			"reference": "CVE-2013-1591",
			"description": "Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2013-1591"
		},
		{
			"reference": "CVE-2008-3688",
			"description": "Chain: A denial of service may be caused by an uninitialized variable (CWE-457) allowing an infinite loop (CWE-835) resulting from a connection to an unresponsive server.",
			"link": "https://www.cve.org/CVERecord?id=CVE-2008-3688"
		}
	],
	"references": [
		{
			"section": "Chapter 7, \"Looping Constructs\", Page 327",
			"reference_id": "REF-62",
			"author": [
				"Mark Dowd",
				"John McDonald",
				"Justin Schuh"
			],
			"title": "The Art of Software Security Assessment",
			"publication_year": "2006",
			"publisher": "Addison Wesley",
			"edition": "1st Edition"
		},
		{
			"section": "ASCSM-CWE-835",
			"reference_id": "REF-962",
			"author": [
				"Object Management Group (OMG)"
			],
			"title": "Automated Source Code Security Measure (ASCSM)",
			"url": "http://www.omg.org/spec/ASCSM/1.0/",
			"publication_year": "2016",
			"publication_month": "--01"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2011-03-22"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2011-06-01",
				"modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2012-05-11",
				"modification_comment": "updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-01-03",
				"modification_comment": "updated References, Relationships, Taxonomy_Mappings"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-06-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-12-10",
				"modification_comment": "updated Observed_Examples, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-03-15",
				"modification_comment": "updated Observed_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-07-20",
				"modification_comment": "updated Observed_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description, Observed_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-10-26",
				"modification_comment": "updated Observed_Examples"
			}
		]
	},
	"taxonomy_mappings": [
		{
			"taxonomy_name": "OMG ASCSM",
			"entry_id": "ASCSM-CWE-835"
		}
	]
}
