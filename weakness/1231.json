{
	"id": "1231",
	"name": "Improper Prevention of Lock Bit Modification",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Stable",
	"description": "The product uses a trusted lock bit for restricting access to registers, address regions, or other resources, but the product does not prevent the value of the lock bit from being modified after it has been set.",
	"extended_description": "\n\t\t\t  <xhtml:p>In integrated circuits and hardware\n\t\t\t  intellectual property (IP) cores, device configuration\n\t\t\t  controls are commonly programmed after a device power\n\t\t\t  reset by a trusted firmware or software module (e.g.,\n\t\t\t  BIOS/bootloader) and then locked from any further\n\t\t\t  modification.</xhtml:p>\n\n\t\t\t  <xhtml:p>This behavior is commonly implemented using a trusted lock bit. \n\t\t\t  When set, the lock bit disables writes to a protected set of\n\t\t\t  registers or address regions. Design or coding errors in\n\t\t\t  the implementation of the lock bit protection feature\n\t\t\t  may allow the lock bit to be modified or cleared by\n\t\t\t  software after it has been set. Attackers might be able to unlock the system and\n\t\t\t  features that the bit is intended to protect.</xhtml:p>\n\t\t\t",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "284",
			"view_id": "1000",
			"ordinal": "Primary"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"class": "Not Technology-Specific",
				"prevalence": "Undetermined"
			}
		],
		"operating_system": [
			{
				"class": "Not OS-Specific",
				"prevalence": "Undetermined"
			}
		],
		"architecture": [
			{
				"class": "Not Architecture-Specific",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Architecture and Design",
			"note": [
				"Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases."
			]
		},
		{
			"phase": "Implementation",
			"note": [
				"Such issues could be introduced during implementation and identified later during Testing or System Configuration phases."
			]
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Access Control"
			],
			"impact": [
				"Modify Memory"
			],
			"note": "Registers protected by lock bit can be modified even when lock is set.",
			"likelihood": "High"
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design",
				"Implementation",
				"Testing"
			],
			"description": [
				"\n                        <xhtml:ul>\n                            <xhtml:li>Security lock bit protections must be reviewed for design inconsistency and common weaknesses.</xhtml:li>\n                            <xhtml:li>Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.</xhtml:li>\n                        </xhtml:ul>\n                    "
			],
			"effectiveness": "High"
		}
	],
	"demonstrative_examples": [
		{
			"text": "\n                    <Intro_Text>Consider the example design below for a digital thermal sensor that detects overheating of the silicon and triggers system shutdown. The system critical temperature limit (CRITICAL_TEMP_LIMIT) and thermal sensor calibration (TEMP_SENSOR_CALIB) data have to be programmed by firmware, and then the register needs to be locked (TEMP_SENSOR_LOCK).</Intro_Text>\n                    <Example_Code Nature=\"Bad\" Language=\"Other\">\n                        <xhtml:table>\n                            <xhtml:tr>\n                                <xhtml:th>Register</xhtml:th>\n                                <xhtml:th>Field description</xhtml:th>\n                            </xhtml:tr>\n                            <xhtml:tr>\n                                <xhtml:td>CRITICAL_TEMP_LIMIT</xhtml:td>\n                                <xhtml:td>[31:8] Reserved field; Read only; Default 0<xhtml:br/>[7:0] Critical temp 0-255 Centigrade; Read-write-lock; Default 125</xhtml:td>\n                            </xhtml:tr>\n                            <xhtml:tr>\n                                <xhtml:td>TEMP_SENSOR_CALIB</xhtml:td>\n                                <xhtml:td>[31:0] Thermal sensor calibration data. Slope value used to map sensor reading to degrees Centigrade.</xhtml:td>\n                            </xhtml:tr>\n                            <xhtml:tr>\n                                <xhtml:td>TEMP_SENSOR_LOCK</xhtml:td>\n                                <xhtml:td>[31:1] Reserved field; Read only; Default 0<xhtml:br/>[0] Lock bit, locks CRITICAL_TEMP_LIMIT and TEMP_SENSOR_CALIB registers; Write-1-once; Default 0</xhtml:td>\n                            </xhtml:tr>\n                            <xhtml:tr>\n                                <xhtml:td>TEMP_HW_SHUTDOWN</xhtml:td>\n                                <xhtml:td>[31:2] Reserved field; Read only; Default 0<xhtml:br/>[1] Enable hardware shutdown on critical temperature detection; Read-write; Default 0</xhtml:td>\n                            </xhtml:tr>\n                            <xhtml:tr>\n                                <xhtml:td>CURRENT_TEMP</xhtml:td>\n                                <xhtml:td>[31:8] Reserved field; Read only; Default 0<xhtml:br/>[7:0] Current Temp 0-255 Centigrade; Read-only; Default 0</xhtml:td>\n                            </xhtml:tr>\n                        </xhtml:table>\n                    </Example_Code>\n                    <Body_Text>In this example, note that if the system heats to critical temperature, the response of the system is controlled by the TEMP_HW_SHUTDOWN bit [1], which is not lockable. Thus, the intended security property of the critical temperature sensor cannot be fully protected, since software can misconfigure the TEMP_HW_SHUTDOWN register even after the lock bit is set to disable the shutdown response.</Body_Text>\n                    <Example_Code Nature=\"Good\">\n                        <xhtml:p>To fix this weakness, one could change the TEMP_HW_SHUTDOWN field to be locked by TEMP_SENSOR_LOCK.</xhtml:p>\n                        <xhtml:table>\n                            <xhtml:tr>\n                                <xhtml:td>TEMP_HW_SHUTDOWN</xhtml:td>\n                                <xhtml:td>[31:2] Reserved field; Read only; Default 0 <xhtml:br/>[1] Enable hardware shutdown on critical temperature detection; Read-write-Lock; Default 0<xhtml:br/>[0] Locked by TEMP_SENSOR_LOCK</xhtml:td>\n                            </xhtml:tr>\n                        </xhtml:table>\n                    </Example_Code>\n                "
		},
		{
			"text": "\n                    <Intro_Text>The following example code is a snippet from the register locks inside the buggy OpenPiton SoC of HACK@DAC'21 [REF-1350]. Register locks help prevent SoC peripherals' registers from malicious use of resources. The registers that can potentially leak secret data are locked by register locks.</Intro_Text>\n                    <Body_Text>In the vulnerable code, the reglk_mem is used for locking information. If one of its bits toggle to 1, the corresponding peripheral's registers will be locked. In the context of the HACK@DAC System-on-Chip (SoC), it is pertinent to note the existence of two distinct categories of reset signals.</Body_Text>\n                    <Body_Text>First, there is a global reset signal denoted as \"rst_ni,\" which possesses the capability to simultaneously reset all peripherals to their respective initial states.</Body_Text>\n                    <Body_Text>Second, we have peripheral-specific reset signals, such as \"rst_9,\" which exclusively reset individual peripherals back to their initial states. The administration of these reset signals is the responsibility of the reset controller module.</Body_Text>\n                    <Example_Code Nature=\"Bad\" Language=\"Verilog\">\n                            <xhtml:div style=\"margin-left:1em;\">always @(posedge clk_i)<xhtml:br/>\n                                <xhtml:div style=\"margin-left:1em;\">begin<xhtml:br/>\n                                    <xhtml:div style=\"margin-left:1em;\"><xhtml:b>if(~(rst_ni &amp;&amp; ~jtag_unlock &amp;&amp; ~rst_9))</xhtml:b><xhtml:br/>\n\t\t\t\t\t\t\t\t\t\t<xhtml:div style=\"margin-left:1em;\">begin\n                                            <xhtml:div style=\"margin-left:1em;\">for (j=0; j &lt; 6; j=j+1) begin\n                                                <xhtml:div style=\"margin-left:1em;\">reglk_mem[j] &lt;= 'h0;</xhtml:div>\n                                            </xhtml:div>\n                                        end</xhtml:div>\n\t\t\t\t\t\t\t\t\t<xhtml:br/></xhtml:div>\n                                </xhtml:div>\n                        \tend<xhtml:br/>...</xhtml:div>\n                    </Example_Code>\n                    <Body_Text>In the buggy SoC architecture during HACK@DAC'21, a critical issue arises within the reset controller module. Specifically, the reset controller can inadvertently transmit a peripheral reset signal to the register lock within the user privilege domain.</Body_Text>\n                    <Body_Text>This unintentional action can result in the reset of the register locks, potentially exposing private data from all other peripherals, rendering them accessible and readable.</Body_Text>\n                    <Body_Text>To mitigate the issue, remove the extra reset signal rst_9 from the register lock if condition. [REF-1351]</Body_Text>\n                    <Example_Code Nature=\"Good\" Language=\"Verilog\">\n                        <xhtml:div style=\"margin-left:1em;\">always @(posedge clk_i)<xhtml:br/>\n                            <xhtml:div style=\"margin-left:1em;\">begin<xhtml:br/>\n                                <xhtml:div style=\"margin-left:1em;\"><xhtml:b>if(~(rst_ni &amp;&amp; ~jtag_unlock))</xhtml:b><xhtml:br/>\n                                    <xhtml:div style=\"margin-left:1em;\">begin\n                                        <xhtml:div style=\"margin-left:1em;\">for (j=0; j &lt; 6; j=j+1) begin\n                                            <xhtml:div style=\"margin-left:1em;\">reglk_mem[j] &lt;= 'h0;</xhtml:div>\n                                        </xhtml:div>\n                                    end</xhtml:div>\n                                <xhtml:br/></xhtml:div>\n                            </xhtml:div>\n                        end<xhtml:br/>...</xhtml:div>\n                    </Example_Code>\n                "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2017-6283",
			"description": "chip reset clears critical read/write lock permissions for RSA function",
			"link": "https://www.cve.org/CVERecord?id=CVE-2017-6283"
		}
	],
	"references": [
		{
			"reference_id": "REF-1350",
			"title": "reglk_wrapper.sv",
			"url": "https://github.com/HACK-EVENT/hackatdac21/blob/b9ecdf6068445d76d6bee692d163fededf7a9d9b/piton/design/chip/tile/ariane/src/reglk/reglk_wrapper.sv#L80C1-L80C48",
			"publication_year": "2021",
			"url_date": "2023-09-18"
		},
		{
			"reference_id": "REF-1351",
			"title": "fix cwe 1199 in reglk",
			"url": "https://github.com/HACK-EVENT/hackatdac21/commit/5928add42895b57341ae8fc1f9b8351c35aed865#diff-1c2b09dd092a56e5fb2be431a3849e72ff489d2ae4f4a6bb9c0ea6b7d450135aR80",
			"publication_year": "2023",
			"url_date": "2023-09-18"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi",
			"submission_organization": "Intel Corporation",
			"submission_date": "2020-01-15"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-06-25",
				"modification_comment": "updated Demonstrative_Examples"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-08-20",
				"modification_comment": "updated Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Demonstrative_Examples, Description, Detection_Factors, Name, Observed_Examples, Potential_Mitigations, Relationships, Weakness_Ordinalities"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-04-28",
				"modification_comment": "updated Related_Attack_Patterns, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-10-26",
				"modification_comment": "updated Demonstrative_Examples, References"
			}
		],
		"previous_entry_name": [
			{
				"text": "Improper Implementation of Lock Protection Registers",
				"date": "2021-10-28"
			}
		],
		"contribution": [
			{
				"type": "Feedback",
				"contribution_name": "Narasimha Kumar V Mangipudi",
				"contribution_organization": "Lattice Semiconductor",
				"contribution_date": "2021-10-20",
				"contribution_comment": "reviewed content changes"
			},
			{
				"type": "Content",
				"contribution_name": "Hareesh Khattri",
				"contribution_organization": "Intel Corporation",
				"contribution_date": "2021-10-22",
				"contribution_comment": "provided observed example"
			},
			{
				"type": "Content",
				"contribution_name": "Shaza Zeitoni",
				"contribution_organization": "Technical University of Darmstadt",
				"contribution_date": "2023-06-21",
				"contribution_comment": "suggested demonstrative example"
			},
			{
				"type": "Content",
				"contribution_name": "Mohamadreza Rostami",
				"contribution_organization": "Technical University of Darmstadt",
				"contribution_date": "2023-06-21",
				"contribution_comment": "suggested demonstrative example"
			},
			{
				"type": "Content",
				"contribution_name": "Pouya Mahmoody",
				"contribution_organization": "Technical University of Darmstadt",
				"contribution_date": "2023-06-21",
				"contribution_comment": "suggested demonstrative example"
			},
			{
				"type": "Content",
				"contribution_name": "Ahmad-Reza Sadeghi",
				"contribution_organization": "Technical University of Darmstadt",
				"contribution_date": "2023-06-21",
				"contribution_comment": "suggested demonstrative example"
			},
			{
				"type": "Content",
				"contribution_name": "Rahul Kande",
				"contribution_organization": "Texas A&M University",
				"contribution_date": "2023-06-21",
				"contribution_comment": "suggested demonstrative example"
			},
			{
				"type": "Content",
				"contribution_name": "Chen Chen",
				"contribution_organization": "Texas A&M University",
				"contribution_date": "2023-06-21",
				"contribution_comment": "suggested demonstrative example"
			},
			{
				"type": "Content",
				"contribution_name": "Jeyavijayan Rajendran",
				"contribution_organization": "Texas A&M University",
				"contribution_date": "2023-06-21",
				"contribution_comment": "suggested demonstrative example"
			}
		]
	},
	"weakness_ordinalities": [
		{
			"ordinality": "Primary"
		}
	],
	"detection_methods": [
		{
			"method": "Manual Analysis",
			"description": "Set the lock bit. Power cycle the\n\t     device. Attempt to clear the lock bit.  If the\n\t     information is changed, implement a design\n\t     fix. Retest. Also, attempt to indirectly clear the lock\n\t     bit or bypass it.",
			"effectiveness": "High"
		}
	],
	"related_attack_patterns": [
		"680"
	]
}
