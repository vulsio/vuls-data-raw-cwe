{
	"id": "940",
	"name": "Improper Verification of Source of a Communication Channel",
	"abstraction": "Base",
	"structure": "Simple",
	"status": "Incomplete",
	"description": "The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.",
	"extended_description": "When an attacker can successfully establish a communication channel from an untrusted origin, the attacker may be able to gain privileges and access unexpected functionality.",
	"related_weaknesses": [
		{
			"nature": "ChildOf",
			"cweid": "923",
			"view_id": "1000",
			"ordinal": "Primary"
		},
		{
			"nature": "ChildOf",
			"cweid": "346",
			"view_id": "1000"
		}
	],
	"applicable_platforms": {
		"language": [
			{
				"class": "Not Language-Specific",
				"prevalence": "Undetermined"
			}
		],
		"technology": [
			{
				"class": "Mobile",
				"prevalence": "Undetermined"
			}
		]
	},
	"modes_of_introduction": [
		{
			"phase": "Architecture and Design"
		},
		{
			"phase": "Implementation",
			"note": [
				"REALIZATION: This weakness is caused during implementation of an architectural security tactic."
			]
		}
	],
	"common_consequences": [
		{
			"scope": [
				"Access Control",
				"Other"
			],
			"impact": [
				"Gain Privileges or Assume Identity",
				"Varies by Context"
			],
			"note": "An attacker can access any functionality that is inadvertently accessible to the source."
		}
	],
	"potential_mitigations": [
		{
			"phase": [
				"Architecture and Design"
			],
			"description": [
				"\n                  <xhtml:p>Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using an Adversary-in-the-Middle (AITM) attack.</xhtml:p>\n                  <xhtml:p>When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.</xhtml:p>\n               "
			]
		}
	],
	"demonstrative_examples": [
		{
			"demonstrative_example_id": "DX-112",
			"text": "\n               <Intro_Text>This Android application will remove a user account when it receives an intent to do so:</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>IntentFilter filter = new IntentFilter(\"com.example.RemoveUser\");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);<xhtml:br/>\n                     <xhtml:br/>public class DeleteReceiver extends BroadcastReceiver {<xhtml:div style=\"margin-left:1em;\">@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style=\"margin-left:1em;\">int userID = intent.getIntExtra(\"userID\");<xhtml:br/>destroyUserData(userID);</xhtml:div>}</xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create an allowlist of trusted applications using the manifest.xml file.</Body_Text>\n            "
		},
		{
			"demonstrative_example_id": "DX-109",
			"text": "\n               <Intro_Text>These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:</Intro_Text>\n               <Example_Code Nature=\"Bad\" Language=\"Java\">\n                  <xhtml:div>\n                     <xhtml:i>// Android</xhtml:i>\n                     <xhtml:br/>@Override<xhtml:br/>public boolean shouldOverrideUrlLoading(WebView view, String url){<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>if (url.substring(0,14).equalsIgnoreCase(\"examplescheme:\")){<xhtml:div style=\"margin-left:1em;\">if(url.substring(14,25).equalsIgnoreCase(\"getUserInfo\")){<xhtml:div style=\"margin-left:1em;\">writeDataToView(view, UserData);<xhtml:br/>return false;</xhtml:div>}<xhtml:br/>else{<xhtml:div style=\"margin-left:1em;\">return true;</xhtml:div>}</xhtml:div>}</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Example_Code Nature=\"Bad\" Language=\"Objective-C\">\n                  <xhtml:div>\n                     <xhtml:i>// iOS</xhtml:i>\n                     <xhtml:br/>-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>NSURL *URL = [exRequest URL];<xhtml:br/>if ([[URL scheme] isEqualToString:@\"exampleScheme\"])<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">\n                              <xhtml:div>NSString *functionString = [URL resourceSpecifier];<xhtml:br/>if ([functionString hasPrefix:@\"specialFunction\"])<xhtml:br/>{<xhtml:div style=\"margin-left:1em;\">\n                                    <xhtml:div>\n                                       <xhtml:br/>\n                                       <xhtml:i>// Make data available back in webview.</xhtml:i>\n                                       <xhtml:br/>UIWebView *webView = [self writeDataToView:[URL query]];</xhtml:div>\n                                 </xhtml:div>}<xhtml:br/>return NO;</xhtml:div>\n                           </xhtml:div>}<xhtml:br/>return YES;</xhtml:div>\n                     </xhtml:div>}</xhtml:div>\n               </Example_Code>\n               <Body_Text>A call into native code can then be initiated by passing parameters within the URL:</Body_Text>\n               <Example_Code Nature=\"Attack\" Language=\"JavaScript\">\n                  <xhtml:div>window.location = examplescheme://method?parameter=value</xhtml:div>\n               </Example_Code>\n               <Body_Text>Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site.</Body_Text>\n            "
		}
	],
	"observed_examples": [
		{
			"reference": "CVE-2000-1218",
			"description": "DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning",
			"link": "https://www.cve.org/CVERecord?id=CVE-2000-1218"
		},
		{
			"reference": "CVE-2005-0877",
			"description": "DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning",
			"link": "https://www.cve.org/CVERecord?id=CVE-2005-0877"
		},
		{
			"reference": "CVE-2001-1452",
			"description": "DNS server caches glue records received from non-delegated name servers",
			"link": "https://www.cve.org/CVERecord?id=CVE-2001-1452"
		}
	],
	"references": [
		{
			"reference_id": "REF-324",
			"author": [
				"Taimur Aslam"
			],
			"title": "A Taxonomy of Security Faults in the UNIX Operating System",
			"url": "http://cwe.mitre.org/documents/sources/ATaxonomyofSecurityFaultsintheUNIXOperatingSystem%5BAslam95%5D.pdf",
			"publication_year": "1995",
			"publication_month": "--08",
			"publication_day": "---01"
		}
	],
	"content_history": {
		"submission": {
			"submission_name": "CWE Content Team",
			"submission_organization": "MITRE",
			"submission_date": "2014-02-13"
		},
		"modification": [
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2017-11-08",
				"modification_comment": "updated Modes_of_Introduction, References, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2019-06-20",
				"modification_comment": "updated Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-02-24",
				"modification_comment": "updated Applicable_Platforms, Potential_Mitigations, Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2020-06-25",
				"modification_comment": "updated Demonstrative_Examples, Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-07-20",
				"modification_comment": "updated Potential_Mitigations"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2021-10-28",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2022-10-13",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-01-31",
				"modification_comment": "updated Description, Related_Attack_Patterns"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-04-27",
				"modification_comment": "updated Relationships"
			},
			{
				"modification_name": "CWE Content Team",
				"modification_organization": "MITRE",
				"modification_date": "2023-06-29",
				"modification_comment": "updated Mapping_Notes, Relationships"
			}
		]
	},
	"related_attack_patterns": [
		"500",
		"594",
		"595",
		"596"
	],
	"notes": [
		{
			"type": "Relationship",
			"text": "While many access control issues involve authenticating the user, this weakness is more about authenticating the actual source of the communication channel itself; there might not be any \"user\" in such cases."
		}
	]
}
