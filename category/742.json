{
  "id": "742",
  "name": "CERT C Secure Coding Standard (2008) Chapter 9 - Memory Management (MEM)",
  "status": "Obsolete",
  "summary": "Weaknesses in this category are related to the rules and recommendations in the Memory Management (MEM) chapter of the CERT C Secure Coding Standard (2008).",
  "content_history": {
    "submission": {
      "submission_name": "CWE Content Team",
      "submission_organization": "MITRE",
      "submission_date": "2008-11-24"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-09-13",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08",
        "modification_comment": "updated Description, Name, Relationship_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03",
        "modification_comment": "updated Description, Name, References"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-04-27",
        "modification_comment": "updated Mapping_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2023-06-29",
        "modification_comment": "updated Mapping_Notes"
      }
    ],
    "previous_entry_name": [
      {
        "text": "CERT C Secure Coding Section 08 - Memory Management (MEM)",
        "date": "2017-11-08"
      },
      {
        "text": "CERT C Secure Coding (2008 Version) Section 08 - Memory Management (MEM)",
        "date": "2019-01-03"
      }
    ]
  },
  "relationships": [
    {
      "cweid": "119",
      "view_id": "734"
    },
    {
      "cweid": "128",
      "view_id": "734"
    },
    {
      "cweid": "131",
      "view_id": "734"
    },
    {
      "cweid": "190",
      "view_id": "734"
    },
    {
      "cweid": "20",
      "view_id": "734"
    },
    {
      "cweid": "226",
      "view_id": "734"
    },
    {
      "cweid": "244",
      "view_id": "734"
    },
    {
      "cweid": "252",
      "view_id": "734"
    },
    {
      "cweid": "415",
      "view_id": "734"
    },
    {
      "cweid": "416",
      "view_id": "734"
    },
    {
      "cweid": "476",
      "view_id": "734"
    },
    {
      "cweid": "528",
      "view_id": "734"
    },
    {
      "cweid": "590",
      "view_id": "734"
    },
    {
      "cweid": "591",
      "view_id": "734"
    },
    {
      "cweid": "628",
      "view_id": "734"
    },
    {
      "cweid": "665",
      "view_id": "734"
    },
    {
      "cweid": "687",
      "view_id": "734"
    },
    {
      "cweid": "754",
      "view_id": "734"
    }
  ],
  "references": [
    {
      "reference_id": "REF-597",
      "author": [
        "Robert C. Seacord"
      ],
      "title": "The CERT C Secure Coding Standard",
      "publication_year": "2008",
      "publication_month": "--10",
      "publication_day": "---14",
      "publisher": "Addison-Wesley Professional",
      "edition": "1st Edition"
    }
  ],
  "notes": [
    {
      "type": "Relationship",
      "text": "\n               <xhtml:p>In the 2008 version of the CERT C Secure Coding standard, the following rules were mapped to the following CWE IDs:</xhtml:p>\n                  <xhtml:ul>\n                     <xhtml:li>CWE-20 MEM10-C Define and use a pointer validation function</xhtml:li>\n                     <xhtml:li>CWE-119 MEM09-C Do not assume memory allocation routines initialize memory</xhtml:li>\n                     <xhtml:li>CWE-128 MEM07-C Ensure that the arguments to calloc(), when multiplied, can be represented as a size_t</xhtml:li>\n                     <xhtml:li>CWE-131 MEM35-C Allocate sufficient memory for an object</xhtml:li>\n                     <xhtml:li>CWE-190 MEM07-C Ensure that the arguments to calloc(), when multiplied, can be represented as a size_t</xhtml:li>\n                     <xhtml:li>CWE-190 MEM35-C Allocate sufficient memory for an object</xhtml:li>\n                     <xhtml:li>CWE-226 MEM03-C Clear sensitive information stored in reusable resources returned for reuse</xhtml:li>\n                     <xhtml:li>CWE-244 MEM03-C Clear sensitive information stored in reusable resources returned for reuse</xhtml:li>\n                     <xhtml:li>CWE-252 MEM32-C Detect and handle memory allocation errors</xhtml:li>\n                     <xhtml:li>CWE-415 MEM00-C Allocate and free memory in the same module, at the same level of abstraction</xhtml:li>\n                     <xhtml:li>CWE-415 MEM01-C Store a new value in pointers immediately after free()</xhtml:li>\n                     <xhtml:li>CWE-415 MEM31-C Free dynamically allocated memory exactly once</xhtml:li>\n                     <xhtml:li>CWE-416 MEM00-C Allocate and free memory in the same module, at the same level of abstraction</xhtml:li>\n                     <xhtml:li>CWE-416 MEM01-C Store a new value in pointers immediately after free()</xhtml:li>\n                     <xhtml:li>CWE-416 MEM30-C Do not access freed memory</xhtml:li>\n                     <xhtml:li>CWE-476 MEM32-C Detect and handle memory allocation errors</xhtml:li>\n                     <xhtml:li>CWE-528 MEM06-C Ensure that sensitive data is not written out to disk</xhtml:li>\n                     <xhtml:li>CWE-590 MEM34-C Only free memory allocated dynamically</xhtml:li>\n                     <xhtml:li>CWE-591 MEM06-C Ensure that sensitive data is not written out to disk</xhtml:li>\n                     <xhtml:li>CWE-628 MEM08-C Use realloc() only to resize dynamically allocated arrays</xhtml:li>\n                     <xhtml:li>CWE-665 MEM09-C Do not assume memory allocation routines initialize memory</xhtml:li>\n                     <xhtml:li>CWE-687 MEM04-C Do not perform zero length allocations</xhtml:li>\n                     <xhtml:li>CWE-754 MEM32-C Detect and handle memory allocation errors</xhtml:li>\n                  </xhtml:ul>\n            "
    }
  ]
}
